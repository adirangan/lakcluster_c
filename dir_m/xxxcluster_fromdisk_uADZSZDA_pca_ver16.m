function ...
[ ...
 parameter ...
 parameter_ext ...
] = ...
xxxcluster_fromdisk_uADZSZDA_pca_ver16( ...
 parameter ...
,parameter_ext ...
);
% Note: This is not set up to shuffle a scrambled data-set. ;
% shuffling is used on the original data-set to sample from the (label-shuffled) null-hypothesis. ;
% scrambling is used on the original data-set after finding/delineating a bicluster. ;

na=0;
if (nargin<1+na); parameter=[]; end; na=na+1;
if (nargin<1+na); parameter_ext=[]; end; na=na+1;
if isempty(parameter); parameter = struct('type','parameter'); end;
%%%%%%%%;
if ~isfield(parameter,'flag_verbose'); parameter.flag_verbose = 0; end;
if ~isfield(parameter,'dir_trunk'); parameter.dir_trunk = pwd; end;
if ~isfield(parameter,'dir_code'); parameter.dir_code = pwd; end;
if ~isfield(parameter,'str_prefix'); parameter.str_prefix = 'test'; end;
if ~isfield(parameter,'maf_lo_threshold'); parameter.maf_lo_threshold = 0.1; end;
if ~isfield(parameter,'maf_hi_threshold'); parameter.maf_hi_threshold = 0.5; end;
if ~isfield(parameter,'str_mr_0in'); parameter.str_mr_0in = ''; end;
if ~isfield(parameter,'str_mc_0in'); parameter.str_mc_0in = ''; end;
if ~isfield(parameter,'str_driver'); parameter.str_driver = 'dexcluster_driver'; end;
if ~isfield(parameter,'flag_reverse'); parameter.flag_reverse = 0; end;
if ~isfield(parameter,'flag_sparse_0in'); parameter.flag_sparse_0in = []; end;
if ~isfield(parameter,'kappa_squared_0in'); parameter.kappa_squared_0in = []; end;
if ~isfield(parameter,'QR_strategy'); parameter.QR_strategy = 'YnWt condense'; end;
if ~isfield(parameter,'QC_strategy'); parameter.QC_strategy = 'YnWt store one'; end;
if ~isfield(parameter,'n_study'); parameter.n_study = 1; end;
if ~isfield(parameter,'n_bin'); parameter.n_bin = parameter.n_study; end;
if ~isfield(parameter,'n_mds'); parameter.n_mds = 2; end;
if ~isfield(parameter,'ij_mds_use_'); parameter.ij_mds_use_ = [1:2]; end;
if ~isfield(parameter,'n_mds_repl'); parameter.n_mds_repl = 1; end;
if ~isfield(parameter,'gamma'); parameter.gamma = 0.002; end;
if ~isfield(parameter,'B_MLT'); parameter.B_MLT = 32; end;
if ~isfield(parameter,'Ireq'); parameter.Ireq = 0; end;
if ~isfield(parameter,'n_scramble'); parameter.n_scramble = 0; end;
if ~isfield(parameter,'scramble_out_xdrop_'); parameter.scramble_out_xdrop_ = {}; end;
if ~isfield(parameter,'scramble_rseed_'); parameter.scramble_rseed_ = []; end;
if ~isfield(parameter,'nshuffle'); parameter.nshuffle = 0; end;
if ~isfield(parameter,'flag_force_create'); parameter.flag_force_create = 0; end;
if ~isfield(parameter,'slurm_walltime'); parameter.slurm_walltime = 0; end;
if ~isfield(parameter,'slurm_nnodes'); parameter.slurm_nnodes = 1; end;
if ~isfield(parameter,'slurm_tpn'); parameter.slurm_tpn = 15; end;
if ~isfield(parameter,'slurm_memdecl'); parameter.slurm_memdecl = 32; end;
if ~isfield(parameter,'row_reduction_factor'); parameter.row_reduction_factor = 1.0; end;
if ~isfield(parameter,'col_reduction_factor'); parameter.col_reduction_factor = 1.0; end;
flag_verbose = parameter.flag_verbose;
dir_trunk = parameter.dir_trunk;
dir_code = parameter.dir_code;
str_prefix = parameter.str_prefix;
maf_lo_threshold = parameter.maf_lo_threshold;
maf_hi_threshold = parameter.maf_hi_threshold;
str_mr_0in = parameter.str_mr_0in;
str_mc_0in = parameter.str_mc_0in;
str_driver = parameter.str_driver;
flag_reverse = parameter.flag_reverse;
flag_sparse_0in = parameter.flag_sparse_0in;
kappa_squared_0in = parameter.kappa_squared_0in;
QR_strategy = parameter.QR_strategy;
QC_strategy = parameter.QC_strategy;
n_study = parameter.n_study;
n_bin = parameter.n_bin;
n_mds = parameter.n_mds;
ij_mds_use_ = parameter.ij_mds_use_;
n_mds_repl = parameter.n_mds_repl;
gamma = parameter.gamma;
B_MLT = parameter.B_MLT;
Ireq = parameter.Ireq;
n_scramble = parameter.n_scramble;
scramble_out_xdrop_ = parameter.scramble_out_xdrop_;
scramble_rseed_ = parameter.scramble_rseed_;
nshuffle = parameter.nshuffle;
flag_force_create = parameter.flag_force_create;
slurm_walltime = parameter.slurm_walltime;
slurm_nnodes = parameter.slurm_nnodes;
slurm_tpn = parameter.slurm_tpn;
slurm_memdecl = parameter.slurm_memdecl;
row_reduction_factor = parameter.row_reduction_factor;
col_reduction_factor = parameter.col_reduction_factor;
%%%%%%%%;
dir_0in = parameter.dir_0in;
str_name_s0000 = parameter.str_name_s0000;
dir_out_s0000 = parameter.dir_out_s0000;
%dir_out_trace = parameter.dir_out_trace;
%str_timing_s0000 = parameter.str_timing_s0000;
%%%%%%%%;
if isempty(parameter_ext); parameter_ext = struct('type','parameter_ext'); end;
if ~isfield(parameter_ext,'str_driver'); parameter_ext.str_driver = 'pca_driver'; end;
if ~isfield(parameter_ext,'b_mlt'); parameter_ext.b_mlt = 44; end;
if ~isfield(parameter_ext,'tolerance'); parameter_ext.tolerance = 1e-6; end;
if ~isfield(parameter_ext,'TEST_niter'); parameter_ext.TEST_niter = 1024; end;
if ~isfield(parameter_ext,'rank'); parameter_ext.rank = 2; end;
if ~isfield(parameter_ext,'flag_reverse'); parameter_ext.flag_reverse = parameter.flag_reverse; end;
if ~isfield(parameter_ext,'str_A_p'); parameter_ext.str_A_p = []; end;
if ~isfield(parameter_ext,'pca_mr_A_'); parameter_ext.pca_mr_A_ = []; end;
if ~isfield(parameter_ext,'pca_mr_Z_'); parameter_ext.pca_mr_Z_ = []; end;
if ~isfield(parameter_ext,'pca_mc_A'); parameter_ext.pca_mc_A = []; end;
if ~isfield(parameter_ext,'pca_mc_T'); parameter_ext.pca_mc_T = []; end;
if ~isfield(parameter_ext,'str_infix'); parameter_ext.str_infix = {}; end;
if ~isfield(parameter_ext,'dir_out'); parameter_ext.dir_out = {}; end;
if ~isfield(parameter_ext,'dir_out_jpg'); parameter_ext.dir_out_jpg = {}; end;
if ~isfield(parameter_ext,'dir_out_b16'); parameter_ext.dir_out_b16 = {}; end;
if ~isfield(parameter_ext,'dir_out_inp'); parameter_ext.dir_out_inp = {}; end;
if ~isfield(parameter_ext,'dir_out_mda'); parameter_ext.dir_out_mda = {}; end;
if ~isfield(parameter_ext,'dir_out_mat'); parameter_ext.dir_out_mat = {}; end;
if ~isfield(parameter_ext,'str_V'); parameter_ext.str_V = {}; end;
if ~isfield(parameter_ext,'str_AnV'); parameter_ext.str_AnV = {}; end;
if ~isfield(parameter_ext,'str_ZnV'); parameter_ext.str_ZnV = {}; end;
if ~isfield(parameter_ext,'flag_force_create'); parameter_ext.flag_force_create = parameter.flag_force_create; end;
pca_str_driver = parameter_ext.str_driver;
pca_b_mlt = parameter_ext.b_mlt;
pca_tolerance = parameter_ext.tolerance;
pca_TEST_niter = parameter_ext.TEST_niter;
pca_rank = parameter_ext.rank;
pca_flag_reverse = parameter_ext.flag_reverse;
pca_str_A_p = parameter_ext.str_A_p;
pca_mr_A_ = parameter_ext.pca_mr_A_;
pca_mr_Z_ = parameter_ext.pca_mr_Z_;
pca_mc_A = parameter_ext.pca_mc_A;
pca_mc_T = parameter_ext.pca_mc_T;
pca_str_infix = parameter_ext.str_infix;
pca_dir_out = parameter_ext.dir_out;
pca_dir_out_jpg = parameter_ext.dir_out_jpg;
pca_dir_out_b16 = parameter_ext.dir_out_b16;
pca_dir_out_inp = parameter_ext.dir_out_inp;
pca_dir_out_mda = parameter_ext.dir_out_mda;
pca_dir_out_mat = parameter_ext.dir_out_mat;
pca_str_V = parameter_ext.str_V;
pca_str_AnV = parameter_ext.str_AnV;
pca_str_ZnV = parameter_ext.str_ZnV;
pca_flag_force_create = parameter_ext.flag_force_create;
%%%%%%%%;

GLOBAL_memory_gb = slurm_memdecl;

bitj = 16;
if (n_bin==1); Ireq = 0; end;

%%%%%%%%;
if ( isempty(pca_dir_out) );
pca_dir_out = sprintf('%s/dir_pca',dir_out_s0000);
parameter_ext.dir_out = pca_dir_out;
if ~exist(pca_dir_out,'dir'); disp(sprintf(' %% mkdir %s',pca_dir_out)); mkdir(pca_dir_out); end;
pca_dir_out_jpg = sprintf('%s/dir_pca_jpg',pca_dir_out);
parameter_ext.dir_out_jpg = pca_dir_out_jpg;
if ~exist(pca_dir_out_jpg,'dir'); disp(sprintf(' %% mkdir %s',pca_dir_out_jpg)); mkdir(pca_dir_out_jpg); end;
pca_dir_out_b16 = sprintf('%s/dir_pca_b16',pca_dir_out);
parameter_ext.dir_out_b16 = pca_dir_out_b16;
if ~exist(pca_dir_out_b16,'dir'); disp(sprintf(' %% mkdir %s',pca_dir_out_b16)); mkdir(pca_dir_out_b16); end;
pca_dir_out_b16_plus_prefix = sprintf('%s/%s',pca_dir_out_b16,str_name_s0000);
pca_dir_out_inp = sprintf('%s/dir_pca_inp',pca_dir_out);
parameter_ext.dir_out_inp = pca_dir_out_inp;
if ~exist(pca_dir_out_inp,'dir'); disp(sprintf(' %% mkdir %s',pca_dir_out_inp)); mkdir(pca_dir_out_inp); end;
pca_dir_out_mda = sprintf('%s/dir_pca_mda',pca_dir_out);
parameter_ext.dir_out_mda = pca_dir_out_mda;
if ~exist(pca_dir_out_mda,'dir'); disp(sprintf(' %% mkdir %s',pca_dir_out_mda)); mkdir(pca_dir_out_mda); end;
pca_dir_out_mat = sprintf('%s/dir_pca_mat',pca_dir_out);
parameter_ext.dir_out_mat = pca_dir_out_mat;
if ~exist(pca_dir_out_mat,'dir'); disp(sprintf(' %% mkdir %s',pca_dir_out_mat)); mkdir(pca_dir_out_mat); end;
end;%if ( isempty(pca_dir_out) );
%%%%%%%%;
if ( isempty(pca_str_infix) );
pca_str_infix = sprintf('pca');
parameter_ext.str_infix = pca_str_infix;
end;%if ( isempty(pca_str_infix) );
%%%%%%%%;
if ( isempty(pca_str_A_p) );
pca_str_A_p = sprintf('%s/A_p.mda',pca_dir_out_mda);
parameter_ext.str_A_p = pca_str_A_p;
end;%if ( isempty(pca_str_A_p) );
if ( isempty(pca_str_V) );
pca_str_V = sprintf('%s/%s_k%d_B%d_V_.mda',pca_dir_out_mda,pca_str_infix,pca_rank,pca_b_mlt);
parameter_ext.str_V = pca_str_V;
end;%if ( isempty(pca_str_V) );
if ( isempty(pca_str_AnV) );
pca_str_AnV = sprintf('%s/%s_k%d_B%d_AnV_.mda',pca_dir_out_mda,pca_str_infix,pca_rank,pca_b_mlt);
parameter_ext.str_AnV = pca_str_AnV;
end;%if ( isempty(pca_str_AnV) );
if ( isempty(pca_str_ZnV) );
pca_str_ZnV = sprintf('%s/%s_k%d_B%d_ZnV_.mda',pca_dir_out_mda,pca_str_infix,pca_rank,pca_b_mlt);
parameter_ext.str_ZnV = pca_str_ZnV;
end;%if ( isempty(pca_str_ZnV) );
%%%%%%%%;

%%%%%%%%;
% determing flag_found_all. ;
%%%%%%%%;
flag_found_all = 0;
if ( strcmp(pca_str_driver,'A_p_driver') );
flag_found_all = exist(pca_str_A_p,'file');
end;%if ( strcmp(pca_str_driver,'A_p_driver') );
if ( strcmp(pca_str_driver,'pca_driver') );
flag_found_all = exist(pca_str_V,'file');
end;%if ( strcmp(pca_str_driver,'pca_driver') );
if ( strcmp(pca_str_driver,'pca_proj_driver') );
flag_found_all = exist(pca_str_AnV,'file') & exist(pca_str_ZnV,'file');
end;%if ( strcmp(pca_str_driver,'pca_proj_driver') );

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
if (pca_flag_force_create | ~flag_found_all);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;

dir_0in_plus_prefix = sprintf('%s/%s',dir_0in,str_prefix);
dir_out_plus_prefix = sprintf('%s/%s',dir_out_s0000,str_name_s0000);

Y_n_cols=0; %<-- not using genetic controls. ;

% reading original row-masks for A and Z ;
str_mr_A_ori_ = cell(n_bin,1);
mr_A_ori_ = cell(n_bin,1);
str_mr_Z_ori_ = cell(n_bin,1);
mr_Z_ori_ = cell(n_bin,1);
A_n_rij_ = cell(n_bin,1);
Z_n_rij_ = cell(n_bin,1);
for nb=0:n_bin-1;
if (numel(str_mr_0in)>0);
if (n_bin==1); str_tmp = sprintf('%s_mr_A_%s_full.b16',dir_0in_plus_prefix,str_mr_0in); else; str_tmp = sprintf('%s_mr_A_%s_%0.2d.b16',dir_0in_plus_prefix,str_mr_0in,1+nb); end;
 else;
if (n_bin==1); str_tmp = sprintf('%s_mr_A_full.b16',dir_0in_plus_prefix); else; str_tmp = sprintf('%s_mr_A_%0.2d.b16',dir_0in_plus_prefix,1+nb); end;
end;%if (numel(str_mr_0in)>0);
str_mr_A_ori_{1+nb} = str_tmp;
mr_A_ori_{1+nb} = (binary_uncompress(str_tmp)>0);
A_n_rij_{1+nb} = find(mr_A_ori_{1+nb});
if (numel(str_mr_0in)>0);
if (n_bin==1); str_tmp = sprintf('%s_mr_Z_%s_full.b16',dir_0in_plus_prefix,str_mr_0in); else; str_tmp = sprintf('%s_mr_Z_%s_%0.2d.b16',dir_0in_plus_prefix,str_mr_0in,1+nb); end;
 else;
if (n_bin==1); str_tmp = sprintf('%s_mr_Z_full.b16',dir_0in_plus_prefix); else; str_tmp = sprintf('%s_mr_Z_%0.2d.b16',dir_0in_plus_prefix,1+nb); end;
end;%if (numel(str_mr_0in)>0);
str_mr_Z_ori_{1+nb} = str_tmp;
mr_Z_ori_{1+nb} = (binary_uncompress(str_tmp)>0);
Z_n_rij_{1+nb} = find(mr_Z_ori_{1+nb});
end;%for nb=0:n_bin-1;

% reading original col-masks for A ;
if (numel(str_mc_0in)>0);
str_tmp = sprintf('%s_mc_A_%s.b16',dir_0in_plus_prefix,str_mc_0in);
str_mc_A_pre = str_tmp;
mc_A_pre = (binary_uncompress(str_tmp)>0);
else;
str_tmp = sprintf('%s_mc_A.b16',dir_0in_plus_prefix);
str_mc_A_pre = str_tmp;
mc_A_pre = (binary_uncompress(str_tmp)>0);
end;%if (numel(str_mc_0in)>0);
A_n_cij = find(mc_A_pre);

M_n_rows_ = zeros(n_bin,1);
A_n_rows_ = zeros(n_bin,1);
Z_n_rows_ = zeros(n_bin,1);
for nb=0:n_bin-1;
M_n_rows_(1+nb) = numel(mr_A_ori_{1+nb});
A_n_rows_(1+nb) = sum(mr_A_ori_{1+nb});
Z_n_rows_(1+nb) = sum(mr_Z_ori_{1+nb});
end;%for nb=0:n_bin-1;
M_n_cols = numel(mc_A_pre);
if (flag_verbose>0); disp(sprintf(' %% n_bin %d; total vs cases vs controls: ',n_bin)); end;
if (flag_verbose>0); disp(sprintf(' %% %s',num2str([M_n_rows_ , A_n_rows_ , Z_n_rows_]))); end;

flag_T = 0;
if (~isempty(pca_mc_T));
if (sum(pca_mc_T)<=1);
n_mds_repl = 0;
ij_mds_use_ = [];
end;%if (sum(pca_mc_T)<=1);
if (sum(pca_mc_T)> 1);
n_mds_repl = 1;
ij_mds_use_ = find(pca_mc_T);
end;%if (sum(pca_mc_T)> 1);
end;%if (~isempty(pca_mc_T));

% compressing T_n_ in case where numel(ij_mds_use_)~=2 or n_mds_repl<1;
if (n_mds_repl<1 | numel(ij_mds_use_)~=2);
flag_T = 0;
T_n_ = cell(n_bin,1);
T_n_crop_ = cell(n_bin,1);
T_t_crop_ = cell(n_bin,1);
T_n_crop_cols = 1+numel(ij_mds_use_);
for nb=0:n_bin-1;
if (n_bin==1); str_tmp = sprintf('%s_T_full_n.b16',dir_0in_plus_prefix); else; str_tmp = sprintf('%s_T_%0.2d_n.b16',dir_0in_plus_prefix,1+nb); end;
[bitj,nrows,ncols] = binary_getsize(str_tmp);
if (flag_verbose>0); disp(sprintf(' %% reading %s = (%d,%d)',str_tmp,nrows,ncols)); end;
T_n_{1+nb} = binary_uncompress(str_tmp);
T_n_crop_{1+nb} = T_n_{1+nb}(:,[1,(1+(ij_mds_use_))]);
T_t_crop_{1+nb} = transpose(T_n_crop_{1+nb});
if (n_bin==1); str_tmp = sprintf('%s_T_crop_full_n.b16',pca_dir_out_b16_plus_prefix); else; str_tmp = sprintf('%s_T_crop_%0.2d_n.b16',pca_dir_out_b16_plus_prefix,1+nb); end;
if (flag_verbose>0); disp(sprintf(' %% writing %s = (%d,%d)',str_tmp,size(T_n_crop_{1+nb}))); end;
if (pca_flag_force_create | ~exist(str_tmp,'file'));
if (flag_verbose>0); disp(sprintf(' %% %s not found, creating',str_tmp)); end;
binary_compress(bitj,T_n_crop_{1+nb}>0,str_tmp);
end;%if (pca_flag_force_create | ~exist(str_tmp,'file'));
if (n_bin==1); str_tmp = sprintf('%s_T_crop_full_t.b16',pca_dir_out_b16_plus_prefix); else; str_tmp = sprintf('%s_T_crop_%0.2d_t.b16',pca_dir_out_b16_plus_prefix,1+nb); end;
if (flag_verbose>0); disp(sprintf(' %% writing %s = (%d,%d)',str_tmp,size(T_t_crop_{1+nb}))); end;
if (pca_flag_force_create | ~exist(str_tmp,'file'));
if (flag_verbose>0); disp(sprintf(' %% %s not found, creating',str_tmp)); end;
binary_compress(bitj,T_t_crop_{1+nb}>0,str_tmp);
end;%if (pca_flag_force_create | ~exist(str_tmp,'file'));
end;%for nb=0:n_bin-1;
mc_T_crop = ones(T_n_crop_cols,1);
str_tmp = sprintf('%s_mc_T_crop.b16',pca_dir_out_b16_plus_prefix);
if (flag_verbose>0); disp(sprintf(' %% writing %s = (%d,%d)',str_tmp,size(mc_T_crop))); end;
if (pca_flag_force_create | ~exist(str_tmp,'file'));
if (flag_verbose>0); disp(sprintf(' %% %s not found, creating',str_tmp)); end;
binary_compress(bitj,mc_T_crop(:)>0,str_tmp);
end;%if (pca_flag_force_create | ~exist(str_tmp,'file'));
if (flag_verbose>0); disp(sprintf(' %% mc_T_crop: %s',num2str(transpose(mc_T_crop)))); end;
str_mc_T_crop = str_tmp;
T_n_crop_cij = 1:T_n_crop_cols;
end;%if (n_mds_repl<1 | numel(ij_mds_use_)~=2);

% copying T_n_ from T_m2rx_n in case where numel(ij_mds_use_)==2 and n_mds_repl>0;
if (n_mds_repl>=1 & numel(ij_mds_use_)==2);
flag_T = 1;
mds_str = sprintf('m%dr%d',numel(ij_mds_use_),n_mds_repl);
if (isempty(kappa_squared_0in) | kappa_squared_0in<=0);
mds_kappa_squared = textread(sprintf('%s_T_%s_kappa_squared.txt',dir_0in_plus_prefix,mds_str));
else;
mds_kappa_squared = kappa_squared_0in;
end;%if (isempty(kappa_squared_0in) | kappa_squared_0in<=0);
T_n_ = cell(n_bin,1);
T_t_ = cell(n_bin,1);
T_n_cols = 1+numel(ij_mds_use_)*n_mds_repl;
for nb=0:n_bin-1;
if (n_bin==1); str_tmp = sprintf('%s_T_%s_full_n.b16',dir_0in_plus_prefix,mds_str); else; str_tmp = sprintf('%s_T_%s_%0.2d_n.b16',dir_0in_plus_prefix,mds_str,1+nb); end;
[bitj,nrows,ncols] = binary_getsize(str_tmp);
if (flag_verbose>0); disp(sprintf(' %% reading %s = (%d,%d)',str_tmp,nrows,ncols)); end;
T_n_{1+nb} = binary_uncompress(str_tmp);
T_t_{1+nb} = transpose(T_n_{1+nb});
end;%for nb=0:n_bin-1;
mc_T = ones(T_n_cols,1);
str_tmp = sprintf('%s_mc_T_%s.b16',pca_dir_out_b16_plus_prefix,mds_str);
if (flag_verbose>0); disp(sprintf(' %% writing %s = (%d,%d)',str_tmp,size(mc_T))); end;
if (pca_flag_force_create | ~exist(str_tmp,'file'));
if (flag_verbose>0); disp(sprintf(' %% %s not found, creating',str_tmp)); end;
binary_compress(bitj,mc_T(:)>0,str_tmp);
end;%if (pca_flag_force_create | ~exist(str_tmp,'file'));
if (flag_verbose>0); disp(sprintf(' %% mc_T: %s',num2str(transpose(mc_T)))); end;
str_mc_T = str_tmp;
T_n_cij = 1:T_n_cols;
end;%if (n_mds_repl>= | numel(ij_mds_use_)==2);

% checking consistency ;
if (flag_T==0); flag_error = xxxcluster_fromdisk_uADZSZDA_check_2(M_n_rows_,M_n_cols,A_n_rij_,A_n_cij,Z_n_rij_,T_n_crop_cols,T_n_crop_,T_n_crop_cij); end;
if (flag_T==1); flag_error = xxxcluster_fromdisk_uADZSZDA_check_2(M_n_rows_,M_n_cols,A_n_rij_,A_n_cij,Z_n_rij_,T_n_cols,T_n_,T_n_cij); end;
if (flag_error); disp(sprintf(' %% Warning, incorrect dimensions in xxxcluster_fromdisk_uADZSZDA_pca_ver16')); return; end;

% performing covariate-respecting shuffle ;
if (nshuffle>0);
if (flag_verbose>0); disp(sprintf(' %% Warning, ignoring nshuffle %d in xxxcluster_fromdisk_uADZSZDA_pca_ver16. ;',nshuffle)); end;
end;%if (nshuffle>0);

% writing row-masks ;
A_n_rows_used=0;
Z_n_rows_used=0;
mr_A_use_ = mr_A_ori_; mr_Z_use_ = mr_Z_ori_;
str_mr_A_use_ = str_mr_A_ori_;
str_mr_Z_use_ = str_mr_Z_ori_;
for nb=0:n_bin-1;
if (n_bin==1); str_tmp = sprintf('%s_mr_A_full.b16',dir_out_plus_prefix); else; str_tmp = sprintf('%s_mr_A_%0.2d.b16',dir_out_plus_prefix,1+nb); end;
if (pca_flag_force_create | ~exist(str_tmp,'file'));
if (flag_verbose>0); disp(sprintf(' %% %s not found, creating',str_tmp)); end;
binary_compress(bitj,mr_A_use_{1+nb}(:)>0,str_tmp);
end;%if (pca_flag_force_create | ~exist(str_tmp,'file'));
str_mr_A_use_{1+nb} = str_tmp;
if (n_bin==1); str_tmp = sprintf('%s_mr_Z_full.b16',dir_out_plus_prefix); else; str_tmp = sprintf('%s_mr_Z_%0.2d.b16',dir_out_plus_prefix,1+nb); end;
if (pca_flag_force_create | ~exist(str_tmp,'file'));
if (flag_verbose>0); disp(sprintf(' %% %s not found, creating',str_tmp)); end;
binary_compress(bitj,mr_Z_use_{1+nb}(:)>0,str_tmp);
end;%if (pca_flag_force_create | ~exist(str_tmp,'file'));
str_mr_Z_use_{1+nb} = str_tmp;
A_n_rows_used = A_n_rows_used + sum(mr_A_use_{1+nb}(:)>0);
Z_n_rows_used = Z_n_rows_used + sum(mr_Z_use_{1+nb}(:)>0);
end;%for nb=0:n_bin-1;

% writing col-mask ;
mc_A_use = mc_A_pre;
fname_bim = sprintf('%s/%s_bim.ext',dir_0in,str_prefix);
if  exist(fname_bim,'file');
mc_A_bim = mc_from_bim_ext_ver5(fname_bim,maf_lo_threshold,maf_hi_threshold);
end;%if  exist(fname_bim,'file');
if ~exist(fname_bim,'file');
if (flag_verbose); disp(sprintf(' %% %s not found, skipping',fname_bim)); end;
mc_A_bim = ones(size(mc_A_use));
end;%if ~exist(fname_bim,'file');
mc_A_use = mc_A_use .* mc_A_bim;
str_mc_A_use = str_mc_A_pre;
if (flag_verbose>0); disp(sprintf(' %% maf_lo_threshold %0.2f maf_hi_threshold %0.2f, retaining %d mc values, but setting %d mc values to 0',maf_lo_threshold,maf_hi_threshold,sum(mc_A_use),sum(~mc_A_use))); end;
fname_mc_A = sprintf('%s_mc_A.b16',dir_out_plus_prefix);
if (flag_verbose>0); disp(sprintf(' %% creating %s',fname_mc_A)); end;
str_tmp = fname_mc_A;
if (pca_flag_force_create | ~exist(str_tmp,'file'));
if (flag_verbose>0); disp(sprintf(' %% %s not found, creating',str_tmp)); end;
binary_compress(bitj,mc_A_use(:)>0,str_tmp); 
end;%if (pca_flag_force_create | ~exist(str_tmp,'file'));
str_mc_A_use = str_tmp;
if (flag_verbose>0); disp(sprintf(' %% mc_A nsnps %.9d/%.9d',sum(mc_A_use(:)>0),numel(mc_A_use))); end;
A_n_cols_used = sum(mc_A_use(:)>0);

if (flag_verbose>0); disp(sprintf(' %% A_n_rows_used %d Z_n_rows_used %d A_n_cols_used %d',A_n_rows_used,Z_n_rows_used,A_n_cols_used)); end;

%%%%%%%%;
if ~isempty(pca_mr_A_);
for nb=0:n_bin-1;
if (n_bin==1); str_tmp = sprintf('%s/%s_mr_A_full.b16',pca_dir_out_b16,pca_str_infix); else; str_tmp = sprintf('%s/%s_mr_A_%0.2d.b16',pca_dir_out_b16,pca_str_infix,1+nb); end;
if (pca_flag_force_create | ~exist(str_tmp,'file'));
if (flag_verbose>0); disp(sprintf(' %% %s not found, creating',str_tmp)); end;
binary_compress(bitj,pca_mr_A_{1+nb}>0,str_tmp);
end;%if (pca_flag_force_create | ~exist(str_tmp,'file'));
str_mr_A_use_{1+nb} = str_tmp;
end;%for nb=0:n_bin-1;
end;%if ~isempty(pca_mr_A_);
%%%%%%%%;
if ~isempty(pca_mr_Z_);
for nb=0:n_bin-1;
if (n_bin==1); str_tmp = sprintf('%s/%s_mr_Z_full.b16',pca_dir_out_b16,pca_str_infix); else; str_tmp = sprintf('%s/%s_mr_Z_%0.2d.b16',pca_dir_out_b16,pca_str_infix,1+nb); end;
if (pca_flag_force_create | ~exist(str_tmp,'file'));
if (flag_verbose>0); disp(sprintf(' %% %s not found, creating',str_tmp)); end;
binary_compress(bitj,pca_mr_Z_{1+nb}>0,str_tmp);
end;%if (pca_flag_force_create | ~exist(str_tmp,'file'));
str_mr_Z_use_{1+nb} = str_tmp;
end;%for nb=0:n_bin-1;
end;%if ~isempty(pca_mr_Z_);
%%%%%%%%;
if ~isempty(pca_mc_A);
str_tmp = sprintf('%s/%s_mc_A.b16',pca_dir_out_b16,pca_str_infix);
if (pca_flag_force_create | ~exist(str_tmp,'file'));
if (flag_verbose>0); disp(sprintf(' %% %s not found, creating',str_tmp)); end;
binary_compress(bitj,pca_mc_A>0,str_tmp);
end;%if (pca_flag_force_create | ~exist(str_tmp,'file'));
str_mc_A_use = str_tmp;
end;%if ~isempty(pca_mc_A);
%%%%%%%%;
if ~isempty(pca_mc_T);
%%%%;
if (flag_T==0);
str_out_ = xxxcluster_fromdisk_uADZSZDA_excerpt_0(-1,'GLOBAL_T_n_name_= ',n_bin,pca_dir_out_b16_plus_prefix,'_T_crop_','_n.b16');
[tmp_vname_,str_out__] = xxxcluster_fromdisk_uADZSZDA_excerpt_2(n_bin,str_out_);
assert(strcmp(tmp_vname_,'GLOBAL_T_n_name_'));
[~,tmp_nrows,tmp_ncols] = binary_getsize(str_out__{1});
T_n_crop_cols = tmp_ncols;
%str_tmp = sprintf('%s/%s_mc_T_crop.b16',pca_dir_out_b16,pca_str_infix);
str_tmp = str_mc_T_crop;
end;%if (flag_T==0);
%%%%;
if (flag_T==1);
%str_tmp = sprintf('%s/%s_mc_T.b16',pca_dir_out_b16,pca_str_infix);
str_tmp = str_mc_T;
end;%if (flag_T==1);
%%%%;
str_mc_T_use = str_tmp;
%%%%;
end;%if ~isempty(pca_mc_T);
%%%%%%%%;

Z_bother = 0;
for nstudy=0:n_study-1;
Z_bother = Z_bother + sum(binary_uncompress(str_mr_Z_use_{1+nstudy})>0);
end;%for nstudy=0:n_study-1;
A_bother = 0;
for nstudy=0:n_study-1;
A_bother = A_bother + sum(binary_uncompress(str_mr_A_use_{1+nstudy})>0);
end;%for nstudy=0:n_study-1;
X_bother = ( (pca_flag_reverse==1) & A_bother ) | ( (pca_flag_reverse==0) & Z_bother );

fname_0in = sprintf('%s/%s.in',pca_dir_out_inp,pca_str_infix);
parameter_ext.str_0in = fname_0in;
fp = fopen(fname_0in,'w');
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
fprintf(fp,'GLOBAL_verbose= %d;\n',flag_verbose);
fprintf(fp,'GLOBAL_thread_count= 15;\n');
fprintf(fp,'GLOBAL_omp_type= 1;\n');
fprintf(fp,'GLOBAL_TEST_TYPE= %s;\n',pca_str_driver);
fprintf(fp,'GLOBAL_pca_infix= %s;\n',pca_str_infix);
if strcmp(pca_str_driver,'pca_proj_driver');
fprintf(fp,'GLOBAL_pca_V_= %s;\n',pca_str_V);
end;%if strcmp(pca_str_driver,'pca_proj_driver');
fprintf(fp,'GLOBAL_pca_iteration_num= 1;\n');
fprintf(fp,'GLOBAL_pca_iteration_max= 0;\n');
fprintf(fp,'GLOBAL_pca_iteration_min= 0;\n');
fprintf(fp,'GLOBAL_pca_rank= %d;\n',pca_rank);
fprintf(fp,'GLOBAL_pca_tolerance= %0.16f;\n',pca_tolerance);
fprintf(fp,'GLOBAL_TEST_niter= %d;\n',pca_TEST_niter);
if (~isempty(flag_sparse_0in) & flag_sparse_0in~=1);
fprintf(fp,'GLOBAL_TEST_sparse= %d;\n',flag_sparse_0in);
end;%if (~isempty(flag_sparse_0in) & flag_sparse_0in~=1);
fprintf(fp,'GLOBAL_NBINS= %d;\n',n_bin);
if ( (pca_b_mlt>0) & (pca_b_mlt~=32) );
fprintf(fp,'GLOBAL_B_MLT= %d;\n',pca_b_mlt);
end;%if ( (pca_b_mlt>0) & (pca_b_mlt~=32) );
fprintf(fp,'GLOBAL_gamma= %0.4f;\n',gamma);
fprintf(fp,'GLOBAL_Ireq= %d;\n',Ireq);
if (flag_T==1); fprintf(fp,'GLOBAL_kappa_squared= %0.16f;\n',mds_kappa_squared); end;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
A_name_string = '_A_';
xxxcluster_fromdisk_uADZSZDA_excerpt_0(fp,'GLOBAL_A_n_name_= ',n_bin,dir_0in_plus_prefix,A_name_string,'_n.b16');
xxxcluster_fromdisk_uADZSZDA_excerpt_0(fp,'GLOBAL_A_t_name_= ',n_bin,dir_0in_plus_prefix,A_name_string,'_t.b16');
xxxcluster_fromdisk_uADZSZDA_excerpt_1(fp,'GLOBAL_A_n_rows_= ',n_bin,M_n_rows_);
fprintf(fp,'GLOBAL_A_n_cols= %d;\n',M_n_cols);
if (pca_flag_reverse==1); xxxcluster_fromdisk_uADZSZDA_pca_excerpt_0(fp,'GLOBAL_A_n_rind_= ',n_bin,str_mr_Z_use_); end;
if (pca_flag_reverse==0); xxxcluster_fromdisk_uADZSZDA_pca_excerpt_0(fp,'GLOBAL_A_n_rind_= ',n_bin,str_mr_A_use_); end;
fprintf(fp,'GLOBAL_A_n_cind= %s;\n',str_mc_A_use);
%if  ~strcmp(pca_str_driver,'A_p_driver') & exist(sprintf('%s/dir_pca/dir_pca_mda/A_p.mda',dir_out_s0000),'file');
%fprintf(fp,'GLOBAL_A_p_name= %s/dir_pca/dir_pca_mda/A_p.mda;\n',dir_out_s0000);
%end;%if  ~strcmp(pca_str_driver,'A_p_driver') & exist(sprintf('%s/dir_pca/dir_pca_mda/A_p.mda',dir_out_s0000),'file');
if ~strcmp(pca_str_driver,'A_p_driver') & ~isempty(pca_str_A_p) & exist(pca_str_A_p,'file');
fprintf(fp,'GLOBAL_A_p_name= %s;\n',pca_str_A_p);
end;%if ~strcmp(pca_str_driver,'A_p_driver') & ~isempty(pca_str_A_p) & exist(pca_str_A_p,'file');
if X_bother;
xxxcluster_fromdisk_uADZSZDA_excerpt_0(fp,'GLOBAL_Z_n_name_= ',n_bin,dir_0in_plus_prefix,A_name_string,'_n.b16');
xxxcluster_fromdisk_uADZSZDA_excerpt_0(fp,'GLOBAL_Z_t_name_= ',n_bin,dir_0in_plus_prefix,A_name_string,'_t.b16');
xxxcluster_fromdisk_uADZSZDA_excerpt_1(fp,'GLOBAL_Z_n_rows_= ',n_bin,M_n_rows_);
if (pca_flag_reverse==1); xxxcluster_fromdisk_uADZSZDA_pca_excerpt_0(fp,'GLOBAL_Z_n_rind_= ',n_bin,str_mr_A_use_); end;
if (pca_flag_reverse==0); xxxcluster_fromdisk_uADZSZDA_pca_excerpt_0(fp,'GLOBAL_Z_n_rind_= ',n_bin,str_mr_Z_use_); end;
end;%if X_bother;
fprintf(fp,'GLOBAL_Y_n_cols= %d;\n',Y_n_cols);
%%%%;
if strcmp(pca_str_driver,'pca_driver');
if (flag_T==0);
fprintf(fp,'GLOBAL_T_n_cols= %d;\n',T_n_crop_cols);
xxxcluster_fromdisk_uADZSZDA_excerpt_0(fp,'GLOBAL_T_n_name_= ',n_bin,pca_dir_out_b16_plus_prefix,'_T_crop_','_n.b16');
xxxcluster_fromdisk_uADZSZDA_excerpt_0(fp,'GLOBAL_T_t_name_= ',n_bin,pca_dir_out_b16_plus_prefix,'_T_crop_','_t.b16');
fprintf(fp,'GLOBAL_T_n_cind= %s;\n',str_mc_T_use);
if X_bother;
xxxcluster_fromdisk_uADZSZDA_excerpt_0(fp,'GLOBAL_S_n_name_= ',n_bin,pca_dir_out_b16_plus_prefix,'_T_crop_','_n.b16');
xxxcluster_fromdisk_uADZSZDA_excerpt_0(fp,'GLOBAL_S_t_name_= ',n_bin,pca_dir_out_b16_plus_prefix,'_T_crop_','_t.b16');
end;%if X_bother;
end;%if (flag_T==0);
if (flag_T==1);
fprintf(fp,'GLOBAL_T_n_cols= %d;\n',T_n_cols);
xxxcluster_fromdisk_uADZSZDA_excerpt_0(fp,'GLOBAL_T_n_name_= ',n_bin,dir_0in_plus_prefix,sprintf('_T_%s_',mds_str),'_n.b16');
xxxcluster_fromdisk_uADZSZDA_excerpt_0(fp,'GLOBAL_T_t_name_= ',n_bin,dir_0in_plus_prefix,sprintf('_T_%s_',mds_str),'_t.b16');
fprintf(fp,'GLOBAL_T_n_cind= %s;\n',str_mc_T_use);
if X_bother;
xxxcluster_fromdisk_uADZSZDA_excerpt_0(fp,'GLOBAL_S_n_name_= ',n_bin,dir_0in_plus_prefix,sprintf('_T_%s_',mds_str),'_n.b16');
xxxcluster_fromdisk_uADZSZDA_excerpt_0(fp,'GLOBAL_S_t_name_= ',n_bin,dir_0in_plus_prefix,sprintf('_T_%s_',mds_str),'_t.b16');
end;%if X_bother;
end;%if (flag_T==1);
end;%if strcmp(pca_str_driver,'pca_driver');
%%%%;
fprintf(fp,'GLOBAL_DIR_NAME= %s;\n',pca_dir_out_mda);
fprintf(fp,'END= 0;\n');
fprintf(fp,'%% generated by xxxcluster_fromdisk_uADZSZDA_pca_ver16.m on %s;\n',date);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
fclose(fp);
type(fname_0in);

flag_call=1*(slurm_walltime<=0);%flag_call = input(' call? 1=yes (default), 0=no:'); if isempty(flag_call); flag_call=1; end;
if flag_call;
if (flag_verbose>-1); disp(sprintf('%s/lakcluster_ver18 --GLOBAL_memory_gb %d < %s',dir_code,GLOBAL_memory_gb,fname_0in)); end;
system(sprintf('%s/lakcluster_ver18 --GLOBAL_memory_gb %d < %s',dir_code,GLOBAL_memory_gb,fname_0in));
end;%if flag_call;

flag_slurm = 1*(slurm_walltime>0);
if flag_slurm;
slurm_fname = sprintf('%s.slurm',pca_dir_out_inp);
slurm_fp = fopen(slurm_fname,'w');
fprintf(slurm_fp,'#!/bin/sh \n');
fprintf(slurm_fp,'#\n');
fprintf(slurm_fp,'#SBATCH --verbose\n');
fprintf(slurm_fp,'#SBATCH --job-name=%s\n',fname_0in);
fprintf(slurm_fp,'#SBATCH --output=%s_output.log\n',pca_dir_out_inp);
fprintf(slurm_fp,'#SBATCH --error=%s_error.log\n',pca_dir_out_inp);
slurm_walltime_use = slurm_walltime;
if (flag_exist_timing);
slurm_walltime_use = 1.5*elrt_s0000/3600;
if (flag_verbose>0); disp(sprintf(' %% slurm_walltime changed from %0.2f to %0.2f',slurm_walltime,slurm_walltime_use)); end;
end;%if (flag_exist_timing);
slurm_walltime_h = floor(slurm_walltime_use); slurm_walltime_m = min(59,ceil(60*(slurm_walltime_use - slurm_walltime_h)));
sprintf(' %% slurm_walltime=%d:%.2d:59',slurm_walltime_h,slurm_walltime_m);
fprintf(slurm_fp,'#SBATCH --time=%d:%.2d:59\n',slurm_walltime_h,slurm_walltime_m);
fprintf(slurm_fp,'#SBATCH --nodes=%d --ntasks-per-node=%d\n',slurm_nnodes,slurm_tpn);
fprintf(slurm_fp,'#SBATCH --mem=%dGB\n',slurm_memdecl);
fprintf(slurm_fp,'\n');
fprintf(slurm_fp,'/bin/hostname\n');
fprintf(slurm_fp,'/bin/pwd\n');
fprintf(slurm_fp,'module load matlab/2017b\n');
fprintf(slurm_fp,'%s/lakcluster_ver18 --GLOBAL_memory_gb %d < %s\n',dir_code,GLOBAL_memory_gb,fname_0in);
%%%%%%%%%%%%%%%%;
fclose(slurm_fp);
type(slurm_fname);
str_command = sprintf('sbatch %s;',slurm_fname);
fp = fopen(sprintf('%s/log.txt',dir_trunk),'a'); fprintf(fp,'%s # %s\n',str_command,datestr(now)); fclose(fp);
if (flag_verbose>-1); disp(sprintf('%s',str_command)); end;
%system(sprintf('%s\n',str_command));
end;%if flag_slurm;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
end;%if (pca_flag_force_create | ~flag_found_all);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
