function [out_xdrop_,trace_] = lakcluster_nonbinary_AAAA_rdrop_ver0(A_n_0in_,gamma);
% lakcluster. ;
% Does not binarize. ;
% Only drops rows (not columns). ;

if nargin<2; gamma = 0.0; end;
verbose=1;
[n_r,n_c] = size(A_n_0in_);

[rdrop_,cdrop_,lrij_,lcij_] = get_xdrop_(n_r,max(n_r,n_c),gamma);
cdrop_ = zeros(1,n_c); %<-- we do not drop any columns. ;
r_ij_ = 1:n_r; c_ij_ = 1:n_c;
n_a = length(rdrop_);
A_n_ = A_n_0in_; %<-- copy will be destroyed. ;
A_n_2_ = A_n_.^2; %<-- copy will be destroyed. ;
A_n_A_t_ = A_n_*transpose(A_n_); %<-- copy will be destroyed. ;
e_r_n_ = ones(n_r,1); e_c_n_ = ones(n_c,1);
%out_xdrop_ = zeros(n_r+n_c,2);
out_xdrop_ = zeros(n_r,2);
trace_ = zeros(n_a,6); %<-- [iteration , length(r_ij_) , length(c_ij_) , mean(QR_) , mean(QC_) , 1] ;
nx=0;
tic;
t_s = toc;
for na=1:n_a;
if (verbose);
if (mod(na,1024)==0); 
t_a = toc; t_e = t_a*n_a/na; 
disp(sprintf(' %% na %d/%d, time %0.2fs, estimated %0.2fs (%0.2fh)',na,n_a,t_a,t_e,t_e/3600)); 
end;%if (mod(na,10)==0); 
end;%if (verbose);
QR_ = zeros(n_r,1); for nr=1:n_r; QR_(nr) = dot(A_n_A_t_(nr,:),A_n_A_t_(nr,:)); end;%for nr=1:n_r;
QR_ = QR_ - ( A_n_2_ * e_c_n_ ).^2 - ( (A_n_2_) * ( transpose(A_n_2_) * e_r_n_ ) ) + ( (A_n_2_.^2) * e_c_n_ ) ;
QC_ = zeros(n_c,1); for nc=1:n_c; QC_(nc) = transpose(A_n_(:,nc)) * A_n_A_t_ * A_n_(:,nc) ; end;%for nc=1:n_c;
QC_ = QC_ - ( transpose(A_n_2_) * e_r_n_ ).^2 - ( transpose(A_n_2_) * ( (A_n_2_) * e_c_n_ ) ) + ( transpose(A_n_2_.^2) * e_r_n_ ) ;
trace_(na,:) = [na , length(r_ij_) , length(c_ij_) , mean(QR_) , mean(QC_) , 1.0];
[~,tmp_r_ij_] = sort(QR_(r_ij_));
r_rmv_ = r_ij_(tmp_r_ij_(1:rdrop_(na)));
r_rtn_ = r_ij_(tmp_r_ij_(rdrop_(na)+1:end));
[~,tmp_c_ij_] = sort(QC_(c_ij_));
c_rmv_ = []; c_rtn_ = c_ij_; %c_rmv_ = c_ij_(tmp_c_ij_(1:cdrop_(na))); c_rtn_ = c_ij_(tmp_c_ij_(cdrop_(na)+1:end));
d_n_ = A_n_(r_rmv_,c_rmv_);
c_n_ = A_n_(r_rtn_,c_rmv_);
b_n_ = A_n_(r_rmv_,c_rtn_);
a_n_ = A_n_(r_rtn_,c_rtn_);
A_n_A_t_(r_rmv_,r_rtn_) = 0; 
A_n_A_t_(r_rtn_,r_rmv_) = 0;
A_n_A_t_(r_rmv_,r_rmv_) = 0;
A_n_A_t_(r_rtn_,r_rtn_) = A_n_A_t_(r_rtn_,r_rtn_) - ( c_n_ * transpose(c_n_) ) ; %<-- update correlation matrix. ;
A_n_2_(r_rmv_,:) = 0; %<-- first we remove rows. ;
A_n_2_(:,c_rmv_) = 0; %<-- then we remove columns. ;
A_n_(r_rmv_,:) = 0; %<-- first we remove rows. ;
A_n_(:,c_rmv_) = 0; %<-- then we remove columns. ;
r_ij_(tmp_r_ij_(1:rdrop_(na))) = [];
c_ij_ = c_ij_; %c_ij_(tmp_c_ij_(1:cdrop_(na))) = [];
out_xdrop_(nx + (1:rdrop_(na)),:) = [r_rmv_(:)-1 , -ones(rdrop_(na),1)]; nx = nx+rdrop_(na);
%out_xdrop_(nx + (1:cdrop_(na)),:) = [-ones(cdrop_(na),1) , c_rmv_(:)-1]; nx = nx+cdrop_(na);
end;%for na=1:n_a;
