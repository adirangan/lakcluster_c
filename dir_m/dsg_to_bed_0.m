function [bed__,n_patient_bed] = dsg_to_bed_0(n_patient,n_snp,dsg__);
%%%%%%%%;
% Converts a dsg__ array into a bed__ array. ;
%%%%%%%%%;
% Input: ;
% n_patient: integer number of patients. ;
% n_snp: integer number of snps. ;
% dsg__: uint8 array of size (n_patient,n_snp). ;
%%%%%%%%;
% Output: ;
% bed__: uint8 (unsigned 8-bit integer) array of size (n_patient_bed,n_snp). ;
%        Stored in bed-format, with associated code and bit-ordering. ;
%        (see below). ;
%%%%%%%%;
bit8=8; bit4=4; 
n_patient_rup = n_patient + mod(-n_patient,4);

n_patient_bed = n_patient_rup/bit4;
assert(4*n_patient_bed==n_patient_rup);
%%%%%%%%%%%%%%%%;
% 0: nor <-- both off (homozygous GG). ;
% 1: mss <-- missing. ;
% 2: xor <-- one on one off (heterozygous AG). ;
% 3: and <-- both on (homozygous AA). ;
% 5: not <-- do not use. ;
%%%%%%%%%%%%%%%%;
snp_and_tag=uint8(3);
snp_xor_tag=uint8(2);
snp_nor_tag=uint8(0);
snp_mss_tag=uint8(1);
snp_not_tag=uint8(5);
assert(size(dsg__,1)==n_patient);
assert(size(dsg__,2)==n_snp);
bed__ = zeros(n_patient_bed,n_snp,'uint8');
n_patient_rem = mod(-n_patient,4);
dsg__ = uint8([uint8(dsg__) ; zeros(n_patient_rem,n_snp,'uint8')]);
assert(size(dsg__,1)==4*n_patient_bed);
stride4 = 4:4:4*n_patient_bed;
uchar_11000000 = ...
  uint8( ...
    snp_mss_tag*uint8(dsg__(stride4,:)>=3) ...
  + snp_and_tag*uint8(dsg__(stride4,:)==2) ...
  + snp_xor_tag*uint8(dsg__(stride4,:)==1) ...
  + snp_nor_tag*uint8(dsg__(stride4,:)==0) ...
  );
stride3 = 3:4:4*n_patient_bed;
uchar_00110000 = ...
  uint8( ...
    snp_mss_tag*uint8(dsg__(stride3,:)>=3) ...
  + snp_and_tag*uint8(dsg__(stride3,:)==2) ...
  + snp_xor_tag*uint8(dsg__(stride3,:)==1) ...
  + snp_nor_tag*uint8(dsg__(stride3,:)==0) ...
  );
stride2 = 2:4:4*n_patient_bed;
uchar_00001100 = ...
  uint8( ...
    snp_mss_tag*uint8(dsg__(stride2,:)>=3) ...
  + snp_and_tag*uint8(dsg__(stride2,:)==2) ...
  + snp_xor_tag*uint8(dsg__(stride2,:)==1) ...
  + snp_nor_tag*uint8(dsg__(stride2,:)==0) ...
  );
stride1 = 1:4:4*n_patient_bed;
uchar_00000011 = ...
  uint8( ...
    snp_mss_tag*uint8(dsg__(stride1,:)>=3) ...
  + snp_and_tag*uint8(dsg__(stride1,:)==2) ...
  + snp_xor_tag*uint8(dsg__(stride1,:)==1) ...
  + snp_nor_tag*uint8(dsg__(stride1,:)==0) ...
  );
uchar_11111111 = ....
  uint8( ...
    bitshift(uchar_11000000,+6) ...
  + bitshift(uchar_00110000,+4) ...
  + bitshift(uchar_00001100,+2) ...
  + bitshift(uchar_00000011,+0) ...
  );
bed__ = uint8(uchar_11111111);
clear uchar_00000011;clear uchar_00001100;clear uchar_00110000;clear uchar_11000000;
clear uchar_11111111;
%%%%%%%%%%%%%%%%;

