function dsg__ = bed_to_dsg_0(n_patient,n_snp,bed__);
%%%%%%%%;
% Converts a bed__ array into a dsg__ array. ;
%%%%%%%%%;
% Input: ;
% n_patient: integer number of patients. ;
% n_snp: integer number of snps. ;
% bed__: uint8 (unsigned 8-bit integer) array of size (n_patient_bed,n_snp). ;
%        Stored in bed-format, with associated code and bit-ordering. ;
%        (see below). ;
% Alternatively, bed__ can be provided as a filename, ;
% in which case the bed__ array is loaded. ;
%%%%%%%%;
% Output: ;
% dsg__: uint8 array of size (n_patient,n_snp). ;
%%%%%%%%;

%%%%%%%%;
if (nargin<1);
disp(sprintf(' %% testing bed_to_dsg_0 and dsg_to_bed_0'));
n_patient = 113; n_snp = 27;
rng(0);
dsg_orig__ = uint8(max(0,min(3,4*rand(n_patient,n_snp))));
bed_orig__ = dsg_to_bed_0(n_patient,n_snp,dsg_orig__);
dsg_reco__ = bed_to_dsg_0(n_patient,n_snp,bed_orig__);
bed_reco__ = dsg_to_bed_0(n_patient,n_snp,dsg_reco__);
disp(sprintf(' %% dsg error: %0.16f',norm(double(dsg_orig__)-double(dsg_reco__),'fro')));
disp(sprintf(' %% bed error: %0.16f',norm(double(bed_orig__)-double(bed_reco__),'fro')));
disp('returning');return;
end;%if (nargin<1);
%%%%%%%%;

bit8=8; bit4=4; 
n_patient_rup = n_patient + mod(-n_patient,4);
n_patient_bed = n_patient_rup/bit4;
assert(4*n_patient_bed==n_patient_rup);
%%%%%%%%%%%%%%%%;
% 0: nor <-- both off (homozygous GG). ;
% 1: mss <-- missing. ;
% 2: xor <-- one on one off (heterozygous AG). ;
% 3: and <-- both on (homozygous AA). ;
% 5: not <-- do not use. ;
%%%%%%%%%%%%%%%%;
snp_and_tag=uint8(3);
snp_xor_tag=uint8(2);
snp_nor_tag=uint8(0);
snp_mss_tag=uint8(1);
snp_not_tag=uint8(5);
%%%%;
if ischar(bed__);
fname_bed = bed__;
if (~exist(fname_bed,'file')); disp(sprintf(' %% Warning, %s not found in bed_to_dsg_0.m',fname_bed)); end;
fid=fopen(fname_bed,'r');
key1 = fread(fid,1,'uint8'); key2 = fread(fid,1,'uint8'); key3 = fread(fid,1,'uint8');
assert(key1==108); assert(key2==27); assert(key3==1);
bed__ = fread(fid,[n_patient_bed,n_snp],'uint8=>uint8');
end;%if ischar(bed__);
%%%%;
assert(size(bed__,1)==n_patient_bed);
assert(size(bed__,2)==n_snp);
uchar_11111111 = bed__;
uchar_00000011 = bitshift(bitshift(uchar_11111111,+6),-6);
uchar_00001100 = bitshift(bitshift(bitshift(uchar_11111111,-2),+6),-6);
uchar_00110000 = bitshift(bitshift(bitshift(uchar_11111111,-4),+6),-6);
uchar_11000000 = bitshift(uchar_11111111,-6);
clear uchar_11111111;
%%%%%%%%%%%%%%%%;
% set up dsg__. ;
%%%%%%%%%%%%%%%%;
dsg__ = zeros(4*n_patient_bed,n_snp,'uint8');
uchar_tmp = uchar_00000011; stride1 = 1:4:4*n_patient_bed;
dsg__(stride1,:) = uint8(0)*uint8(uchar_tmp==snp_nor_tag) + uint8(1)*uint8(uchar_tmp==snp_xor_tag) + uint8(2)*uint8(uchar_tmp==snp_and_tag) + uint8(3)*uint8(uchar_tmp==snp_mss_tag);
uchar_tmp = uchar_00001100; stride2 = 2:4:4*n_patient_bed;
dsg__(stride2,:) = uint8(0)*uint8(uchar_tmp==snp_nor_tag) + uint8(1)*uint8(uchar_tmp==snp_xor_tag) + uint8(2)*uint8(uchar_tmp==snp_and_tag) + uint8(3)*uint8(uchar_tmp==snp_mss_tag);
uchar_tmp = uchar_00110000; stride3 = 3:4:4*n_patient_bed;
dsg__(stride3,:) = uint8(0)*uint8(uchar_tmp==snp_nor_tag) + uint8(1)*uint8(uchar_tmp==snp_xor_tag) + uint8(2)*uint8(uchar_tmp==snp_and_tag) + uint8(3)*uint8(uchar_tmp==snp_mss_tag);
uchar_tmp = uchar_11000000; stride4 = 4:4:4*n_patient_bed;
dsg__(stride4,:) = uint8(0)*uint8(uchar_tmp==snp_nor_tag) + uint8(1)*uint8(uchar_tmp==snp_xor_tag) + uint8(2)*uint8(uchar_tmp==snp_and_tag) + uint8(3)*uint8(uchar_tmp==snp_mss_tag);
clear uchar_tmp;
clear uchar_00000011;clear uchar_00001100;clear uchar_00110000;clear uchar_11000000;
%%%%%%%%%%%%%%%%;
dsg__ = dsg__(1:n_patient,:);
