function lakcluster_uADZSZDA_dr_0(dir_code,dir_trunk,prefix,M_n,rev_flag,A_n_rind,A_n_cind,Z_n_rind,T_n,T_n_cind,gamma,B_MLT,Ireq,shuffle_num,walltime,verbose_flag)
% using lakcluster_ver18 ; 
% test with: ;
%{
  
  dir_code = '/data/rangan/dir_bcc/dir_code_111117';
  dir_trunk = pwd;
  prefix = 'test';
  nrows_A = 1920*1; ncols_A = 1920*2;
  rng(1);
  M_n = 2*(randn(nrows_A,ncols_A)>0)-1; 
  nrows_B = 128*1; ncols_B = 128*2;
  B_n = 2*(tutorial_makelr(nrows_B,ncols_B,1,0.01)>0)-1;
  p_r = randperm(nrows_A); [~,q_r] = sort(p_r); [~,q_r] = sort(p_r);
  p_c = randperm(ncols_A); [~,q_c] = sort(p_c); [~,q_c] = sort(p_c);
  M_n(p_r(1:nrows_B),p_c(1:ncols_B)) = B_n;
  rev_flag = 0;
  T_n = ones(nrows_A,1);
  A_n_rind = {p_r(1:nrows_A/4)};
  Z_n_rind = {p_r(nrows_A/4+1:nrows_A)};
  A_n_cind = 1:ncols_A;
  T_n_cind = 1;
  gamma = 0.05;
  B_MLT = 32;
  Ireq = 1;
  shuffle_num = 0;
  walltime = 0;
  verbose_flag = 0;
  lakcluster_uADZSZDA_dr_0(dir_code,dir_trunk,prefix,M_n,rev_flag,A_n_rind,A_n_cind,Z_n_rind,T_n,T_n_cind,gamma,B_MLT,Ireq,shuffle_num,walltime,verbose_flag);
  n_shuffles = 8;
  for shuffle_num = 1:n_shuffles;
  lakcluster_uADZSZDA_dr_0(dir_code,dir_trunk,prefix,M_n,rev_flag,A_n_rind,A_n_cind,Z_n_rind,T_n,T_n_cind,gamma,B_MLT,Ireq,shuffle_num,walltime,verbose_flag);
  end;%for shuffle_num = 1:n_shuffles;
  disp_flag=1;
  if disp_flag;
  test_string = sprintf('%s_%s',prefix,lakcluster_uADZSZDA_xfix_gen_ver0(rev_flag,gamma,B_MLT,Ireq,0));
  dir__in = sprintf('%s/dir_%s',dir_trunk,prefix);
  dir_out = sprintf('%s/dir_%s',dir__in,test_string); 
  disp(sprintf(' test_string: %s',test_string));
  disp(sprintf(' dir__in: %s',dir__in));
  disp(sprintf(' dir_out: %s',dir_out));
  tmpchar = sprintf('%s/out_xdrop_a.txt',dir_out);
  out_xdrop_a = textread(tmpchar);
  rij = out_xdrop_a(:,1); rij = rij(find(rij>-1)); rij = rij(end:-1:1); 
  cij = out_xdrop_a(:,2); cij = cij(find(cij>-1)); cij = cij(end:-1:1);
  subplot(1,3,1); imagesc(M_n(A_n_rind{1},p_c),[-1,1]); title('orig');
  subplot(1,3,2); imagesc(M_n(1+rij,1+cij),[-1,1]); title('lak');
  out_trace_ = cell(1+n_shuffles,1);
  for shuffle_num = 0:n_shuffles;  
  test_string = sprintf('%s_%s',prefix,lakcluster_uADZSZDA_xfix_gen_ver0(rev_flag,gamma,B_MLT,Ireq,shuffle_num));
  dir__in = sprintf('%s/dir_%s',dir_trunk,prefix);
  dir_out = sprintf('%s/dir_%s',dir__in,test_string); 
  out_trace_{1+shuffle_num} = textread(sprintf('%s/out_trace.txt',dir_out));
  end;%for shuffle_num = 0:n_shuffles;  
  Z_R_ij = 4;
  Z_C_ij = 5;
  subplot(2,3,3); hold on;
  for shuffle_num = 1:n_shuffles;
  plot(out_trace_{1+shuffle_num}(:,Z_R_ij),'b-','LineWidth',1);
  end;%for shuffle_num = 1:n_shuffles;
  plot(out_trace_{1}(:,Z_R_ij),'r-','LineWidth',2);
  hold off;
  title('Z_R');
  subplot(2,3,6); hold on;
  for shuffle_num = 1:n_shuffles;
  plot(out_trace_{1+shuffle_num}(:,Z_C_ij),'b-','LineWidth',1);
  end;%for shuffle_num = 1:n_shuffles;
  plot(out_trace_{1}(:,Z_C_ij),'r-','LineWidth',2);
  hold off;
  title('Z_C');  
  end; %if disp_flag;  
  
  %}

na=1;
if (nargin<na); dir_code = pwd; end; na=na+1;
if (nargin<na); dir_trunk = pwd; end; na=na+1;
if (nargin<na); prefix = 'test'; end; na=na+1;
if (nargin<na); M_n = randn(1024); end; na=na+1;
if (nargin<na); rev_flag = 0; end; na=na+1;
if (nargin<na); A_n_rind = {1:512}; end; na=na+1;
if (nargin<na); A_n_cind = 1:512; end; na=na+1;
if (nargin<na); Z_n_rind = {1:512}; end; na=na+1;
if (nargin<na); T_n = ones(1024,1); end; na=na+1;
if (nargin<na); T_n_cind = 1; end; na=na+1;
if (nargin<na); gamma = 0; end; na=na+1;
if (nargin<na); B_MLT = 32; end; na=na+1;
if (nargin<na); Ireq = 1; end; na=na+1;
if (nargin<na); shuffle_num = 0; end; na=na+1;
if (nargin<na); walltime = 0; end; na=na+1;
if (nargin<na); verbose_flag = 0; end; na=na+1;

nbins=length(A_n_rind);
QR_strategy = 'YnWt';
QC_strategy = 'YnWt store one';
%QC_strategy = 'ZtSWn';
bitj = 16;
force_create = 1;

test_string = sprintf('%s_%s',prefix,lakcluster_uADZSZDA_xfix_gen_ver0(rev_flag,gamma,B_MLT,Ireq,shuffle_num));
dir__in = sprintf('%s/dir_%s',dir_trunk,prefix);
dir_out = sprintf('%s/dir_%s',dir__in,test_string); 
disp(sprintf(' test_string: %s',test_string));
disp(sprintf(' dir__in: %s',dir__in));
disp(sprintf(' dir_out: %s',dir_out));
if ~exist(dir_out,'dir'); disp(sprintf(' %% creating %s',dir_out)); mkdir(dir_out); 
 else disp(sprintf(' %% directory %s already exists, not creating.',dir_out)); end;
found_trace_flag = 0; 
tmpchar_trace = sprintf('%s/out_trace.txt',dir_out);
if exist(tmpchar_trace,'file');
tmp_trace = textread(tmpchar_trace);
if length(tmp_trace)> 6; disp(sprintf(' %% found %s of length %d, not rerunning.',tmpchar_trace,length(tmp_trace))); found_trace_flag = 1; end;
if (force_create & length(tmp_trace)> 6); disp(sprintf(' %% found %s of length %d, actually, rerunning anyway.',tmpchar_trace,length(tmp_trace))); found_trace_flag = 0; end;
if length(tmp_trace)<=6; disp(sprintf(' %% found %s of length %d,     rerunning.',tmpchar_trace,length(tmp_trace))); found_trace_flag = 0; end;
end;%if exist(tmpchar_trace,'file');

if ~found_trace_flag

d_inpre = sprintf('%s/%s',dir__in,prefix); 
d_oupre = sprintf('%s/%s',dir_out,test_string);

ncols_A = size(M_n,2); ncols_Y=0; ncols_T=size(T_n,2);
nrows_A_ = zeros(nbins,1); nrows_Z_ = zeros(nbins,1);
for nb1=0:nbins-1;
nrows_A_(1+nb1) = length(A_n_rind{1+nb1}); nrows_Z_(1+nb1) = length(Z_n_rind{1+nb1});
end;%for nb1=0:nbins-1;


for nb1=0:nbins-1;
mr_M = zeros(size(M_n,1),1);
mr_A_tmp = mr_M; mr_A_tmp(A_n_rind{1+nb1})=1;
tmpchar = sprintf('%s_mr_A_%d.b16',d_oupre,nb1); tutorial_binary_compress(bitj,mr_A_tmp(:)>0,tmpchar);
mr_Z_tmp = mr_M; mr_Z_tmp(Z_n_rind{1+nb1})=1;
tmpchar = sprintf('%s_mr_Z_%d.b16',d_oupre,nb1); tutorial_binary_compress(bitj,mr_Z_tmp(:)>0,tmpchar);
end;%for nb1=0:nbins-1;

if (shuffle_num>0); % performing covariate-respecting shuffle ;
rng(shuffle_num); 
for nb1=0:nbins-1;
mr_M_tmp = zeros(size(M_n,1),1); mr_M_tmp(A_n_rind{1+nb1})=1; mr_M_tmp(Z_n_rind{1+nb1})=1;
disp(sum(mr_M_tmp));
mr_M__on = find(mr_M_tmp);
T_tmp = T_n(mr_M__on,:); nsec = 2^(ncols_T);
tbin_tmp = (T_tmp>0)*transpose(2.^[0:ncols_T-1]);
for ns=0:nsec-1; 
sec_rij_{1+ns} = find(tbin_tmp==ns);
mr_S_tmp_{1+ns} = zeros(size(M_n,1),1); mr_S_tmp_{1+ns}(mr_M__on(sec_rij_{1+ns}))=1;
end;%for ns=0:nsec-1; 
for ns=0:nsec-1;
lA_(1+ns) = length(intersect(A_n_rind{1+nb1},find(mr_S_tmp_{1+ns})));
lZ_(1+ns) = length(intersect(Z_n_rind{1+nb1},find(mr_S_tmp_{1+ns})));
prm_{1+ns} = randperm(length(sec_rij_{1+ns}));
prm_A_{1+ns} = sec_rij_{1+ns}(prm_{1+ns}(1:lA_(1+ns))); 
prm_Z_{1+ns} = sec_rij_{1+ns}(prm_{1+ns}(lA_(1+ns) + (1:lZ_(1+ns))));
end;%for ns=0:nsec-1;
mr_A_prm = mr_M; mr_Z_prm = mr_M;
for ns=0:nsec-1;
mr_A_prm(mr_M__on(prm_A_{1+ns}))=1; mr_Z_prm(mr_M__on(prm_Z_{1+ns}))=1;
end;%for ns=0:nsec-1;
disp_flag=1;
if disp_flag;
tmp_A_prm = find(mr_A_prm); tmp_Z_prm = find(mr_Z_prm);
for ns=0:nsec-1; 
lA_prm_(1+ns) = length(intersect(tmp_A_prm,find(mr_S_tmp_{1+ns}))); 
lZ_prm_(1+ns) = length(intersect(tmp_Z_prm,find(mr_S_tmp_{1+ns}))); 
end;%for ns=0:nsec-1;
disp(sprintf(' %% shuffle: nb1 %d',nb1));
disp([lA_ ; lA_prm_ ; lZ_ ; lZ_prm_]); 
disp(sprintf(' %% mr_A_prm %d/%d; mr_Z_prm %d/%d',sum(mr_A_prm),nrows_A_(1+nb1),sum(mr_Z_prm),nrows_Z_(1+nb1)));
end;% if disp_flag;
tmpchar = sprintf('%s_mr_A_%d.b16',d_oupre,nb1); tutorial_binary_compress(bitj,mr_A_prm(:)>0,tmpchar);
tmpchar = sprintf('%s_mr_Z_%d.b16',d_oupre,nb1); tutorial_binary_compress(bitj,mr_Z_prm(:)>0,tmpchar);
end;%for nb1=0:nbins-1;
end;% if (shuffle_num>0); % performing covariate-respecting shuffle ;

% write M_n ;
tmpchar = sprintf('%s_M_n.b16',d_inpre); 
if (force_create | ~exist(tmpchar,'file')); disp(sprintf(' %% creating %s',tmpchar)); tutorial_binary_compress(bitj,M_n>0,tmpchar); else; disp(sprintf(' %% file %s already exists, not creating.',tmpchar)); end;
tmpchar = sprintf('%s_M_t.b16',d_inpre); 
if (force_create | ~exist(tmpchar,'file')); disp(sprintf(' %% creating %s',tmpchar)); tutorial_binary_compress(bitj,transpose(M_n>0),tmpchar); else; disp(sprintf(' %% file %s already exists, not creating.',tmpchar)); end;
% write T_n ;
tmpchar = sprintf('%s_T_n.b16',d_inpre); 
if (force_create | ~exist(tmpchar,'file')); disp(sprintf(' %% creating %s',tmpchar)); tutorial_binary_compress(bitj,T_n>0,tmpchar); else; disp(sprintf(' %% file %s already exists, not creating.',tmpchar)); end;
tmpchar = sprintf('%s_T_t.b16',d_inpre); 
if (force_create | ~exist(tmpchar,'file')); disp(sprintf(' %% creating %s',tmpchar)); tutorial_binary_compress(bitj,transpose(T_n>0),tmpchar); else; disp(sprintf(' %% file %s already exists, not creating.',tmpchar)); end;

% write A_n_cind and T_n_cind ;
mc_A = zeros(ncols_A,1); mc_A(A_n_cind)=1;
tmpchar = sprintf('%s_mc_A.b16',d_oupre); tutorial_binary_compress(bitj,mc_A(:)>0,tmpchar);
mc_T = zeros(ncols_T,1); mc_T(T_n_cind)=1;
tmpchar = sprintf('%s_mc_T.b16',d_oupre); tutorial_binary_compress(bitj,mc_T(:)>0,tmpchar);

fname__in = sprintf('%s.in',d_oupre);
fp = fopen(fname__in,'w');
fprintf(fp,'GLOBAL_verbose= %d;\n',verbose_flag);
fprintf(fp,'GLOBAL_thread_count= 8;\n');
fprintf(fp,'GLOBAL_omp_type= 1;\n');
fprintf(fp,'GLOBAL_TEST_TYPE= %s;\n','lakcluster_driver');
fprintf(fp,'GLOBAL_QR_strategy= %s;\n',QR_strategy);
fprintf(fp,'GLOBAL_QC_strategy= %s;\n',QC_strategy);
fprintf(fp,'GLOBAL_NBINS= %d;\n',nbins);
fprintf(fp,'GLOBAL_B_MLT= %d;\n',B_MLT);
fprintf(fp,'GLOBAL_gamma= %0.4f;\n',gamma);
fprintf(fp,'GLOBAL_Ireq= %d;\n',Ireq);
fprintf(fp,'GLOBAL_A_n_name_= '); for nb=0:nbins-1; fprintf(fp,'%s_M_n.b16',d_inpre); if nb<nbins-1; fprintf(fp,','); else fprintf(fp,';'); end; end; fprintf(fp,'\n');
fprintf(fp,'GLOBAL_A_t_name_= '); for nb=0:nbins-1; fprintf(fp,'%s_M_t.b16',d_inpre); if nb<nbins-1; fprintf(fp,','); else fprintf(fp,';'); end; end; fprintf(fp,'\n');
%if (rev_flag==1); fprintf(fp,'GLOBAL_A_n_rows_= '); for nb=0:nbins-1; fprintf(fp,'%d',nrows_Z_(1+nb)); if nb<nbins-1; fprintf(fp,','); else fprintf(fp,';'); end; end; fprintf(fp,'\n'); end;
%if (rev_flag==0); fprintf(fp,'GLOBAL_A_n_rows_= '); for nb=0:nbins-1; fprintf(fp,'%d',nrows_A_(1+nb)); if nb<nbins-1; fprintf(fp,','); else fprintf(fp,';'); end; end; fprintf(fp,'\n'); end;
fprintf(fp,'GLOBAL_A_n_rows_= '); for nb=0:nbins-1; fprintf(fp,'%d',size(M_n,1)); if nb<nbins-1; fprintf(fp,','); else fprintf(fp,';'); end; end; fprintf(fp,'\n');
fprintf(fp,'GLOBAL_A_n_cols= %d;\n',ncols_A);
if (rev_flag==1); fprintf(fp,'GLOBAL_A_n_rind_= '); for nb=0:nbins-1; fprintf(fp,'%s_mr_Z_%d.b16',d_oupre,nb); if nb<nbins-1; fprintf(fp,','); else fprintf(fp,';'); end; end; fprintf(fp,'\n'); end;
if (rev_flag==0); fprintf(fp,'GLOBAL_A_n_rind_= '); for nb=0:nbins-1; fprintf(fp,'%s_mr_A_%d.b16',d_oupre,nb); if nb<nbins-1; fprintf(fp,','); else fprintf(fp,';'); end; end; fprintf(fp,'\n'); end;
fprintf(fp,'GLOBAL_A_n_cind= %s_mc_A.b16;\n',d_oupre);
fprintf(fp,'GLOBAL_Z_n_name_= '); for nb=0:nbins-1; fprintf(fp,'%s_M_n.b16',d_inpre); if nb<nbins-1; fprintf(fp,','); else fprintf(fp,';'); end; end; fprintf(fp,'\n');
fprintf(fp,'GLOBAL_Z_t_name_= '); for nb=0:nbins-1; fprintf(fp,'%s_M_t.b16',d_inpre); if nb<nbins-1; fprintf(fp,','); else fprintf(fp,';'); end; end; fprintf(fp,'\n');
%if (rev_flag==1); fprintf(fp,'GLOBAL_Z_n_rows_= '); for nb=0:nbins-1; fprintf(fp,'%d',nrows_A_(1+nb)); if nb<nbins-1; fprintf(fp,','); else fprintf(fp,';'); end; end; fprintf(fp,'\n'); end;
%if (rev_flag==0); fprintf(fp,'GLOBAL_Z_n_rows_= '); for nb=0:nbins-1; fprintf(fp,'%d',nrows_Z_(1+nb)); if nb<nbins-1; fprintf(fp,','); else fprintf(fp,';'); end; end; fprintf(fp,'\n'); end;
fprintf(fp,'GLOBAL_Z_n_rows_= '); for nb=0:nbins-1; fprintf(fp,'%d',size(M_n,1)); if nb<nbins-1; fprintf(fp,','); else fprintf(fp,';'); end; end; fprintf(fp,'\n');
if (rev_flag==1); fprintf(fp,'GLOBAL_Z_n_rind_= '); for nb=0:nbins-1; fprintf(fp,'%s_mr_A_%d.b16',d_oupre,nb); if nb<nbins-1; fprintf(fp,','); else fprintf(fp,';'); end; end; fprintf(fp,'\n'); end;
if (rev_flag==0); fprintf(fp,'GLOBAL_Z_n_rind_= '); for nb=0:nbins-1; fprintf(fp,'%s_mr_Z_%d.b16',d_oupre,nb); if nb<nbins-1; fprintf(fp,','); else fprintf(fp,';'); end; end; fprintf(fp,'\n'); end;
fprintf(fp,'GLOBAL_Y_n_cols= %d;\n',ncols_Y);
fprintf(fp,'GLOBAL_T_n_cols= %d;\n',ncols_T); 
fprintf(fp,'GLOBAL_T_n_name_= '); for nb=0:nbins-1; fprintf(fp,'%s_T_n.b16',d_inpre); if nb<nbins-1; fprintf(fp,','); else fprintf(fp,';'); end; end; fprintf(fp,'\n');
fprintf(fp,'GLOBAL_T_t_name_= '); for nb=0:nbins-1; fprintf(fp,'%s_T_t.b16',d_inpre); if nb<nbins-1; fprintf(fp,','); else fprintf(fp,';'); end; end; fprintf(fp,'\n');
fprintf(fp,'GLOBAL_T_n_cind= %s_mc_T.b16;\n',d_oupre);
fprintf(fp,'GLOBAL_S_n_name_= '); for nb=0:nbins-1; fprintf(fp,'%s_T_n.b16',d_inpre); if nb<nbins-1; fprintf(fp,','); else fprintf(fp,';'); end; end; fprintf(fp,'\n');
fprintf(fp,'GLOBAL_S_t_name_= '); for nb=0:nbins-1; fprintf(fp,'%s_T_t.b16',d_inpre); if nb<nbins-1; fprintf(fp,','); else fprintf(fp,';'); end; end; fprintf(fp,'\n');
fprintf(fp,'GLOBAL_DIR_NAME= %s;\n',dir_out);
fprintf(fp,'END= 0;\n');
fprintf(fp,'%% generated by lakcluster_uADZSZDA_dr_0.m on %s;\n',date);
fclose(fp);

call_flag=1*(walltime<=0);
if call_flag;
disp(sprintf('%s/lakcluster_ver18 < %s',dir_code,fname__in));
system(sprintf('%s/lakcluster_ver18 < %s',dir_code,fname__in));
end;%if call_flag;

pbs_flag=1*(walltime>0);
if pbs_flag;
fname_pbs = sprintf('%s.pbs',d_oupre);
if ~found_trace_flag;
fp = fopen(fname_pbs,'w');
fprintf(fp,'#PBS -S /bin/bash\n');
fprintf(fp,'#PBS -lnodes=1:ppn=15\n');
%fprintf(fp,'#PBS -lnodes=1:cpu2+cpu3\n');
fprintf(fp,'#PBS -lwalltime=%d:00:00\n',walltime * (~found_trace_flag));
fprintf(fp,'#PBS -e %s_pbs_error.log\n',d_oupre);
fprintf(fp,'#PBS -o %s_pbs_output.log\n',d_oupre);
if ~found_trace_flag;
fprintf(fp,'%s/lakcluster_ver18 < %s\n',dir_code,fname__in);
end;%if ~found_trace_flag;
fclose(fp);
type(fname_pbs);
system(sprintf('qsub %s;\n',fname_pbs));
end;%if ~found_trace_flag;
end;%if pbs_flag;

end;%if ~found_trace_flag;
