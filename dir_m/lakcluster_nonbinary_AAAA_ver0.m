function [out_xdrop_,trace_] = lakcluster_nonbinary_AAAA_ver0(A_n_0in_,gamma);
% lakcluster. ;
% Does not binarize. ;
%{
  % Test out corrections via: ;
      %%%%%%%%;
      n_r=8;n_c=9;
      e_r_n_ = ones(n_r,1);
      e_c_n_ = ones(n_c,1);
      A_n_ = randn(n_r,n_c);
      A_n_2_ = A_n_.^2;
      A_n_A_t_ = A_n_*transpose(A_n_);
      %%%%%%%%;
      QR_0_ = zeros(n_r,1);
      for nr1=1:n_r;
      for nr2=1:n_r;
      for nc1=1:n_c;
      for nc2=1:n_c;
      if ((nr1~=nr2) & (nc1~=nc2));
      QR_0_(nr1) = QR_0_(nr1) + A_n_(nr1,nc1)*A_n_(nr2,nc1)*A_n_(nr2,nc2)*A_n_(nr1,nc2);
      end;%if
      end;%for nc2=1:n_c;
      end;%for nc1=1:n_c;
      end;%for nr2=1:n_r;
      end;%for nr1=1:n_r;
      QR_1_ = zeros(n_r,1); for nr=1:n_r; QR_1_(nr) = dot(A_n_A_t_(nr,:),A_n_A_t_(nr,:)); end;%for nr=1:n_r;
      QR_1_ = QR_1_ - ( A_n_2_ * e_c_n_ ).^2 - ( (A_n_2_) * ( transpose(A_n_2_) * e_r_n_ ) ) + ( (A_n_2_.^2) * e_c_n_ ) ;
      disp(sprintf(' %% QR error: %0.16f',fnorm(QR_0_-QR_1_)));
      %%%%%%%%;
      QC_0_ = zeros(n_c,1);
      for nr1=1:n_r;
      for nr2=1:n_r;
      for nc1=1:n_c;
      for nc2=1:n_c;
      if ((nr1~=nr2) & (nc1~=nc2));
      QC_0_(nc1) = QC_0_(nc1) + A_n_(nr1,nc1)*A_n_(nr1,nc2)*A_n_(nr2,nc2)*A_n_(nr2,nc1);
      end;%if
      end;%for nc2=1:n_c;
      end;%for nc1=1:n_c;
      end;%for nr2=1:n_r;
      end;%for nr1=1:n_r;
      QC_1_ = zeros(n_c,1); for nc=1:n_c; QC_1_(nc) = transpose(A_n_(:,nc)) * A_n_A_t_ * A_n_(:,nc) ; end;%for nc=1:n_c;
      QC_1_ = QC_1_ - ( transpose(A_n_2_) * e_r_n_ ).^2 - ( transpose(A_n_2_) * ( (A_n_2_) * e_c_n_ ) ) + ( transpose(A_n_2_.^2) * e_r_n_ ) ;
      disp(sprintf(' %% QC error: %0.16f',fnorm(QC_0_-QC_1_)));
      %%%%%%%%;
      a_n_ = A_n_(1:n_r-2,1:n_c-3);
      b_n_ = A_n_(n_r-1:n_r,1:n_c-3);
      c_n_ = A_n_(1:n_r-2,n_c-2:n_c);
      d_n_ = A_n_(n_r-1:n_r,n_c-2:n_c);
      a_n_a_t_0_ = a_n_*transpose(a_n_);
      a_n_a_t_1_ = A_n_A_t_(1:n_r-2,1:n_c-3) - c_n_*transpose(c_n_);
      disp(sprintf(' %% A_n_A_t_ error: %0.16f',fnorm(a_n_a_t_0_-a_n_a_t_1_)));
      %%%%%%%%;
  %}

if nargin<1;
%%%%%%%%;
n_iteration = 128;
clf; hold on;
plot([0,1],[0,1],'k-');plot([0.5,0.5],[0,1],'k-');plot([0,1],[0.5,0.5],'k-');
grid on;xlim([0.35,1]);ylim([0.35,1]);axis square;xlabel('spectral');ylabel('lakcluster');
title('Auc for lakcluster vs spectral');
for niteration=1:n_iteration;
%rng(1);
%M=1780; N=1e4; gamma = 0.05;
M=178; N=1e3; gamma = 0.05;
X = 0.575; MX = ceil(M^X); NX = ceil(N^X);
A = randn(M,N); B=randn(MX,NX)+0.65*ones(MX,1)*(2*(rand(1,NX)>0.5) - 1); 
for nj=1:2; 
pf_{nj} = randperm(size(A,nj)); 
[~,pi_{nj}] = sort(pf_{nj}); [~,pi_{nj}] = sort(pi_{nj}); 
end;% for nj=1:2;
A(pf_{1}(1:MX),pf_{2}(1:NX)) = B;
%%%%%%%%;
% Binarize? ;
%%%%%%%%;
% A = 2*(A>0)-1;
%%%%%%%%;
tic; [tmp_U_,tmp_S_,tmp_V_] = svds(A,1); t_s_ = toc;
[~,tmp_U_ij_] = sort(abs(tmp_U_),'descend'); [~,tmp_V_ij_] = sort(abs(tmp_V_),'descend');
rkeep_s_ = tmp_U_ij_; ckeep_s_ = tmp_V_ij_;
[~,tmp_Bn_] = intersect(rkeep_s_,pi_{1}(1:size(B,1)),'stable'); [~,tmp_Bc_] = intersect(rkeep_s_,pi_{1}(size(B,1)+1:end),'stable'); Auc_s_(1) = auc_0(tmp_Bn_,tmp_Bc_);
[~,tmp_Bn_] = intersect(ckeep_s_,pi_{2}(1:size(B,2)),'stable'); [~,tmp_Bc_] = intersect(ckeep_s_,pi_{2}(size(B,2)+1:end),'stable'); Auc_s_(2) = auc_0(tmp_Bn_,tmp_Bc_);
Auc_s_avg = mean(Auc_s_); disp(sprintf(' %% spectral   t%4.2f [%0.2f %0.2f] --> %0.2f',t_s_,Auc_s_,Auc_s_avg));
%%%%%%%%;
tic; out_xdrop_m_ = lakcluster_nonbinary_AAAA_ver0(A,gamma); t_m_ = toc;
rdrop_m_ = out_xdrop_m_(:,1); rdrop_m_ = 1+rdrop_m_(find(rdrop_m_>-1)); 
cdrop_m_ = out_xdrop_m_(:,2); cdrop_m_ = 1+cdrop_m_(find(cdrop_m_>-1)); 
rkeep_m_ = rdrop_m_(end:-1:1); ckeep_m_ = cdrop_m_(end:-1:1);
[~,tmp_Bn_] = intersect(rkeep_m_,pi_{1}(1:size(B,1)),'stable'); [~,tmp_Bc_] = intersect(rkeep_m_,pi_{1}(size(B,1)+1:end),'stable'); Auc_m_(1) = auc_0(tmp_Bn_,tmp_Bc_);
[~,tmp_Bn_] = intersect(ckeep_m_,pi_{2}(1:size(B,2)),'stable'); [~,tmp_Bc_] = intersect(ckeep_m_,pi_{2}(size(B,2)+1:end),'stable'); Auc_m_(2) = auc_0(tmp_Bn_,tmp_Bc_);
Auc_m_avg = mean(Auc_m_); disp(sprintf(' %% lakcluster t%4.2f [%0.2f %0.2f] --> %0.2f',t_m_,Auc_m_,Auc_m_avg));
%%%%%%%%;
flag_plot=0;
if flag_plot;
colormap(colormap_beach());
subplot(1,3,1); imagesc(A(pi_{1},pi_{2}),[-1,1]); set(gca,'XTick',[],'Ytick',[]); title('A orig');
subplot(1,3,2); imagesc(A(rkeep_s_,ckeep_s_),[-1,1]); set(gca,'XTick',[],'Ytick',[]); title(sprintf('spectral A%0.2f',Auc_s_avg));
subplot(1,3,3); imagesc(A(rkeep_m_,ckeep_m_),[-1,1]); set(gca,'XTick',[],'Ytick',[]); title(sprintf('lakcluster A%0.2f',Auc_m_avg));
set(gcf,'Position',1+[0,0,1024,512]);
end;%if flag_plot;
%%%%%%%%;
plot(Auc_s_avg,Auc_m_avg,'ko'); 
drawnow();
end;%for niteration=1:n_iteration;
hold off; 
figbig;
print('-djpeg','./lakcluster_nonbinary_AAAA_ver0.jpg');
print('-depsc','./lakcluster_nonbinary_AAAA_ver0.eps');
disp('returning');return;
end;%if nargin<1;

if nargin<2; gamma = 0.0; end;
verbose=1;
[n_r,n_c] = size(A_n_0in_);

[rdrop_,cdrop_,lrij_,lcij_] = get_xdrop_(n_r,n_c,gamma);
r_ij_ = 1:n_r; c_ij_ = 1:n_c;
n_a = length(rdrop_);
A_n_ = A_n_0in_; %<-- copy will be destroyed. ;
A_n_2_ = A_n_.^2; %<-- copy will be destroyed. ;
A_n_A_t_ = A_n_*transpose(A_n_); %<-- copy will be destroyed. ;
e_r_n_ = ones(n_r,1); e_c_n_ = ones(n_c,1);
out_xdrop_ = zeros(n_r+n_c,2);
trace_ = zeros(n_a,6); %<-- [iteration , length(r_ij_) , length(c_ij_) , mean(QR_) , mean(QC_) , 1] ;
nx=0;
tic;
t_s = toc;
for na=1:n_a;
if (verbose);
if (mod(na,10)==0); 
t_a = toc; t_e = t_a*n_a/na; 
disp(sprintf(' %% na %d/%d, time %0.2fs, estimated %0.2fs (%0.2fh)',na,n_a,t_a,t_e,t_e/3600)); 
end;%if (mod(na,10)==0); 
end;%if (verbose);
QR_ = zeros(n_r,1); for nr=1:n_r; QR_(nr) = dot(A_n_A_t_(nr,:),A_n_A_t_(nr,:)); end;%for nr=1:n_r;
QR_ = QR_ - ( A_n_2_ * e_c_n_ ).^2 - ( (A_n_2_) * ( transpose(A_n_2_) * e_r_n_ ) ) + ( (A_n_2_.^2) * e_c_n_ ) ;
QC_ = zeros(n_c,1); for nc=1:n_c; QC_(nc) = transpose(A_n_(:,nc)) * A_n_A_t_ * A_n_(:,nc) ; end;%for nc=1:n_c;
QC_ = QC_ - ( transpose(A_n_2_) * e_r_n_ ).^2 - ( transpose(A_n_2_) * ( (A_n_2_) * e_c_n_ ) ) + ( transpose(A_n_2_.^2) * e_r_n_ ) ;
trace_(na,:) = [na , length(r_ij_) , length(c_ij_) , mean(QR_) , mean(QC_) , 1.0];
[~,tmp_r_ij_] = sort(QR_(r_ij_));
r_rmv_ = r_ij_(tmp_r_ij_(1:rdrop_(na)));
r_ret_ = r_ij_(tmp_r_ij_(rdrop_(na)+1:end));
[~,tmp_c_ij_] = sort(QC_(c_ij_));
c_rmv_ = c_ij_(tmp_c_ij_(1:cdrop_(na)));
c_ret_ = c_ij_(tmp_c_ij_(cdrop_(na)+1:end));
d_n_ = A_n_(r_rmv_,c_rmv_);
c_n_ = A_n_(r_ret_,c_rmv_);
b_n_ = A_n_(r_rmv_,c_ret_);
a_n_ = A_n_(r_ret_,c_ret_);
A_n_A_t_(r_rmv_,r_ret_) = 0; 
A_n_A_t_(r_ret_,r_rmv_) = 0;
A_n_A_t_(r_rmv_,r_rmv_) = 0;
A_n_A_t_(r_ret_,r_ret_) = A_n_A_t_(r_ret_,r_ret_) - ( c_n_ * transpose(c_n_) ) ; %<-- update correlation matrix. ;
A_n_2_(r_rmv_,:) = 0; %<-- first we remove rows. ;
A_n_2_(:,c_rmv_) = 0; %<-- then we remove columns. ;
A_n_(r_rmv_,:) = 0; %<-- first we remove rows. ;
A_n_(:,c_rmv_) = 0; %<-- then we remove columns. ;
r_ij_(tmp_r_ij_(1:rdrop_(na))) = [];
c_ij_(tmp_c_ij_(1:cdrop_(na))) = [];
out_xdrop_(nx + (1:rdrop_(na)),:) = [r_rmv_(:)-1 , -ones(rdrop_(na),1)]; nx = nx+rdrop_(na);
out_xdrop_(nx + (1:cdrop_(na)),:) = [-ones(cdrop_(na),1) , c_rmv_(:)-1]; nx = nx+cdrop_(na);
end;%for na=1:n_a;
