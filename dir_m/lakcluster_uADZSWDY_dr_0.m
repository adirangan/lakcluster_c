function lakcluster_uADZSWDY_dr_0(dir_code,dir_trunk,prefix,M_n_,rev_flag,A_n_rind_,A_n_cind,Z_n_rind_,Y_n_cind,T_n_,T_n_cind,gamma,B_MLT,Ireq,shuffle_num,walltime,verbose_flag,force_create_flag)
% using lakcluster_ver18 ; 
% test with: ;
%{
  lakcluster_uADZSWDY_dr_0();
  %}

if (nargin<1);
dir_code = '/data/rangan/dir_bcc/dir_code_122417';
dir_trunk = pwd;
prefix = 'test';
nrows_A = 1920*1; A_n_cols = 1920*2; Y_n_cols = 1920;
rng(1);
M_n_{1} = 2*(randn(nrows_A,A_n_cols+Y_n_cols)>0)-1; 
nrows_B = 128*1; ncols_B = 128*2;
B_n = 2*(tutorial_makelr(nrows_B,ncols_B,1,0.01)>0)-1;
p_r = randperm(nrows_A); [~,q_r] = sort(p_r); [~,q_r] = sort(p_r);
p_c = randperm(A_n_cols+Y_n_cols); [~,q_c] = sort(p_c); [~,q_c] = sort(p_c);
M_n_{1}(p_r(1:nrows_B),p_c(1:ncols_B)) = B_n;
rev_flag = 0;
T_n_{1} = ones(nrows_A,1);
A_n_rind_{1} = p_r(1:nrows_A/4);
Z_n_rind_{1} = p_r(nrows_A/4+1:nrows_A);
A_n_cind = p_c(1:A_n_cols);
Y_n_cind = p_c(A_n_cols + (1:Y_n_cols));
T_n_cind = 1;
gamma = 0.05;
B_MLT = 32;
Ireq = 1;
shuffle_num = 0;
walltime = 0;
verbose_flag = 0;
force_create_flag = 1;
lakcluster_uADZSWDY_dr_0(dir_code,dir_trunk,prefix,M_n_,rev_flag,A_n_rind_,A_n_cind,Z_n_rind_,Y_n_cind,T_n_,T_n_cind,gamma,B_MLT,Ireq,shuffle_num,walltime,verbose_flag,force_create_flag);
n_shuffles = 8;
for shuffle_num = 1:n_shuffles;
lakcluster_uADZSWDY_dr_0(dir_code,dir_trunk,prefix,M_n_,rev_flag,A_n_rind_,A_n_cind,Z_n_rind_,Y_n_cind,T_n_,T_n_cind,gamma,B_MLT,Ireq,shuffle_num,walltime,verbose_flag,force_create_flag);
end;%for shuffle_num = 1:n_shuffles;
disp_flag=1;
if disp_flag;
test_string = sprintf('%s_%s',prefix,lakcluster_uADZSWDY_xfix_gen_ver0(rev_flag,gamma,B_MLT,Ireq,0));
dir__in = sprintf('%s/dir_%s',dir_trunk,prefix);
dir_out = sprintf('%s/dir_%s',dir__in,test_string); 
disp(sprintf(' test_string: %s',test_string));
disp(sprintf(' dir__in: %s',dir__in));
disp(sprintf(' dir_out: %s',dir_out));
tmpchar = sprintf('%s/out_xdrop_a.txt',dir_out);
out_xdrop_a = textread(tmpchar);
rij = out_xdrop_a(:,1); rij = rij(find(rij>-1)); rij = rij(end:-1:1); 
cij = out_xdrop_a(:,2); cij = cij(find(cij>-1)); cij = cij(end:-1:1);
subplot(1,3,1); imagesc(M_n_{1}(A_n_rind_{1},p_c),[-1,1]); title('orig');
subplot(1,3,2); imagesc(M_n_{1}(1+rij,1+cij),[-1,1]); title('lak');
out_trace_ = cell(1+n_shuffles,1);
for shuffle_num = 0:n_shuffles;  
test_string = sprintf('%s_%s',prefix,lakcluster_uADZSWDY_xfix_gen_ver0(rev_flag,gamma,B_MLT,Ireq,shuffle_num));
dir__in = sprintf('%s/dir_%s',dir_trunk,prefix);
dir_out = sprintf('%s/dir_%s',dir__in,test_string); 
out_trace_{1+shuffle_num} = textread(sprintf('%s/out_trace.txt',dir_out));
end;%for shuffle_num = 0:n_shuffles;  
Z_R_ij = 4;
Z_C_ij = 5;
subplot(2,3,3); hold on;
for shuffle_num = 1:n_shuffles;
plot(out_trace_{1+shuffle_num}(:,Z_R_ij),'b-','LineWidth',1);
end;%for shuffle_num = 1:n_shuffles;
plot(out_trace_{1}(:,Z_R_ij),'r-','LineWidth',2);
hold off;
title('Z_R');
subplot(2,3,6); hold on;
for shuffle_num = 1:n_shuffles;
plot(out_trace_{1+shuffle_num}(:,Z_C_ij),'b-','LineWidth',1);
end;%for shuffle_num = 1:n_shuffles;
plot(out_trace_{1}(:,Z_C_ij),'r-','LineWidth',2);
hold off;
title('Z_C');  
end; %if disp_flag;  
disp('returning'); return;
end;%if (nargin<1);

na=1;
if (nargin<na); dir_code = pwd; end; na=na+1;
if (nargin<na); dir_trunk = pwd; end; na=na+1;
if (nargin<na); prefix = 'test'; end; na=na+1;
if (nargin<na); M_n_{1} = randn(1024); end; na=na+1;
if (nargin<na); rev_flag = 0; end; na=na+1;
if (nargin<na); A_n_rind_ = {1:512}; end; na=na+1;
if (nargin<na); A_n_cind = 1:256; end; na=na+1;
if (nargin<na); Z_n_rind_ = {1:512}; end; na=na+1;
if (nargin<na); Y_n_cind = 257:512; end; na=na+1;
if (nargin<na); T_n_{1} = ones(1024,1); end; na=na+1;
if (nargin<na); T_n_cind = 1; end; na=na+1;
if (nargin<na); gamma = 0; end; na=na+1;
if (nargin<na); B_MLT = 32; end; na=na+1;
if (nargin<na); Ireq = 1; end; na=na+1;
if (nargin<na); shuffle_num = 0; end; na=na+1;
if (nargin<na); walltime = 0; end; na=na+1;
if (nargin<na); verbose_flag = 0; end; na=na+1;
if (nargin<na); force_create_flag = 1; end; na=na+1;

nbins=length(M_n_);
[M_n_cols,A_n_cols,Y_n_cols,T_n_cols,~,~] = lakcluster_uADZSWDY_check_0(shuffle_num,M_n_,A_n_rind_,A_n_cind,Z_n_rind_,Y_n_cind,T_n_,T_n_cind);

QR_strategy = 'YnWt';
QC_strategy = 'YnWt store one';
%QC_strategy = 'ZtSWn';
bitj = 16;

test_string = sprintf('%s_%s',prefix,lakcluster_uADZSWDY_xfix_gen_ver0(rev_flag,gamma,B_MLT,Ireq,shuffle_num));
dir__in = sprintf('%s/dir_%s',dir_trunk,prefix);
dir_out = sprintf('%s/dir_%s',dir__in,test_string); 
disp(sprintf(' test_string: %s',test_string));
disp(sprintf(' dir__in: %s',dir__in));
disp(sprintf(' dir_out: %s',dir_out));
if ~exist(dir_out,'dir'); disp(sprintf(' %% creating %s',dir_out)); mkdir(dir_out); 
 else disp(sprintf(' %% directory %s already exists, not creating.',dir_out)); end;
found_trace_flag = 0; 
tmpchar_trace = sprintf('%s/out_trace.txt',dir_out);
if exist(tmpchar_trace,'file');
tmp_trace = textread(tmpchar_trace);
if length(tmp_trace)> 6; disp(sprintf(' %% found %s of length %d, not rerunning.',tmpchar_trace,length(tmp_trace))); found_trace_flag = 1; end;
if (force_create_flag & length(tmp_trace)> 6); disp(sprintf(' %% found %s of length %d, actually, rerunning anyway.',tmpchar_trace,length(tmp_trace))); found_trace_flag = 0; end;
if length(tmp_trace)<=6; disp(sprintf(' %% found %s of length %d,     rerunning.',tmpchar_trace,length(tmp_trace))); found_trace_flag = 0; end;
end;%if exist(tmpchar_trace,'file');

if ~found_trace_flag;

d_inpre = sprintf('%s/%s',dir__in,prefix); 
d_oupre = sprintf('%s/%s',dir_out,test_string);

for nb1=0:nbins-1;
mr_M = zeros(size(M_n_{1+nb1},1),1);
mr_A_ori_{1+nb1} = mr_M; mr_A_ori_{1+nb1}(A_n_rind_{1+nb1})=1;
tmpchar = sprintf('%s_mr_A_%d.b16',d_oupre,0+nb1); 
if (force_create_flag | ~exist(tmpchar,'file'));
disp(sprintf(' %% creating %s of size %d-x-%d',tmpchar,length(mr_A_ori_{1+nb1}),1)); 
tutorial_binary_compress(bitj,mr_A_ori_{1+nb1}(:)>0,tmpchar);
end;% if exist;
mr_Z_ori_{1+nb1} = mr_M; mr_Z_ori_{1+nb1}(Z_n_rind_{1+nb1})=1;
tmpchar = sprintf('%s_mr_Z_%d.b16',d_oupre,0+nb1); 
if (force_create_flag | ~exist(tmpchar,'file'));
disp(sprintf(' %% creating %s of size %d-x-%d',tmpchar,length(mr_Z_ori_{1+nb1}),1)); 
tutorial_binary_compress(bitj,mr_Z_ori_{1+nb1}(:)>0,tmpchar);
end;% if exist;
end;%for nb1=0:nbins-1;

% write A_n_cind and Y_n_cind and T_n_cind ;
mc_A = zeros(M_n_cols,1); mc_A(A_n_cind)=1;
tmpchar = sprintf('%s_mc_A.b16',d_oupre); 
disp(sprintf(' %% creating %s of size %d-x-%d',tmpchar,length(mc_A),1)); 
tutorial_binary_compress(bitj,mc_A(:)>0,tmpchar);
mc_Y = zeros(M_n_cols,1); mc_Y(Y_n_cind)=1;
tmpchar = sprintf('%s_mc_Y.b16',d_oupre); 
disp(sprintf(' %% creating %s of size %d-x-%d',tmpchar,length(mc_Y),1)); 
tutorial_binary_compress(bitj,mc_Y(:)>0,tmpchar);
mc_T = zeros(T_n_cols,1); mc_T(T_n_cind)=1;
tmpchar = sprintf('%s_mc_T.b16',d_oupre); 
disp(sprintf(' %% creating %s of size %d-x-%d',tmpchar,length(mc_T),1)); 
tutorial_binary_compress(bitj,mc_T(:)>0,tmpchar);

if (shuffle_num>0); % performing covariate-respecting shuffle ;
%disp(sprintf(' %% Note: We are only shuffling across rows; we preserve case-control status across columns'));
%[mr_A_prm_,mr_Z_prm_] = lakcluster_uADZSZDA_shuffle_1(shuffle_num,M_n_,A_n_rind_,A_n_cind,Z_n_rind_,T_n_,T_n_cind);
[mr_A_prm_,mr_Z_prm_,mc_A_prm,mc_Y_prm] = lakcluster_uADZSWDY_shuffle_0(shuffle_num,M_n_,A_n_rind_,A_n_cind,Z_n_rind_,Y_n_cind,T_n_,T_n_cind);
tmpchar = sprintf('%s_mc_A.b16',d_oupre); tutorial_binary_compress(bitj,mc_A_prm(:)>0,tmpchar);
tmpchar = sprintf('%s_mc_Y.b16',d_oupre); tutorial_binary_compress(bitj,mc_Y_prm(:)>0,tmpchar);
for nb1=0:nbins-1;
tmpchar = sprintf('%s_mr_A_%d.b16',d_oupre,0+nb1); tutorial_binary_compress(bitj,mr_A_prm_{1+nb1}(:)>0,tmpchar);
tmpchar = sprintf('%s_mr_Z_%d.b16',d_oupre,0+nb1); tutorial_binary_compress(bitj,mr_Z_prm_{1+nb1}(:)>0,tmpchar);
end;%for nb1=0:nbins-1;
end;% if (shuffle_num>0); % performing covariate-respecting shuffle ;

% write M_n_ ;
for nb1=0:nbins-1;
tmpchar = sprintf('%s_M_%d_n.b16',d_inpre,0+nb1); 
if (force_create_flag | ~exist(tmpchar,'file')); disp(sprintf(' %% creating %s of length %d-x-%d',tmpchar,size(M_n_{1+nb1}))); tutorial_binary_compress(bitj,M_n_{1+nb1}>0,tmpchar); else; disp(sprintf(' %% file %s already exists, not creating.',tmpchar)); end;
tmpchar = sprintf('%s_M_%d_t.b16',d_inpre,0+nb1); 
if (force_create_flag | ~exist(tmpchar,'file')); disp(sprintf(' %% creating %s of size %d-x-%d',tmpchar,size(transpose(M_n_{1+nb1})))); tutorial_binary_compress(bitj,transpose(M_n_{1+nb1}>0),tmpchar); else; disp(sprintf(' %% file %s already exists, not creating.',tmpchar)); end;
% write T_n_ ;
tmpchar = sprintf('%s_T_%d_n.b16',d_inpre,0+nb1); 
if (force_create_flag | ~exist(tmpchar,'file')); disp(sprintf(' %% creating %s of size %d-x-%d',tmpchar,size(T_n_{1+nb1}))); tutorial_binary_compress(bitj,T_n_{1+nb1}>0,tmpchar); else; disp(sprintf(' %% file %s already exists, not creating.',tmpchar)); end;
tmpchar = sprintf('%s_T_%d_t.b16',d_inpre,0+nb1); 
if (force_create_flag | ~exist(tmpchar,'file')); disp(sprintf(' %% creating %s of size %d-x-%d',tmpchar,size(transpose(T_n_{1+nb1})))); tutorial_binary_compress(bitj,transpose(T_n_{1+nb1}>0),tmpchar); else; disp(sprintf(' %% file %s already exists, not creating.',tmpchar)); end;
end;%for nb1=0:nbins-1;


fname__in = sprintf('%s.in',d_oupre);
fp = fopen(fname__in,'w');
fprintf(fp,'GLOBAL_verbose= %d;\n',verbose_flag);
fprintf(fp,'GLOBAL_thread_count= 8;\n');
fprintf(fp,'GLOBAL_omp_type= 1;\n');
fprintf(fp,'GLOBAL_TEST_TYPE= %s;\n','lakcluster_driver');
fprintf(fp,'GLOBAL_QR_strategy= %s;\n',QR_strategy);
fprintf(fp,'GLOBAL_QC_strategy= %s;\n',QC_strategy);
fprintf(fp,'GLOBAL_NBINS= %d;\n',nbins);
fprintf(fp,'GLOBAL_B_MLT= %d;\n',B_MLT);
fprintf(fp,'GLOBAL_gamma= %0.4f;\n',gamma);
fprintf(fp,'GLOBAL_Ireq= %d;\n',Ireq);
fprintf(fp,'GLOBAL_A_n_name_= '); for nb1=0:nbins-1; fprintf(fp,'%s_M_%d_n.b16',d_inpre,0+nb1); if nb1<nbins-1; fprintf(fp,','); else fprintf(fp,';'); end; end; fprintf(fp,'\n');
fprintf(fp,'GLOBAL_A_t_name_= '); for nb1=0:nbins-1; fprintf(fp,'%s_M_%d_t.b16',d_inpre,0+nb1); if nb1<nbins-1; fprintf(fp,','); else fprintf(fp,';'); end; end; fprintf(fp,'\n');
fprintf(fp,'GLOBAL_A_n_rows_= '); for nb1=0:nbins-1; fprintf(fp,'%d',size(M_n_{1+nb1},1)); if nb1<nbins-1; fprintf(fp,','); else fprintf(fp,';'); end; end; fprintf(fp,'\n');
fprintf(fp,'GLOBAL_A_n_cols= %d;\n',M_n_cols);
if (rev_flag==1); fprintf(fp,'GLOBAL_A_n_rind_= '); for nb1=0:nbins-1; fprintf(fp,'%s_mr_Z_%d.b16',d_oupre,0+nb1); if nb1<nbins-1; fprintf(fp,','); else fprintf(fp,';'); end; end; fprintf(fp,'\n'); end;
if (rev_flag==0); fprintf(fp,'GLOBAL_A_n_rind_= '); for nb1=0:nbins-1; fprintf(fp,'%s_mr_A_%d.b16',d_oupre,0+nb1); if nb1<nbins-1; fprintf(fp,','); else fprintf(fp,';'); end; end; fprintf(fp,'\n'); end;
fprintf(fp,'GLOBAL_A_n_cind= %s_mc_A.b16;\n',d_oupre);
fprintf(fp,'GLOBAL_Z_n_name_= '); for nb1=0:nbins-1; fprintf(fp,'%s_M_%d_n.b16',d_inpre,0+nb1); if nb1<nbins-1; fprintf(fp,','); else fprintf(fp,';'); end; end; fprintf(fp,'\n');
fprintf(fp,'GLOBAL_Z_t_name_= '); for nb1=0:nbins-1; fprintf(fp,'%s_M_%d_t.b16',d_inpre,0+nb1); if nb1<nbins-1; fprintf(fp,','); else fprintf(fp,';'); end; end; fprintf(fp,'\n');
fprintf(fp,'GLOBAL_Z_n_rows_= '); for nb1=0:nbins-1; fprintf(fp,'%d',size(M_n_{1+nb1},1)); if nb1<nbins-1; fprintf(fp,','); else fprintf(fp,';'); end; end; fprintf(fp,'\n');
if (rev_flag==1); fprintf(fp,'GLOBAL_Z_n_rind_= '); for nb1=0:nbins-1; fprintf(fp,'%s_mr_A_%d.b16',d_oupre,0+nb1); if nb1<nbins-1; fprintf(fp,','); else fprintf(fp,';'); end; end; fprintf(fp,'\n'); end;
if (rev_flag==0); fprintf(fp,'GLOBAL_Z_n_rind_= '); for nb1=0:nbins-1; fprintf(fp,'%s_mr_Z_%d.b16',d_oupre,0+nb1); if nb1<nbins-1; fprintf(fp,','); else fprintf(fp,';'); end; end; fprintf(fp,'\n'); end;
fprintf(fp,'GLOBAL_Y_n_name_= '); for nb1=0:nbins-1; fprintf(fp,'%s_M_%d_n.b16',d_inpre,0+nb1); if nb1<nbins-1; fprintf(fp,','); else fprintf(fp,';'); end; end; fprintf(fp,'\n');
fprintf(fp,'GLOBAL_Y_t_name_= '); for nb1=0:nbins-1; fprintf(fp,'%s_M_%d_t.b16',d_inpre,0+nb1); if nb1<nbins-1; fprintf(fp,','); else fprintf(fp,';'); end; end; fprintf(fp,'\n');
fprintf(fp,'GLOBAL_Y_n_cols= %d;\n',M_n_cols);
fprintf(fp,'GLOBAL_Y_n_cind= %s_mc_Y.b16;\n',d_oupre);
fprintf(fp,'GLOBAL_W_n_name_= '); for nb1=0:nbins-1; fprintf(fp,'%s_M_%d_n.b16',d_inpre,0+nb1); if nb1<nbins-1; fprintf(fp,','); else fprintf(fp,';'); end; end; fprintf(fp,'\n');
fprintf(fp,'GLOBAL_W_t_name_= '); for nb1=0:nbins-1; fprintf(fp,'%s_M_%d_t.b16',d_inpre,0+nb1); if nb1<nbins-1; fprintf(fp,','); else fprintf(fp,';'); end; end; fprintf(fp,'\n');
fprintf(fp,'GLOBAL_T_n_cols= %d;\n',T_n_cols); 
fprintf(fp,'GLOBAL_T_n_name_= '); for nb1=0:nbins-1; fprintf(fp,'%s_T_%d_n.b16',d_inpre,0+nb1); if nb1<nbins-1; fprintf(fp,','); else fprintf(fp,';'); end; end; fprintf(fp,'\n');
fprintf(fp,'GLOBAL_T_t_name_= '); for nb1=0:nbins-1; fprintf(fp,'%s_T_%d_t.b16',d_inpre,0+nb1); if nb1<nbins-1; fprintf(fp,','); else fprintf(fp,';'); end; end; fprintf(fp,'\n');
fprintf(fp,'GLOBAL_T_n_cind= %s_mc_T.b16;\n',d_oupre);
fprintf(fp,'GLOBAL_S_n_name_= '); for nb1=0:nbins-1; fprintf(fp,'%s_T_%d_n.b16',d_inpre,0+nb1); if nb1<nbins-1; fprintf(fp,','); else fprintf(fp,';'); end; end; fprintf(fp,'\n');
fprintf(fp,'GLOBAL_S_t_name_= '); for nb1=0:nbins-1; fprintf(fp,'%s_T_%d_t.b16',d_inpre,0+nb1); if nb1<nbins-1; fprintf(fp,','); else fprintf(fp,';'); end; end; fprintf(fp,'\n');
fprintf(fp,'GLOBAL_DIR_NAME= %s;\n',dir_out);
fprintf(fp,'END= 0;\n');
fprintf(fp,'%% generated by lakcluster_uADZSWDY_dr_0.m on %s;\n',date);
fclose(fp);

call_flag=1*(walltime<=0);
if call_flag;
disp(sprintf('%s/lakcluster_ver18 < %s',dir_code,fname__in));
system(sprintf('%s/lakcluster_ver18 < %s',dir_code,fname__in));
end;%if call_flag;

pbs_flag=1*(walltime>0);
if pbs_flag;
fname_pbs = sprintf('%s.pbs',d_oupre);
if ~found_trace_flag;
fp = fopen(fname_pbs,'w');
fprintf(fp,'#PBS -S /bin/bash\n');
fprintf(fp,'#PBS -lnodes=1:ppn=15\n');
%fprintf(fp,'#PBS -lnodes=1:cpu2+cpu3\n');
fprintf(fp,'#PBS -lwalltime=%d:00:00\n',walltime * (~found_trace_flag));
fprintf(fp,'#PBS -e %s_pbs_error.log\n',d_oupre);
fprintf(fp,'#PBS -o %s_pbs_output.log\n',d_oupre);
if ~found_trace_flag;
fprintf(fp,'%s/lakcluster_ver18 < %s\n',dir_code,fname__in);
end;%if ~found_trace_flag;
fclose(fp);
type(fname_pbs);
system(sprintf('qsub %s;\n',fname_pbs));
end;%if ~found_trace_flag;
end;%if pbs_flag;

end;%if ~found_trace_flag;
