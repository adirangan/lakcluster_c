function [cauc_avg_,cauc_min_] = p_cauc_sparse_0(y_ctrl,y_case,s_ctrl,s_case,p_sparse,n_trial);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
% ;
% function [cauc_avg_,cauc_min_] = p_cauc_sparse_0(y_ctrl,y_case,s_ctrl,s_case,p_sparse,n_trial);
% ;
% This function returns the result of n_trial random trials for cauc_0. ;
% This assumes a sparsity coefficient of p_sparse. ;
% ;
% Input: ;
% ; 
% y_ctrl: double array of size n_ctrl-x-n_covariates. Continuous-Covariates for ctrl-patients (dimension n_covariates). ;
% y_case: double array of size n_case-x-n_covariates. Continuous-Covariates for case-patients (dimension n_covariates). ;
% s_ctrl: integer array of length n_ctrl. Categorical-Covariates for ctrl-patients (e.g., study number). ;
% s_case: integer array of length n_case. Categorical-Covariates for case-patients (e.g., study number). ;
% p_sparse: real number between 0 and 1. sparsity of v_case and v_ctrl (i.e., fraction equal to 1). ;
% n_trial: integer. Number of random-trials. (default 1024). ;
% ;
% Output: ;
% ;
% cauc_avg_: double array. holds samples of average cauc across covariate categories. ;
% cauc_min_: double array. holds samples of minimum cauc across covariate categories. ;
% ;
% Note: we fold all cauc values to lie within 0.5 and 1.0. ;
% ;
% test by running with no arguments: ;
% i.e., >> p_cauc_0();
% ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;

ni=3;
if (nargin<ni); s_ctrl = ones(size(y_ctrl,1)); end; ni=ni+1;
if (nargin<ni); s_case = ones(size(y_case,1)); end; ni=ni+1;
if (nargin<ni); p_sparse = 0.5; end; ni=ni+1;
if (nargin<ni); n_trial = 1024; end; ni=ni+1;

n_ctrl = size(y_ctrl,1); n_case = size(y_case,1);
cauc_avg_ = zeros(n_trial,1);
cauc_min_ = ones(n_trial,1);

cat_case = unique(s_case); cat_ctrl = unique(s_ctrl);
if     (length(cat_case)==1 & length(cat_ctrl)==1); cat_ij = cat_case;
elseif (length(cat_case)> 1 & length(cat_ctrl)==1); cat_ij = cat_case;
elseif (length(cat_case)==1 & length(cat_ctrl)> 1); cat_ij = cat_ctrl;
elseif (length(cat_case)> 1 & length(cat_ctrl)> 1); cat_ij = union(cat_case,cat_ctrl);
end;% if;
cat_ij = reshape(cat_ij,1,length(cat_ij));
cauc_ = zeros(n_trial,length(cat_ij));
ns_T = 0; ntot_T = 0; 
for ns=cat_ij;
%disp(sprintf('ns %d',ns));
dij = find(s_case==ns); if isempty(dij); dij = 1:length(v_case); end;
xij = find(s_ctrl==ns); if isempty(xij); xij = 1:length(v_ctrl); end;
if (length(dij)>0 & length(xij)>0);
ns_T = ns_T+1;
ncase_(ns_T) = length(dij);
nctrl_(ns_T) = length(xij);
ntot_(ns_T) = length(dij)+length(xij);
ntot_T = ntot_T + ntot_(ns_T);
if (~isempty(y_case) & ~isempty(y_ctrl)); 
cauc_(1:n_trial,ns_T) = p_cauc_sparse_sub_0(y_ctrl(xij,:),y_case(dij,:),p_sparse,n_trial); 
end;%if (~isempty(y_case) & ~isempty(y_ctrl)); 
if (isempty(y_case) | isempty(y_ctrl)); 
cauc_(1:n_trial,ns_T) = p_cauc_sparse_sub_0(zeros(length(xij),1),zeros(length(dij),1),p_sparse,n_trial);
end;%if (isempty(y_case) | isempty(y_ctrl)); 
cauc_avg_ = cauc_avg_ + ntot_(ns_T)*cauc_(:,ns_T);
flag_min = abs(cauc_(:,ns_T)-0.5)<abs(cauc_min_-0.5);
cauc_min_ = flag_min.*cauc_(:,ns_T) + (~flag_min).*cauc_min_;
end;%if (length(dij)>0 & length(xij)>0);
end;%for ns=cat_min:cat_max;
cauc_avg_ = cauc_avg_/ntot_T;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;

function [cauc_] = p_cauc_sparse_sub_0(y_ctrl,y_case,p_sparse,n_trial);
% samples multiple AUCs, corrected for covariates y;
% ;
% The inputs are: ;
% y_case: the y-values for the cases -- of size ND-x-NY;
% y_ctrl: the y-values for the ctrls -- of size NX-x-NY;
% p_sparse: sparsity of v_case and v_ctrl (i.e., fraction equal to 1). ;
% n_trial: number of trials. ;
%
% The outputs are: ;
% cauc_: The array of auc values, corrected for y ; 

%%%%%%%%;
ND = size(y_case,1);NX = size(y_ctrl,1);
%%%%%%%%;
if (size(y_case,2)==0);
cauc_ = zeros(n_trial,1);
tmp_e = zeros(ND + NX,1);
tmp_e(1:round((ND+NX)*p_sparse)) = 1;
for ntrial=1:n_trial;
tmp_p = randperm(ND+NX);
v_case = tmp_e(tmp_p(1:ND)); v_ctrl = tmp_e(tmp_p(ND + (1:NX)));
cauc = auc_0(v_ctrl,v_case); cauc_(ntrial) = cauc;
end;%for ntrial=1:n_trial;
end;%if (size(y_case,2)==0);
%%%%%%%%;
if (size(y_case,2)>0);
W_X = knnsearch(y_ctrl,y_case);W_D = knnsearch(y_case,y_ctrl);
cauc_ = zeros(n_trial,1);
tmp_e = zeros(ND + NX,1);
tmp_e(1:round((ND+NX)*p_sparse)) = 1;
for ntrial=1:n_trial;
tmp_p = randperm(ND+NX);
v_case = tmp_e(tmp_p(1:ND)); v_ctrl = tmp_e(tmp_p(ND + (1:NX)));
case_contrib = 1.0*(v_case>v_ctrl(W_X)) + 0.5*(v_case==v_ctrl(W_X));
ctrl_contrib = 1.0*(v_case(W_D)>v_ctrl) + 0.5*(v_case(W_D)==v_ctrl);
cauc = (sum(case_contrib)+sum(ctrl_contrib))/(ND+NX);
cauc_(ntrial) = cauc;
end;%for ntrial=1:n_trial;
end;%if (size(y_case,2)>0);
%%%%%%%%;
