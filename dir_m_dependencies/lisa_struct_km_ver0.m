function lisa = lisa_struct_km_ver0(lisa,annot,ontology);

%%%%%%%%;
cu_ = lisa.cdrop_a_;
niter_ = lisa.niter_;
c_rem_ = lisa.c_rem_;
so_ = lisa.so_;
su_ = lisa.su_;
so_to_su_ = lisa.so_to_su_;
su_to_so_ = lisa.su_to_so_;
so_by_su_xref_ = lisa.so_by_su_xref_;
tu_ = lisa.tu_;
su_to_tu_ = lisa.su_to_tu_;
ru_to_tu_ = lisa.ru_to_tu_;
tu_by_ru_xref_ = lisa.tu_by_ru_xref_;
cu_to_cu__ = lisa.cu_to_cu__;
cu_to_cu_mc_ = lisa.cu_to_cu_mc_;
cu_mc_ = lisa.cu_mc_;
cu_by_eu_xref__ = lisa.cu_by_eu_xref__;
n_percentile = lisa.n_percentile;
percentile_ = lisa.percentile_;
cu_by_eu_xref_XX__ = lisa.cu_by_eu_xref_XX__;
cu_to_po_XX__ = lisa.cu_to_po_XX__;
po_XX_cu_mc__ = lisa.po_XX_cu_mc__;
po_XX_size__ = lisa.po_XX_size__;
%%%%%%%%;
n_ru = annot.n_ru;
ln_ = annot.ln_;
ru_ = annot.ru_;
eo__ = annot.eo__;
eu_max = annot.eu_max;
eo_ = annot.eo_;
ru_to_eo_ = annot.ru_to_eo_;
eu_ = annot.eu_;
eo_to_eu_ = annot.eo_to_eu_;
eu_to_eo_ = annot.eu_to_eo_;
ru_by_eu_xref_ = annot.ru_by_eu_xref_;
%%%%%%%%;
n_pathway = ontology.n_pathway;
pathway_name_ = ontology.pathway_name_;
pathway_size_ = ontology.pathway_size_;
po__ = ontology.po__;
po_ = ontology.po_;
pu_ = ontology.pu_;
po_to_pu_ = ontology.po_to_pu_;
pu_to_po_ = ontology.pu_to_po_;
qu_ = ontology.qu_;
eu_to_qu_ = ontology.eu_to_qu_;
pu_to_qu_ = ontology.pu_to_qu_;
eu_to_qu_xref_ = ontology.eu_to_qu_xref_;
pu_to_qu_xref_ = ontology.pu_to_qu_xref_;

%%%%%%%%;
% Now calculate enrichment for all pathways. ;
% This uses a simple gaussian approximation. ;
%%%%%%%%;
flag_plot=0;
% Below, k_XX__{npathway,npercentile}(nc) lists the length of the intersection between ;
% iteration nc (from lisa.cdrop_a_) and the pathway pathway_name_{npathway}, ;
% where the snp-threshold for each EZid is determined using the snp-index associated with the lisa.percentile_(npercentile) percentile. ;
% The values of K, M, N, m and n are similar. ;
% K is the total size of the pathway (constant across iteration and percentile). ;
% N is the total size of the sample (i.e., number of snps retained at the current iteration, which is constant across percentile and pathway). ;
% M = N-K. ;
% n is the length of the current sample (constant across pathway and iteration). ;
% m = n-k. ;
k_XX__ = cell(n_pathway,n_percentile); % <-- length of intersection between current iteration and pathway. ;
K_XX__ = zeros(n_pathway,n_percentile); % <-- total size of pathway. ; 
M_XX__ = zeros(n_pathway,n_percentile); % <-- N-K. ;
m_XX__ = cell(n_pathway,n_percentile); % <-- n-k. ;
z_XX__ = cell(n_pathway,n_percentile); % <-- simple z-score associated with representation: assumes mean is n*P, and std is sqrt(n*P*(1-P)), where P = K/N . ;
log_pval_up_XX__ = cell(n_pathway,n_percentile); % <-- upper integral; this is the log(p-value) associated with pathways that are over-represented . ;
log_pval_dn_XX__ = cell(n_pathway,n_percentile); % <-- lower integral; this is the log(p-value) associated with pathways that are under-represented . ;
for npercentile=1:n_percentile;
%%%%%%%%%%%%%%%%;
if flag_plot; 
subplot(2,n_percentile,npercentile + 0*n_percentile); hold on; stairs(niter_,log(0.05)*ones(size(niter_)),'k:'); stairs(niter_,log(0.001)*ones(size(niter_)),'k:'); hold off;
subplot(2,n_percentile,npercentile + 1*n_percentile); hold on; stairs(niter_,log(0.05)*ones(size(niter_)),'k:'); stairs(niter_,log(0.001)*ones(size(niter_)),'k:'); hold off;
end;%if flag_plot; hold on;
tmp_N = sum(po_XX_cu_mc__{npercentile}); 
[po_XX_size_uni_,po_XX_size_to_po_XX_size_uni_,po_XX_size_uni_to_po_XX_size_] = unique(po_XX_size__(:,npercentile));
po_XX_size_by_po_XX_size_uni_xref_ = sparse(1:length(po_XX_size__(:,npercentile)),po_XX_size_uni_to_po_XX_size_,1,length(po_XX_size__(:,npercentile)),length(po_XX_size_uni_));
for nl=length(po_XX_size_uni_):-1:1;%for nl=1:length(po_XX_size_uni_);
po_XX_size = po_XX_size_uni_(nl);
tmp_pij_ = find(sum(po_XX_size_by_po_XX_size_uni_xref_(:,nl),2));
disp(sprintf(' %% nl %d/%d: po_XX_size %d, found %d',nl,length(po_XX_size_uni_),po_XX_size,length(tmp_pij_)));
tmp_K = po_XX_size;
tmp_M = tmp_N-tmp_K; 
tmp_n_ = cumsum(po_XX_cu_mc__{npercentile},'reverse');
range_KM_ = [ [tmp_K/2] + tmp_K/2*1.00*[-1,+1] , [tmp_M/2] + tmp_M/2*1.00*[-1,+1] ]; %range_KM_ = [0,tmp_K,0,tmp_M];
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
for nl2=1:length(tmp_pij_);
assert(po_XX_size__(tmp_pij_(nl2),npercentile)==po_XX_size);
npathway = tmp_pij_(nl2);
%%%%%%%%%%%%%%%%;
disp(sprintf(' %% %% %% npathway %d name %s original size %d snp_cdrop size %d',npathway,pathway_name_{npathway},length(po__{npathway}),full(sum(cu_to_po_XX__{npathway,npercentile}))));
tmp_k_mc_ = cu_to_po_XX__{npathway,npercentile};
tmp_k_ = cumsum(full(tmp_k_mc_),'reverse'); assert(min(tmp_k_)>=0 & max(tmp_k_)<=tmp_K);
tmp_m_ = full(tmp_n_ - tmp_k_); assert(min(tmp_m_)>=0 & max(tmp_m_)<=tmp_M);
tmp_pk_ = tmp_k_/max(1,tmp_K); tmp_qk_ = 1 - tmp_pk_;
tmp_pm_ = tmp_m_/max(1,tmp_M); tmp_qm_ = 1 - tmp_pm_; 
%%%%%%%%;
c_ij_ = length(cu_) - c_rem_ + 1;
log_pval_up_XX_ = log(0.5)*ones(length(c_rem_),1); tmp_ij_ = find(tmp_pk_(c_ij_)>tmp_pm_(c_ij_)); 
if (length(tmp_ij_)>0); 
tmp_k_get_ = tmp_k_(c_ij_(tmp_ij_)); tmp_m_get_ = tmp_m_(c_ij_(tmp_ij_));
log_pval_up_XX_(tmp_ij_) = shygecln(tmp_k_get_,tmp_N,tmp_K,tmp_m_get_+tmp_k_get_);
end;%if (length(tmp_ij_)>0); 
log_pval_up_XX__{npathway,npercentile} = log_pval_up_XX_;
log_pval_dn_XX_ = log(0.5)*ones(length(c_rem_),1); tmp_ij_ = find(tmp_pk_(c_ij_)<tmp_pm_(c_ij_)); 
if (length(tmp_ij_)>0); 
tmp_k_get_ = tmp_k_(c_ij_(tmp_ij_)); tmp_m_get_ = tmp_m_(c_ij_(tmp_ij_));
log_pval_dn_XX_(tmp_ij_) = shygecln(tmp_K - tmp_k_get_,tmp_N,tmp_K,tmp_N - (tmp_m_get_+tmp_k_get_));
end;%if (length(tmp_ij_)>0); 
log_pval_dn_XX__{npathway,npercentile} = log_pval_dn_XX_;
%%%%%%%%;
K_XX__(npathway,npercentile) = tmp_K; M_XX__(npathway,npercentile) = tmp_M; 
k_XX__{npathway,npercentile} = tmp_k_(c_ij_); m_XX__{npathway,npercentile} = tmp_m_(c_ij_);
tmp_P = tmp_K/max(1,tmp_N); tmp_avg_ = tmp_n_.*tmp_P; tmp_std_ = sqrt(tmp_n_.*tmp_P.*(1-tmp_P));
z_XX__{npathway,npercentile} = (tmp_k_(c_ij_) - tmp_avg_(c_ij_))./tmp_std_(c_ij_) ;
if flag_plot;
subplot(2,n_percentile,npercentile+0*n_percentile); hold on; stairs(niter_,log_pval_up_XX_,'k-','LineWidth',0.5); hold off; 
ylim([-15,0]); xlim([1,length(c_rem_)]);
tic_ij_ = max(1,0:25:length(c_rem_));
%set(gca,'XTick',niter_(tic_ij_),'XTickLabel',c_rem_(tic_ij_)); xtickangle(90); xlabel('columns remaining');
set(gca,'XTick',niter_(tic_ij_),'XTickLabel',1+niter_(tic_ij_)); xtickangle(90); xlabel('iteration');
ylabel('log(pvalue up)'); title(sprintf(' percentile %d',round(percentile_(npercentile))));
subplot(2,n_percentile,npercentile+1*n_percentile); hold on; stairs(niter_,log_pval_dn_XX_,'k-','LineWidth',0.5); hold off; 
ylim([-15,0]); xlim([1,length(c_rem_)]);
tic_ij_ = max(1,0:25:length(c_rem_));
%set(gca,'XTick',niter_(tic_ij_),'XTickLabel',c_rem_(tic_ij_)); xtickangle(90); xlabel('columns remaining');
set(gca,'XTick',niter_(tic_ij_),'XTickLabel',1+niter_(tic_ij_)); xtickangle(90); xlabel('iteration');
ylabel('log(pvalue dn)'); title(sprintf(' percentile %d',round(percentile_(npercentile))));
set(gcf,'Position',1+[0,0,1024*2,1024]);
end;%if flag_plot;
%%%%%%%%%%%%%%%%;
end;%for nl2=1:length(tmp_pij_);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
if flag_plot & mod(nl,100)==0; drawnow(); end;
end;%for nl=1:length(po_XX_size_uni_);
%%%%%%%%%%%%%%%%;
end;%for npercentile=1:n_percentile;

lisa.k_XX__ = k_XX__;
lisa.K_XX__ = K_XX__;
lisa.M_XX__ = M_XX__;
lisa.m_XX__ = m_XX__;
lisa.z_XX__ = z_XX__;
lisa.log_pval_up_XX__ = log_pval_up_XX__;
lisa.log_pval_dn_XX__ = log_pval_dn_XX__;
