% testing a loader for table data ;
clear;
setup;
dir_trunk = sprintf('/data/rangan/dir_bcc/dir_jamison');
dir_data = sprintf('%s/data_summary_20190730',dir_trunk);
%%%%%%%%;
flag_load=1;
%%%%%%%%;
if ~flag_load;
%%%%%%%%;
str_table_name = sprintf('%s/20161026_covariate_table.format.txt',dir_data);
disp(sprintf(' %% reading %s',str_table_name));
C_ = readtable(str_table_name);
disp(sprintf(' %% saving %s',str_table_name));
save(sprintf('%s/20161026_covariate_table.format.mat',dir_data),'C_');
%%%%%%%%;
str_table_name = sprintf('%s/EXON.Gx_50421.Cx_50.brain_table_merge_output.CPM.NotCtrl.NotEmpty.txt',dir_data);
disp(sprintf(' %% reading %s',str_table_name));
E_ = readtable(str_table_name);
disp(sprintf(' %% writing %s',str_table_name));
save(sprintf('%s/EXON.Gx_50421.Cx_50.brain_table_merge_output.CPM.NotCtrl.NotEmpty.mat',dir_data),'E_');
%%%%%%%%;
str_table_name = sprintf('%s/INTRON_INTERGENIC.Gx_25998.Cx_50.brain_table_merge_output.CPM.NotCtrl.NotEmpty.txt',dir_data);
disp(sprintf(' %% reading %s',str_table_name));
I_ = readtable(str_table_name);
disp(sprintf(' %% writing %s',str_table_name));
save(sprintf('%s/INTRON_INTERGENIC.Gx_25998.Cx_50.brain_table_merge_output.CPM.NotCtrl.NotEmpty.mat',dir_data),'I_');
%%%%%%%%;
end;%if ~flag_load;
%%%%%%%%;
if flag_load;
%%%%%%%%;
load(sprintf('%s/EXON.Gx_50421.Cx_50.brain_table_merge_output.CPM.NotCtrl.NotEmpty.mat',dir_data),'E_');
load(sprintf('%s/INTRON_INTERGENIC.Gx_25998.Cx_50.brain_table_merge_output.CPM.NotCtrl.NotEmpty.mat',dir_data),'I_');
load(sprintf('%s/20161026_covariate_table.format.mat',dir_data),'C_');
%%%%%%%%;
end;%if flag_load;

flag_E = 1;
flag_I = 1;

%%%%%%%%;
% Here we attempt to extract the gene-lengths. ;
%%%%%%%%;
str_table_name = sprintf('%s/EXON.Gx_50421.Cx_50.brain_table_merge_output.CPM.NotCtrl.NotEmpty.txt',dir_data);
fp = fopen(str_table_name); tmp_str = fgetl(fp); fclose(fp);
E_VariableName_ = strread(tmp_str,'%s','delimiter','\t');
clear tmp_str ;
%%%%%%%%;
str_table_name = sprintf('%s/INTRON_INTERGENIC.Gx_25998.Cx_50.brain_table_merge_output.CPM.NotCtrl.NotEmpty.txt',dir_data);
fp = fopen(str_table_name); tmp_str = fgetl(fp); fclose(fp);
I_VariableName_ = strread(tmp_str,'%s','delimiter','\t');
clear tmp_str ;
%%%%%%%%;
str_table_name = sprintf('%s/ensg_lengths.tsv',dir_data);
fp = fopen(str_table_name); gene_length_ = textscan(fp,'%s %d'); fclose(fp);
for ng=1:length(gene_length_{1});
end;%for ng=1:length(gene_length_{1});
%%%%%%%%;
[tmp_cap_,E_VariableName_to_cap_,gene_length_to_cap_] = intersect(E_VariableName_,gene_length_{1},'stable');
E_length_ = zeros(length(E_VariableName_),1);
E_length_(E_VariableName_to_cap_) = gene_length_{2}(gene_length_to_cap_);
flag_test=1;
if flag_test;
disp(sprintf(' %% testing E_length_ vs gene_length_ '));
n_i=1024;
for ni=1:n_i;
ng = max(1,min(length(tmp_cap_),floor(length(tmp_cap_)*rand())));
assert(strcmp(E_VariableName_(E_VariableName_to_cap_(ng)),gene_length_{1}(gene_length_to_cap_(ng))));
end;%for ni=1:n_i;
end;%if flag_test;
clear tmp_cap_;
%%%%%%%%;
[tmp_cap_,I_VariableName_to_cap_,gene_length_to_cap_] = intersect(I_VariableName_,gene_length_{1},'stable');
I_length_ = zeros(length(I_VariableName_),1);
I_length_(I_VariableName_to_cap_) = gene_length_{2}(gene_length_to_cap_);
flag_test=1;
if flag_test;
disp(sprintf(' %% testing I_length_ vs gene_length_ '));
n_i=1024;
for ni=1:n_i;
ng = max(1,min(length(tmp_cap_),floor(length(tmp_cap_)*rand())));
assert(strcmp(I_VariableName_(I_VariableName_to_cap_(ng)),gene_length_{1}(gene_length_to_cap_(ng))));
end;%for ni=1:n_i;
end;%if flag_test;
clear tmp_cap_;
%%%%%%%%;
% Note that only 6660 (13%) of the E_ are found, and only 5379 (21%) of the I_ are found. ;
%%%%%%%%;

Label_ID_ = unique(C_.Cluster_ID_20161007);
n_Label_ID = length(Label_ID_);
n_Label_ID_ = zeros(n_Label_ID,1);
for nLabel_ID = 1:n_Label_ID;
n_Label_ID_(nLabel_ID) = length(find(strcmp(C_.Cluster_ID_20161007,Label_ID_(nLabel_ID))));
end;%for nLabel_ID = 1:n_Label_ID;
flag_plot=0;
if flag_plot;
bar(1:n_Label_ID,n_Label_ID_);
set(gca,'XTick',1:n_Label_ID,'XTickLabel',Label_ID_); xtickangle(90);
xlabel('cluster label');
ylabel('number');
title('histogram of cluster label counts');
set(gcf,'Position',1+[0,0,1024*2,1024]);
fname_base = sprintf('%s/dir_jpg/label_count_C',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
end;%if flag_plot;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
% First pass at defining E_val_ and I_val_ ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
E_ID_ = E_{:,1};
I_ID_ = E_{:,1};
C_ID_ = C_{:,1}; 
u_ID_ = intersectall({E_ID_,I_ID_,C_ID_});
n_u = length(u_ID_);
[~,~,E_to_u_ID_] = intersect(u_ID_,E_ID_,'stable');
[~,~,I_to_u_ID_] = intersect(u_ID_,I_ID_,'stable');
[~,~,C_to_u_ID_] = intersect(u_ID_,C_ID_,'stable');
%%%%%%%%;
flag_test=1;
if flag_test;
disp(sprintf(' %% testing E_to_C_ID_'));
n_i = 1024;
for ni=1:n_i;
nu = max(1,min(n_u,floor(n_u*rand())));
nE_ID = E_to_u_ID_(nu);
nI_ID = I_to_u_ID_(nu);
nC_ID = C_to_u_ID_(nu);
assert(strcmp(C_ID_(nC_ID),E_ID_(nE_ID)));
assert(strcmp(C_ID_(nC_ID),I_ID_(nE_ID)));
end;%for ni=1:n_i;
disp(sprintf(' %% finished testing E_to_C_ID_'));
end;%if flag_test;
%%%%%%%%;
% Extracting unique cluster labels. ;
%%%%%%%%;
u_Sample_Label_ = unique(C_.Cluster_ID_20161007(C_to_u_ID_));
n_Sample_Label = length(u_Sample_Label_);
n_Sample_Label_ = zeros(n_Sample_Label,1);
for nSample_Label = 1:n_Sample_Label;
n_Sample_Label_(nSample_Label) = length(find(strcmp(C_.Cluster_ID_20161007(C_to_u_ID_),u_Sample_Label_(nSample_Label))));
end;%for nSample_Label = 1:n_Sample_Label;
flag_plot=0;
if flag_plot;
bar(1:n_Sample_Label,n_Sample_Label_);
set(gca,'XTick',1:n_Sample_Label,'XTickLabel',u_Sample_Label_); xtickangle(90);
xlabel('cluster label');
ylabel('number');
title('histogram of cluster label counts');
set(gcf,'Position',1+[0,0,1024*2,1024]);
fname_base = sprintf('%s/dir_jpg/label_count_I',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
end;%if flag_plot;
%%%%%%%%;
% Generating ordered matrices of gene-values. ;
%%%%%%%%;
if flag_E;
E_col_val_ = 52:size(E_,2)-1; %<-- gene list begins after 'Fail Confidence Sum' ;
%E_val_ = decostand_total_0(E_{E_to_u_ID_,E_col_val_},'col');
E_val_ = E_{E_to_u_ID_,E_col_val_};
n_E_GENE = size(E_val_,2);
end;%if flag_E;
if flag_I;
I_col_val_ = 52:size(I_,2)-1;
%I_val_ = decostand_total_0(I_{I_to_u_ID_,I_col_val_},'col');
I_val_ = I_{I_to_u_ID_,I_col_val_};
n_I_GENE = size(I_val_,2);  %<-- gene list begins after 'Fail Confidence Sum' ;
end;%if flag_I;
%assert(size(I_val_,1)==size(E_val_,1)); %<-- fewer samples in E_. ;
%%%%%%%%;
% Now check for bimodality of gene expression across samples: ;
%%%%%%%%;
flag_plot=0;
if flag_plot;
clf;
subplot(2,1,1); tmp_b_ = 0:0.25:6; tmp_h_ = hist(log10(1+E_{E_to_u_ID_,E_col_val_}),tmp_b_); colormap(colormap_beach()); imagesc(log10(1+tmp_h_),[0,3]); xlabel('gene index'); ylabel('log #'); title('E distribution');
subplot(2,1,2); tmp_b_ = 0:0.25:6; tmp_h_ = hist(log10(1+I_{I_to_u_ID_,I_col_val_}),tmp_b_); colormap(colormap_beach()); imagesc(log10(1+tmp_h_),[0,3]); xlabel('gene index'); ylabel('log #'); title('I distribution');
fname_base = sprintf('%s/dir_jpg/expression_histogram',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
end;%if flag_plot;
%%%%%%%%;

%%%%%%%%;
% Determining cutoffs for outliers. ;
%%%%%%%%;
E_val_m1_ = sum(E_val_<=0,1)./n_u; 
I_val_m1_ = sum(I_val_<=0,1)./n_u; 
m1_threshold = 0.90; %<-- 90 percent missing. ;
disp(sprintf(' %% s1 threshold %0.2f',m1_threshold));
clf;
subplot(1,2,1);plot(1:n_E_GENE,sort(E_val_m1_),'.',1:n_E_GENE,m1_threshold*ones(1,n_E_GENE),'k:'); xlabel('sorted gene index'); ylabel('fraction missing samples'); xlim([1,n_E_GENE]); ylim([0,1]);
subplot(1,2,2);plot(1:n_I_GENE,sort(I_val_m1_),'.',1:n_I_GENE,m1_threshold*ones(1,n_I_GENE),'k:'); xlabel('sorted gene index'); ylabel('fraction missing samples'); xlim([1,n_I_GENE]); ylim([0,1]);
flag_plot=0;
if flag_plot;
fname_base = sprintf('%s/dir_jpg/expression_m1_cdf',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
end;%if flag_plot;
E_m1_ij_ = find(E_val_m1_<m1_threshold); I_m1_ij_ = find(I_val_m1_<m1_threshold);
%E_m1_ij_ = 1:1e4; I_m1_ij_ = 1:1e4;
E_val_m2_ = sum(log10(1e-12 + E_val_(:,E_m1_ij_)),2);
I_val_m2_ = sum(log10(1e-12 + I_val_(:,I_m1_ij_)),2);
clf;
m2_threshold = so2g_mle_fminsearch(E_val_m2_ + I_val_m2_);
flag_plot=0;
if flag_plot;
fname_base = sprintf('%s/dir_jpg/expression_m2_histogram',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
end;%if flag_plot;
disp(sprintf(' %% m2 threshold %0.2f',m2_threshold));
X_m2_ij_ = find(E_val_m2_+I_val_m2_ > m2_threshold);
disp(sprintf(' %% %d/%d = %0.2f samples above m2_threshold',length(X_m2_ij_),n_u,length(X_m2_ij_)/n_u));
X_m2_ij_ = 1:n_u; disp(sprintf(' %% retaining all samples. '));

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
% Second pass at defining E_val_ and I_val_ ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
u_ID_ = u_ID_(X_m2_ij_);
n_u = length(u_ID_);
[~,~,E_to_u_ID_] = intersect(u_ID_,E_ID_,'stable');
[~,~,I_to_u_ID_] = intersect(u_ID_,I_ID_,'stable');
[~,~,C_to_u_ID_] = intersect(u_ID_,C_ID_,'stable');
%%%%%%%%;
flag_test=1;
if flag_test;
disp(sprintf(' %% testing E_to_C_ID_'));
n_i = 1024;
for ni=1:n_i;
nu = max(1,min(n_u,floor(n_u*rand())));
nE_ID = E_to_u_ID_(nu);
nI_ID = I_to_u_ID_(nu);
nC_ID = C_to_u_ID_(nu);
assert(strcmp(C_ID_(nC_ID),E_ID_(nE_ID)));
assert(strcmp(C_ID_(nC_ID),I_ID_(nE_ID)));
end;%for ni=1:n_i;
disp(sprintf(' %% finished testing E_to_C_ID_'));
end;%if flag_test;
%%%%%%%%;
% Extracting unique cluster labels. ;
%%%%%%%%;
str_Sample_Label_ = C_.Cluster_ID_20161007(C_to_u_ID_);
u_Sample_Label_ = unique(C_.Cluster_ID_20161007(C_to_u_ID_));
n_Sample_Label = length(u_Sample_Label_);
n_Sample_Label_ = zeros(n_Sample_Label,1);
for nSample_Label = 1:n_Sample_Label;
n_Sample_Label_(nSample_Label) = length(find(strcmp(C_.Cluster_ID_20161007(C_to_u_ID_),u_Sample_Label_(nSample_Label))));
end;%for nSample_Label = 1:n_Sample_Label;
Sample_Label_sub_ = zeros(n_u,1);
for nSample_Label=1:n_Sample_Label;
tmp_ij_ = find(strcmp(str_Sample_Label_,u_Sample_Label_(nSample_Label)));
if (~isempty(str2num(u_Sample_Label_{nSample_Label})));
Sample_Label_sub_(tmp_ij_) = str2num(u_Sample_Label_{nSample_Label});
end;%if (~isempty(str2num(u_Sample_Label_{nSample_Label})));
end;%for nSample_Label=1:n_Sample_Label;
flag_plot=0;
if flag_plot;
bar(1:n_Sample_Label,n_Sample_Label_);
set(gca,'XTick',1:n_Sample_Label,'XTickLabel',u_Sample_Label_); xtickangle(90);
xlabel('cluster label');
ylabel('number');
title('histogram of cluster label counts');
set(gcf,'Position',1+[0,0,1024*2,1024]);
fname_base = sprintf('%s/dir_jpg/label_count_sub',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
end;%if flag_plot;
%%%%%%%%;
% Generating ordered matrices of gene-values. ;
%%%%%%%%;
if flag_E;
E_col_val_ = 52:size(E_,2)-1; %<-- gene list begins after 'Fail Confidence Sum' ;
E_col_val_ = E_col_val_(E_m1_ij_);
E_VariableName_sub_ = E_VariableName_(E_col_val_);
%E_val_ = decostand_total_0(E_{E_to_u_ID_,E_col_val_},'col');
E_val_ = E_{E_to_u_ID_,E_col_val_};
n_E_GENE = size(E_val_,2);
end;%if flag_E;
if flag_I;
I_col_val_ = 52:size(I_,2)-1;
I_col_val_ = I_col_val_(I_m1_ij_);
I_VariableName_sub_ = I_VariableName_(I_col_val_);
%I_val_ = decostand_total_0(I_{I_to_u_ID_,I_col_val_},'col');
I_val_ = I_{I_to_u_ID_,I_col_val_};
n_I_GENE = size(I_val_,2);  %<-- gene list begins after 'Fail Confidence Sum' ;
end;%if flag_I;
assert(size(I_val_,1)==size(E_val_,1)); %<-- same number of samples in I_ and E_. ;
%%%%%%%%;
% Now check for bimodality of gene expression across samples: ;
%%%%%%%%;
flag_plot=0;
if flag_plot;
clf;
subplot(2,1,1); tmp_b_ = 0:0.25:6; tmp_h_ = hist(log10(1+E_{E_to_u_ID_,E_col_val_}),tmp_b_); colormap(colormap_beach()); imagesc(log10(1+tmp_h_),[0,3]); xlabel('gene index'); ylabel('log #'); title('E distribution');
subplot(2,1,2); tmp_b_ = 0:0.25:6; tmp_h_ = hist(log10(1+I_{I_to_u_ID_,I_col_val_}),tmp_b_); colormap(colormap_beach()); imagesc(log10(1+tmp_h_),[0,3]); xlabel('gene index'); ylabel('log #'); title('I distribution');
fname_base = sprintf('%s/dir_jpg/expression_histogram_sub',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
end;%if flag_plot;
%%%%%%%%;

%{
%%%%%%%%;
% look at bimodal distribution of values. ;
% Does not appear as though the zeros are ordered. ;
%%%%%%%%;
tmp_ij_ = find(E_val_~=0);
E_nz_ = log(E_val_(tmp_ij_));
[E_lval_threshold] = so2g_mle_fminsearch(E_nz_);
tmp_E_ = zeros(size(E_val_));
tmp_E_(tmp_ij_(find(E_nz_<E_lval_threshold)))=-1;
tmp_E_(tmp_ij_(find(E_nz_>E_lval_threshold)))=+1;
tmp_E_(find(E_val_==0))=0;
flag_plot=0;
if flag_plot;
subplot(4,3,[1,2,3,4,5,6]); imagesc(tmp_E_,[-1,+1]); colormap(colormap_beach()); title('E_lval thresholded');
subplot(4,3,7); plot(sum(tmp_E_==-1,2),'.'); title('m2 -1'); xlim([1,n_u]);
subplot(4,3,8); plot(sum(tmp_E_== 0,2),'.'); title('m2  0'); xlim([1,n_u]);
subplot(4,3,9); plot(sum(tmp_E_==+1,2),'.'); title('m2 +1'); xlim([1,n_u]);
subplot(4,3,10); plot(sum(tmp_E_==-1,1),'.'); title('m1 -1'); xlim([1,n_E_GENE]);
subplot(4,3,11); plot(sum(tmp_E_== 0,1),'.'); title('m1  0'); xlim([1,n_E_GENE]);
subplot(4,3,12); plot(sum(tmp_E_==+1,1),'.'); title('m1 +1'); xlim([1,n_E_GENE]);
figbig;
fname_base = sprintf('%s/dir_jpg/E_lval_so2g',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
end;%if flag_plot;
%%%%%%%%;
tmp_ij_ = find(I_val_~=0);
I_nz_ = log(I_val_(tmp_ij_));
[I_lval_threshold] = so2g_mle_fminsearch(I_nz_);
tmp_I_ = zeros(size(I_val_));
tmp_I_(tmp_ij_(find(I_nz_<I_lval_threshold)))=-1;
tmp_I_(tmp_ij_(find(I_nz_>I_lval_threshold)))=+1;
tmp_I_(find(I_val_==0))=0;
flag_plot=0;
if flag_plot;
subplot(4,3,[1,2,3,4,5,6]); imagesc(tmp_I_,[-1,+1]); colormap(colormap_beach()); title('I_lval thresholded');
subplot(4,3,7); plot(sum(tmp_I_==-1,2),'.'); title('m2 -1'); xlim([1,n_u]);
subplot(4,3,8); plot(sum(tmp_I_== 0,2),'.'); title('m2  0'); xlim([1,n_u]);
subplot(4,3,9); plot(sum(tmp_I_==+1,2),'.'); title('m2 +1'); xlim([1,n_u]);
subplot(4,3,10); plot(sum(tmp_I_==-1,1),'.'); title('m1 -1'); xlim([1,n_I_GENE]);
subplot(4,3,11); plot(sum(tmp_I_== 0,1),'.'); title('m1  0'); xlim([1,n_I_GENE]);
subplot(4,3,12); plot(sum(tmp_I_==+1,1),'.'); title('m1 +1'); xlim([1,n_I_GENE]);
figbig;
fname_base = sprintf('%s/dir_jpg/I_lval_so2g',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
end;%if flag_plot;
%%%%%%%%;
 %}

%%%%%%%%;
% attempt svd-based imputation. ;
%%%%%%%%;
n_rank_imputation = 16;
tmp_rseed = 1;
tmp_n_iteration = 256;
tmp_tolerance = 1e-3;
if flag_load==0;
%%%%%%%%;
E_ij_missing_ = find(E_val_<=0); E_ij_filled_ = setdiff(1:n_u*n_E_GENE,E_ij_missing_); 
E_fill_ = zeros(size(E_val_)); E_fill_(E_ij_filled_)=1;
save('/data/rangan/dir_bcc/dir_jamison/dir_mat/E_fill_.mat','E_fill_');
E_li16_prefix_ = sprintf('%s/dir_jpg/E_li16_impute_fit',dir_trunk);
[E_li16_,E_li16f_] = svd_impute_fit_3(log(max(1e-12,E_val_)),E_ij_missing_,n_rank_imputation,E_li16_prefix_,tmp_rseed,tmp_n_iteration,tmp_tolerance);
save('/data/rangan/dir_bcc/dir_jamison/dir_mat/E_li16_.mat','E_li16_');
save('/data/rangan/dir_bcc/dir_jamison/dir_mat/E_li16f_.mat','E_li16f_');
tmp_ = E_li16_; fname_tsv = sprintf('%s/dir_mat/E_li16_.tsv',dir_trunk); 
disp(sprintf(' %% writing %s',fname_tsv)); save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = E_li16f_; fname_tsv = sprintf('%s/dir_mat/E_li16f_.tsv',dir_trunk); 
disp(sprintf(' %% writing %s',fname_tsv)); save(fname_tsv,'tmp_','-ascii','-tabs');
%%%%%%%%;
I_ij_missing_ = find(I_val_<=0); I_ij_filled_ = setdiff(1:n_u*n_I_GENE,I_ij_missing_); 
I_fill_ = zeros(size(I_val_)); I_fill_(I_ij_filled_)=1;
save('/data/rangan/dir_bcc/dir_jamison/dir_mat/I_fill_.mat','I_fill_');
I_li16_prefix_ = sprintf('%s/dir_jpg/I_li16_impute_fit',dir_trunk);
[I_li16_,I_li16f_] = svd_impute_fit_3(log(max(1e-12,I_val_)),I_ij_missing_,n_rank_imputation,I_li16_prefix_,tmp_rseed,tmp_n_iteration,tmp_tolerance);
save('/data/rangan/dir_bcc/dir_jamison/dir_mat/I_li16_.mat','I_li16_');
save('/data/rangan/dir_bcc/dir_jamison/dir_mat/I_li16f_.mat','I_li16f_');
tmp_ = I_li16_; fname_tsv = sprintf('%s/dir_mat/I_li16_.tsv',dir_trunk); 
disp(sprintf(' %% writing %s',fname_tsv)); save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = I_li16f_; fname_tsv = sprintf('%s/dir_mat/I_li16f_.tsv',dir_trunk); 
disp(sprintf(' %% writing %s',fname_tsv)); save(fname_tsv,'tmp_','-ascii','-tabs');
%%%%%%%%;
end;%if flag_load==0;
if flag_load==1;
load('/data/rangan/dir_bcc/dir_jamison/dir_mat/E_li16_.mat','E_li16_');
load('/data/rangan/dir_bcc/dir_jamison/dir_mat/I_li16_.mat','I_li16_');
load('/data/rangan/dir_bcc/dir_jamison/dir_mat/E_li16f_.mat','E_li16f_');
load('/data/rangan/dir_bcc/dir_jamison/dir_mat/I_li16f_.mat','I_li16f_');
end;%if flag_load==1;

%%%%%%%%;
% First apply max/min cutoffs at 01 and 99 percentiles. ;
% Then apply centered log ratio. ;
%%%%%%%%;
if flag_E; 
tmp_99 = prctile(E_li16f_(:),99); tmp_01 = prctile(E_li16f_(:), 1);
E_li16f_clogr_ = mean_center_0(max(tmp_01,min(tmp_99,E_li16f_)),'col');
tmp_ = E_li16f_clogr_; fname_tsv = sprintf('%s/dir_mat/E_li16f_clogr_.tsv',dir_trunk); 
if (~exist(fname_tsv,'file')); disp(sprintf(' %% writing %s',fname_tsv)); save(fname_tsv,'tmp_','-ascii','-tabs'); end;
end;%if flag_E; 
if flag_I; 
tmp_99 = prctile(I_li16f_(:),99); tmp_01 = prctile(I_li16f_(:), 1);
I_li16f_clogr_ = mean_center_0(max(tmp_01,min(tmp_99,I_li16f_)),'col');
tmp_ = I_li16f_clogr_; fname_tsv = sprintf('%s/dir_mat/I_li16f_clogr_.tsv',dir_trunk); 
if (~exist(fname_tsv,'file')); disp(sprintf(' %% writing %s',fname_tsv)); save(fname_tsv,'tmp_','-ascii','-tabs'); end;
end;%if flag_I; 

%%%%%%%%;
% Generating rank-normalized matrices. ;
%%%%%%%%;
if flag_E; 
E_li16f_rankn_ = rank_normalize_0(E_li16f_clogr_,'row'); 
tmp_ = E_li16f_rankn_; fname_tsv = sprintf('%s/dir_mat/E_li16f_rankn_.tsv',dir_trunk); 
if (~exist(fname_tsv,'file')); disp(sprintf(' %% writing %s',fname_tsv)); save(fname_tsv,'tmp_','-ascii','-tabs'); end;
end;%if flag_E; 
if flag_I; 
I_li16f_rankn_ = rank_normalize_0(I_li16f_clogr_,'row'); 
tmp_ = I_li16f_rankn_; fname_tsv = sprintf('%s/dir_mat/I_li16f_rankn_.tsv',dir_trunk); 
if (~exist(fname_tsv,'file')); disp(sprintf(' %% writing %s',fname_tsv)); save(fname_tsv,'tmp_','-ascii','-tabs'); end;
end;%if flag_I;

%%%%%%%%;
% Extracting glossary. ;
% The vector 'LC' will list the LinearCorrelationWithPositiveQuality. ;
%%%%%%%%;
str_table_name = sprintf('%s/metric_glossary.txt',dir_data);
G_ = readtable(str_table_name); n_G = size(G_,1);
G_h_ = zeros(255,n_G); 
for nG=1:n_G;
G_h_(:,nG) = hist(cast(cast(G_{nG,1}{1},'uint8'),'double'),1:255);
end;%for nG=1:n_G;
G_h_mask_ = zeros(255,1);
G_h_mask_(cast('0','uint8'):cast('9','uint8')) = 1;
G_h_mask_(cast('A','uint8'):cast('Z','uint8')) = 1;
G_h_mask_(cast('a','uint8'):cast('z','uint8')) = 1;
G_h_ = G_h_.*repmat(G_h_mask_,1,n_G);
for nG=1:n_G;
G_h_(:,nG) = G_h_(:,nG)/norm(G_h_(:,nG),'fro');
end;%for nG=1:n_G;

%%%%%%%%;
% Extracting categorical covariates. ;
%%%%%%%%;
B_col_val_ = setdiff(7:23,[9,10,11,13,15,16,21,22,23]);
% 09 --> cell [1] x3ClassPrediction: 
% 10 <-- FailConfidencSum (double);
% 13 <-- SampleCount (double) ;
% 11 --> cell [47] max_leaf: 
% 15 --> cell [283] well: 
% 16 --> cell [9] batch: 
% 21 --> double [48] SequencingLane: 
% 22 --> double [3] FailState: 
% 23 --> double [12] RunID: 
n_BCOV = length(B_col_val_);
disp(sprintf(' %% %% %% %% '));
for nB=1:n_BCOV;
nc = B_col_val_(nB);
tmp_str = C_.Properties.VariableNames{nc};
tmp_ij = find(strcmp(G_{:,1},tmp_str));
tmp_LC = 0;
if ( isempty(tmp_ij)); disp(sprintf(' %% Warning! %s not found in glossary',tmp_str)); end;
if (~isempty(tmp_ij)); 
tmp_LC_str = G_{tmp_ij,2};
if strcmp(tmp_LC_str,'NA'); tmp_LC = 0; end;
if strcmp(tmp_LC_str,'Unknown'); tmp_LC = 0; end;
if strcmp(tmp_LC_str,'Positive'); tmp_LC = +1; end;
if strcmp(tmp_LC_str,'Negative'); tmp_LC = -1; end;
end;%if (~isempty(tmp_ij));
tmp_type = class(C_{C_to_u_ID_,nc});
tmp_u_ = unique(C_{C_to_u_ID_,nc});
disp(sprintf(' %% %0.2d --> %s [%d] %s [LC %d]: ',nc,tmp_type,length(tmp_u_),tmp_str,tmp_LC));
for nu=1:length(tmp_u_);
if strcmp(tmp_type,'cell');   disp(sprintf(' %% %% %s: %d',tmp_u_{nu},length(find(strcmp(C_{C_to_u_ID_,nc},tmp_u_{nu}))))); end;
if strcmp(tmp_type,'double'); disp(sprintf(' %% %% %d: %d',tmp_u_(nu),length(find(C_{C_to_u_ID_,nc} == tmp_u_(nu))))); end;
end;%for nu=1:length(tmp_u_);
disp(sprintf(' %% %% %% %% '));
end;%for nB=1:n_BCOV;
clear tmp_str tmp_ij tmp_LC tmp_LC_str tmp_type tmp_u_ ;
%%%%%%%%;
% Note that all LC are 0 for the categorical covariates. ;
%%%%%%%%;

%%%%%%%%;
n_FACTOR = 0; B_val_ = zeros(n_u,0); B_VariableName_ = cell(0);
%%%%%%%%;
% Cluster_Grp_20161007:
%%%%%%%%;
nc=7; tmp_str = 'exc'; 
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(strcmp(C_{C_to_u_ID_,nc},tmp_str)); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
nc=7; tmp_str = 'glia'; 
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(strcmp(C_{C_to_u_ID_,nc},tmp_str)); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
nc=7; tmp_str = 'inh'; 
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(strcmp(C_{C_to_u_ID_,nc},tmp_str)); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
%%%%%%%%;
% IsOutlier_20161007: 
%%%%%%%%;
nc=8; tmp_str = 'no'; 
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(strcmp(C_{C_to_u_ID_,nc},tmp_str)); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
nc=8; tmp_str = 'yes'; 
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(strcmp(C_{C_to_u_ID_,nc},tmp_str)); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
%%%%%%%%;
% cell_class: 
%%%%%%%%;
nc=12; tmp_str = 'GABAergic'; 
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(strcmp(C_{C_to_u_ID_,nc},tmp_str)); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
nc=12; tmp_str = 'Glutamatergic'; 
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(strcmp(C_{C_to_u_ID_,nc},tmp_str)); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
nc=12; tmp_str = 'Non-neuronal'; 
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(strcmp(C_{C_to_u_ID_,nc},tmp_str)); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
%%%%%%%%;
% BatchCount: 
%%%%%%%%;
nc=14; tmp_d = 1;
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(C_{C_to_u_ID_,nc}==tmp_d); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
nc=14; tmp_d = 2;
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(C_{C_to_u_ID_,nc}==tmp_d); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
nc=14; tmp_d = 3;
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(C_{C_to_u_ID_,nc}==tmp_d); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
%%%%%%%%;
% neun:
%%%%%%%%;
nc=17; tmp_str = '1NeuNN'; 
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(strcmp(C_{C_to_u_ID_,nc},tmp_str)); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
nc=17; tmp_str = '1NeuNP'; 
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(strcmp(C_{C_to_u_ID_,nc},tmp_str)); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
%%%%%%%%;
% patient_id: 
%%%%%%%%;
nc=18; tmp_str1 = 'H200-1025'; tmp_str2 = 'H200.1025'; 
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(strcmp(C_{C_to_u_ID_,nc},tmp_str1) | strcmp(C_{C_to_u_ID_,nc},tmp_str2)); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
nc=18; tmp_str1 = 'H200-1030'; tmp_str2 = 'H200.1030'; 
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(strcmp(C_{C_to_u_ID_,nc},tmp_str1) | strcmp(C_{C_to_u_ID_,nc},tmp_str2)); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
%%%%%%%%;
% region:
%%%%%%%%;
nc=19; tmp_str = 'FI'; 
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(strcmp(C_{C_to_u_ID_,nc},tmp_str)); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
nc=19; tmp_str = 'MTG'; 
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(strcmp(C_{C_to_u_ID_,nc},tmp_str)); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
%%%%%%%%;
% layer: 
%%%%%%%%;
nc=20; tmp_str = '1'; 
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(strcmp(C_{C_to_u_ID_,nc},tmp_str)); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
nc=20; tmp_str = '5'; 
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(strcmp(C_{C_to_u_ID_,nc},tmp_str)); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
%%%%%%%%;
clear tmp_ij_ tmp_str tmp_str1 tmp_str2 ;

%%%%%%%%;
% Ranking categorical covariates. ;
%%%%%%%%;
B_rank_ = rank_normalize_0(B_val_); n_BCOV = size(B_rank_,2);
%%%%%%%%;
% Because LC = 0 for all categorical covariates, we can assign B_LC_ now. ;
%%%%%%%%;
B_LC_ = zeros(n_BCOV,1);

%%%%%%%%;
% Extracting continuous covariates. ;
%%%%%%%%;
D_col_val_ = [10,13,24:size(C_,2)];
str_exclude_ = {'fastQCResult','x_P_E__RawSeq__','x_Num_1_NumberOfInputCoreGenes_CoreGenes_','x_Num_2_NumberOfInputCoreGenes_CoreGenes_','x_MitoCore_NumberOfInputCoreGenes_CoreGenes_','x_MitoCore13_NumberOfInputCoreGenes_CoreGenes_','x_P_E__Pretrimmed_ERCCAligned_'};
for ne=1:length(str_exclude_);
nx = find(strcmp(C_.Properties.VariableNames,str_exclude_{ne}));
disp(sprintf(' %% excluding %s <-- %d <-- %s',str_exclude_{ne},nx,C_.Properties.VariableNames{nx}));
D_col_val_ = setdiff(D_col_val_,nx);
end;%for ne=1:length(str_exclude_);
%%%%%%%%;
n_D_col_val = length(D_col_val_); n_DCOV = n_D_col_val;
D_val_ = zeros(n_u,n_DCOV);
D_LC_ = zeros(n_DCOV,1);
D_VariableName_ = cell(n_D_col_val,1);
for nc=1:n_D_col_val;
D_col_val = D_col_val_(nc);
D_VariableName_{nc} = C_.Properties.VariableNames{D_col_val};
tmp_ij = find(strcmp(G_{:,1},D_VariableName_{nc}));
tmp_LC = 0;
if ( isempty(tmp_ij)); 
disp(sprintf(' %% %s no exact match found in glossary',D_VariableName_{nc})); 
tmp_h_ = hist(cast(cast(D_VariableName_{nc},'uint8'),'double'),1:255);
tmp_h_ = tmp_h_.*transpose(G_h_mask_);
tmp_h_ = tmp_h_/norm(tmp_h_,'fro');
[~,tmp_ij] = max(tmp_h_*G_h_);
disp(sprintf(' %% %s closest match: %s (%d)',D_VariableName_{nc},G_{tmp_ij,1}{1},tmp_ij));
end;%if ( isempty(tmp_ij)); 
if (~isempty(tmp_ij)); 
tmp_LC_str = G_{tmp_ij,2};
if strcmp(tmp_LC_str,'NA'); tmp_LC = 0; end;
if strcmp(tmp_LC_str,'Unknown'); tmp_LC = 0; end;
if strcmp(tmp_LC_str,'Positive'); tmp_LC = +1; end;
if strcmp(tmp_LC_str,'Negative'); tmp_LC = -1; end;
disp(sprintf(' %% %s found in glossary: %d',D_VariableName_{nc},tmp_LC));
end;%if (~isempty(tmp_ij)); 
D_LC_(nc) = tmp_LC;
tmp_D_val_ = C_(C_to_u_ID_,D_col_val); 
if strcmp(class(tmp_D_val_{1,1}),'double'); D_val_(:,nc) = tmp_D_val_{1:end,1};
elseif strcmp(class(tmp_D_val_{1,1}),'cell'); D_val_(:,nc) = cellfun(@str2num,tmp_D_val_{1:end,1}); 
else disp(sprintf(' %% nc %d D_col_val %d LC %d class %s',nc,D_col_val,D_LC_(nc),class(tmp_D_val_{1,1}))); end;
end;%for nc=1:n_D_col_val;
D_rank_ = rank_normalize_0(D_val_);
clear tmp_ij tmp_LC tmp_h_ tmp_LC_str tmp_D_val_ ;

%%%%%%%%;
% Stacking together B_rank_ and D_rank_. ;
%%%%%%%%;
n_CCOV = n_BCOV + n_DCOV;
C_VariableName_ = {B_VariableName_{:},D_VariableName_{:}};
C_val_ = [B_val_ , D_val_];
C_rank_ = [B_rank_ , D_rank_];
C_LC_ = [B_LC_ ; D_LC_];
C_VariableName_LC_ = C_VariableName_;
for nCCOV=1:n_CCOV;
if C_LC_(nCCOV) == -1; tmp_suffix = '[ - ]'; end;
if C_LC_(nCCOV) ==  0; tmp_suffix = '[    ]'; end;
if C_LC_(nCCOV) == +1; tmp_suffix = '[+]'; end;
C_VariableName_LC_{nCCOV} = sprintf('%s_%s',C_VariableName_{nCCOV},tmp_suffix);
end;%for nCCOV=1:n_CCOV;
clear tmp_suffix ;

%%%%%%%%;
% Fully supervised clustering of covariates. ;
% i.e., direct measure of QC-differential-expression. ;
% Are any of these significant? ;
%%%%%%%%;
flag_plot=0;
if flag_plot;
n_iteration = 1024;
[AB_] = test_loader_cluster_C_AB_1(n_iteration,str_Sample_Label_,C_rank_);
Ccavg0_ = mean_center_0(AB_.C_rank_avg_);
[tmp_UCcavg0_,tmp_SCcavg0_,tmp_VCcavg0_] = svd(Ccavg0_);
CcabsZ_ = mean_center_0(AB_.AB_C_absZ_);
[tmp_UCcabsZ_,tmp_SCcabsZ_,tmp_VCcabsZ_] = svd(CcabsZ_);
CcrawZ_ = mean_center_0(AB_.AB_C_rawZ_);
[tmp_UCcrawZ_,tmp_SCcrawZ_,tmp_VCcrawZ_] = svd(CcrawZ_);
%subplot(1,3,1); scatter(tmp_VCcavg0_(:,1),tmp_VCcavg0_(:,2),15,'o','filled'); axisnotick; title('Ccavg0');
%subplot(1,3,2); scatter(tmp_VCcabsZ_(:,1),tmp_VCcabsZ_(:,2),15,'o','filled'); axisnotick; title('CcabsZ');
%subplot(1,3,3); scatter(tmp_VCcrawZ_(:,1),tmp_VCcrawZ_(:,2),15,'o','filled'); axisnotick; title('CcrawZ');
%%%%%%%%;
% quickly test statistical significance of CcabsZ_. ;
%%%%%%%%;
n_shuffle = 17; n_iteration = 256;
CcabsZ__ = zeros(n_Sample_Label^2,n_CCOV,1+n_shuffle);
for nshuffle=0:n_shuffle;
if (nshuffle==0); tmp_Q_ = eye(n_CCOV); end;
if (nshuffle> 0); rng(1024*nshuffle); [tmp_Q_,~] = qr(randn(n_CCOV)); end;
%disp(num2str(tmp_Q_(1,1:10)));
tmp_C_rank_ = mean_center_0(C_rank_)*tmp_Q_; 
tmp_AB_ = test_loader_cluster_C_AB_1(n_iteration,str_Sample_Label_,tmp_C_rank_);
CcabsZ__(:,:,1+nshuffle) = tmp_AB_.AB_C_absZ_;
end;%for nshuffle=0:n_shuffle;
lim_ = mean(CcabsZ__(:,:,1),'all') + std(CcabsZ__(:,:,1),1,'all')*3.5*[-1,+1];
for nshuffle=0:n_shuffle;
[tmp_UCcabsZ_,tmp_SCcabsZ_,tmp_VCcabsZ_] = svds(CcabsZ__(:,:,1+nshuffle),2);
[~,tmp_UCcabsZ_ij_] = sort(tmp_UCcabsZ_(:,1)); [~,tmp_VCcabsZ_ij_] = sort(tmp_VCcabsZ_(:,1));
figure(1); subplot(3,6,1+nshuffle); imagesc(CcabsZ__(tmp_UCcabsZ_ij_,tmp_VCcabsZ_ij_,1+nshuffle),lim_);
figure(2); subplot(3,6,1+nshuffle); scatter(tmp_VCcabsZ_(:,1),tmp_VCcabsZ_(:,2),'o','filled');
end;%for nshuffle=0:n_shuffle;
figure(1);colormap(colormap_beach());figbig;
figure(2);figbig;
figure(1);
fname_base = sprintf('%s/dir_jpg/CcabsZ_shuffle_heatmap',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
figure(2);
fname_base = sprintf('%s/dir_jpg/CcabsZ_shuffle_scatter',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
%%%%%%%%;
% Now retest CcabsZ_ using q3dcluster. ;
%%%%%%%%;
n_shuffle = 17; n_iteration = 256;
QR__ = zeros(n_CCOV,1+n_shuffle);
QC__ = zeros(n_CCOV,1+n_shuffle);
r_rem_ = zeros(n_CCOV,1);
c_rem_ = zeros(n_CCOV,1);
for nshuffle=0:n_shuffle;
if (nshuffle==0); tmp_Q_ = eye(n_CCOV); end;
if (nshuffle> 0); rng(1024*nshuffle); [tmp_Q_,~] = qr(randn(n_CCOV)); end;
tmp_C_rank_ = mean_center_0(C_rank_)*tmp_Q_; 
tmp_AB_ = test_loader_cluster_C_AB_1(n_iteration,str_Sample_Label_,tmp_C_rank_);
[out_xdrop_,trace_] = q3dcluster_nonbinary_AAAA_ver0(transpose(tmp_AB_.AB_C_absZ_));
n_iter = size(trace_,1);
QR__(1:n_iter,1+nshuffle) = trace_(:,4);
QC__(1:n_iter,1+nshuffle) = trace_(:,5);
if (nshuffle==0); r_rem_(1:n_iter) = trace_(:,2); end;
if (nshuffle==0); c_rem_(1:n_iter) = trace_(:,3); end;
end;%for nshuffle=0:n_shuffle;
QR_avg_ = mean(QR__(:,2:end),2); QR_std_ = std(QR__(:,2:end),1,2);
ZR__ = (QR__ - repmat(QR_avg_,1,1+n_shuffle))./repmat(QR_std_,1,1+n_shuffle);
QC_avg_ = mean(QC__(:,2:end),2); QC_std_ = std(QC__(:,2:end),1,2);
ZC__ = (QC__ - repmat(QC_avg_,1,1+n_shuffle))./repmat(QC_std_,1,1+n_shuffle);
figure(1);
subplot(2,2,1);plot(1:n_iter,ZR__(1:n_iter,2:end),'k.-',1:n_iter,ZR__(1:n_iter,1),'ro-');
xlabel('iter'); ylabel('ZR');
subplot(2,2,2);plot(1:n_iter,ZC__(1:n_iter,2:end),'k.-',1:n_iter,ZC__(1:n_iter,1),'ro-');
xlabel('iter'); ylabel('ZC');
subplot(2,2,3);plot(1:n_iter,QR__(1:n_iter,2:end),'k.-',1:n_iter,QR__(1:n_iter,1),'ro-');
xlabel('iter'); ylabel('QR');
subplot(2,2,4);plot(1:n_iter,QC__(1:n_iter,2:end),'k.-',1:n_iter,QC__(1:n_iter,1),'ro-');
xlabel('iter'); ylabel('QC');
figbig;
fname_base = sprintf('%s/dir_jpg/CcabsZ_shuffle_trace',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
%%%%%%%%;
% dexnb. ;
%%%%%%%%;
dir_base = '/data/rangan/dir_bcc/dir_jamison/dir_loader_cluster';
gamma = 0.00; n_shuffle = 64; p_set = 0.05; n_member_lob = 2;
gamma_d = floor(gamma*1000); str_g = sprintf('_g%.3d',gamma_d);
p_set_d = floor(p_set*1000); str_p = sprintf('_p%.3d',p_set_d);
str_nml = sprintf('_nml%d',n_member_lob);
str_xfix = sprintf('dexcluster_nonbinary_trace_ZRimax%s%s%s',str_g,str_p,str_nml);
prefix_base = sprintf('Ccavg0_%s',str_xfix); 
dir_out = []; E_array_base_ = transpose(Ccavg0_); E_array_r_ij_ = []; E_array_c_ij_ = [];
test_loader_dexcluster_nonbinary_trace_ZRimax_recursive_2(dir_base,dir_out,prefix_base,E_array_base_,E_array_r_ij_,E_array_c_ij_,gamma,n_shuffle,p_set,n_member_lob);
%ZRimax_label_ = test_loader_dexcluster_nonbinary_trace_ZRimax_recursive_2(dir_base,dir_out,prefix_base,E_array_base_,E_array_r_ij_,E_array_c_ij_,gamma,n_shuffle,p_set,n_member_lob);
p_set_ = [0.05]*0.5.^[0:3];
for np=1:length(p_set_);
tmp_p_set = p_set_(np);
tmp_ZRimax_label_ = test_loader_dexcluster_nonbinary_trace_ZRimax_recursive_2(dir_base,dir_out,prefix_base,E_array_base_,E_array_r_ij_,E_array_c_ij_,gamma,n_shuffle,tmp_p_set,n_member_lob);
subplot(2,2,np);
scatter(tmp_VCcavg0_(:,1),tmp_VCcavg0_(:,2),15,label_str_to_enum_0(tmp_ZRimax_label_));
colormap('lines');
title(sprintf('p %0.6f',tmp_p_set));
axisnotick;
end;%for np=1:length(p_set_);
figbig;
fname_base = sprintf('%s/dir_jpg/Ccavg0_dexnb_scatter_FIGA',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
%%%%%%%%;
dir_base = '/data/rangan/dir_bcc/dir_jamison/dir_loader_cluster';
gamma = 0.00; n_shuffle = 64; p_set = 0.05; n_member_lob = 2;
gamma_d = floor(gamma*1000); str_g = sprintf('_g%.3d',gamma_d);
p_set_d = floor(p_set*1000); str_p = sprintf('_p%.3d',p_set_d);
str_nml = sprintf('_nml%d',n_member_lob);
str_xfix = sprintf('lakcluster_nonbinary_trace_ZRimax%s%s%s',str_g,str_p,str_nml);
prefix_base = sprintf('Ccavg0_%s',str_xfix); 
dir_out = []; E_array_base_ = transpose(Ccavg0_); E_array_r_ij_ = []; E_array_c_ij_ = [];
test_loader_lakcluster_nonbinary_trace_ZRimax_recursive_2(dir_base,dir_out,prefix_base,E_array_base_,E_array_r_ij_,E_array_c_ij_,gamma,n_shuffle,p_set,n_member_lob);
%ZRimax_label_ = test_loader_lakcluster_nonbinary_trace_ZRimax_recursive_2(dir_base,dir_out,prefix_base,E_array_base_,E_array_r_ij_,E_array_c_ij_,gamma,n_shuffle,p_set,n_member_lob);
p_set_ = [0.05]*0.5.^[0:3];
for np=1:length(p_set_);
tmp_p_set = p_set_(np);
tmp_ZRimax_label_ = test_loader_lakcluster_nonbinary_trace_ZRimax_recursive_2(dir_base,dir_out,prefix_base,E_array_base_,E_array_r_ij_,E_array_c_ij_,gamma,n_shuffle,tmp_p_set,n_member_lob);
subplot(2,2,np);
scatter(tmp_VCcavg0_(:,1),tmp_VCcavg0_(:,2),15,label_str_to_enum_0(tmp_ZRimax_label_));
colormap('lines');
title(sprintf('p %0.6f',tmp_p_set));
axisnotick;
end;%for np=1:length(p_set_);
figbig;
fname_base = sprintf('%s/dir_jpg/Ccavg0_laknb_scatter_FIGA',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
%%%%%%%%;
tmp_Q_ = eye(n_CCOV); %[tmp_Q_,~] = qr(randn(n_CCOV));
n_rank_CC = 2;
CcabsZ_n_sub_ = fast_tsne_dr_0(transpose(CcabsZ_*tmp_Q_),struct('rand_seed',1,'no_dims',n_rank_CC,'theta',0.5));
opts_isosplit5 = struct('K_init',n_CCOV,'isocut_threshold',1.0);
label_CcabsZ_ = transpose(isosplit5(transpose(CcabsZ_n_sub_),opts_isosplit5));
subplot(1,1,1); scatter(CcabsZ_n_sub_(:,1),CcabsZ_n_sub_(:,2),15,label_CcabsZ_,'filled'); colormap('lines');
%%%%%%%%;
dir_base = '/data/rangan/dir_bcc/dir_jamison/dir_loader_cluster';
gamma = 0.00; n_shuffle = 64; p_set = 0.05; n_member_lob = 2;
gamma_d = floor(gamma*1000); str_g = sprintf('_g%.3d',gamma_d);
p_set_d = floor(p_set*1000); str_p = sprintf('_p%.3d',p_set_d);
str_nml = sprintf('_nml%d',n_member_lob);
str_xfix = sprintf('dexcluster_nonbinary_trace_ZRimax%s%s%s',str_g,str_p,str_nml);
prefix_base = sprintf('CcabsZ_%s',str_xfix); 
dir_out = []; E_array_base_ = transpose(CcabsZ_); E_array_r_ij_ = []; E_array_c_ij_ = [];
test_loader_dexcluster_nonbinary_trace_ZRimax_recursive_2(dir_base,dir_out,prefix_base,E_array_base_,E_array_r_ij_,E_array_c_ij_,gamma,n_shuffle,p_set,n_member_lob);
%ZRimax_label_ = test_loader_dexcluster_nonbinary_trace_ZRimax_recursive_2(dir_base,dir_out,prefix_base,E_array_base_,E_array_r_ij_,E_array_c_ij_,gamma,n_shuffle,p_set,n_member_lob);
p_set_ = [0.05]*0.5.^[0:5];
for np=1:length(p_set_);
tmp_p_set = p_set_(np);
tmp_ZRimax_label_ = test_loader_dexcluster_nonbinary_trace_ZRimax_recursive_2(dir_base,dir_out,prefix_base,E_array_base_,E_array_r_ij_,E_array_c_ij_,gamma,n_shuffle,tmp_p_set,n_member_lob);
subplot(2,3,np);
scatter(tmp_VCcabsZ_(:,1),tmp_VCcabsZ_(:,2),15,label_str_to_enum_0(tmp_ZRimax_label_),'filled');
colormap('lines');
title(sprintf('p %0.6f #=%d',tmp_p_set,length(unique(tmp_ZRimax_label_))));
axisnotick;
end;%for np=1:length(p_set_);
figbig;
fname_base = sprintf('%s/dir_jpg/CcabsZ_dexnb_scatter_FIGA',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
%%%%%%%%;
% Print output: ;
%%%%%%%%;
p_set = 0.05; 
ZRimax_label_ = test_loader_dexcluster_nonbinary_trace_ZRimax_recursive_2(dir_base,dir_out,prefix_base,E_array_base_,E_array_r_ij_,E_array_c_ij_,gamma,n_shuffle,p_set,n_member_lob);
ZRimax_enum_ = label_str_to_enum_0(ZRimax_label_);
n_QCluster = length(unique(ZRimax_enum_));
fname_base = sprintf('%s/dir_mat/CcabsZ_dexnb_p%.3d.txt',dir_trunk,floor(1000*p_set));
fp = fopen(fname_base,'w');
tmp_str = (sprintf(' n_QCluster: %d',n_QCluster)); fprintf(fp,'%s\n',tmp_str); disp(tmp_str);
tmp_str = (sprintf(' %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')); fprintf(fp,'%s\n',tmp_str); disp(tmp_str);
for nQCluster=1:n_QCluster;
tmp_str = (sprintf(' QCluster #%d:',nQCluster)); fprintf(fp,'%s\n',tmp_str); disp(tmp_str);
tmp_str = (sprintf('\t%s\n',C_VariableName_{find(ZRimax_enum_==nQCluster)})); fprintf(fp,'%s\n',tmp_str); disp(tmp_str);
tmp_str = (sprintf(' %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')); fprintf(fp,'%s\n',tmp_str); disp(tmp_str);
end;%for nQCluster=1:n_QCluster;
fclose(fp);
disp(sprintf(' %% writing %s',fname_base));
%%%%%%%%;
Table_CcabsZ_ = zeros(n_QCluster,n_Sample_Label);
for nQCluster=1:n_QCluster;
QCluster_ij_ = find(ZRimax_enum_==nQCluster);
n_l = length(QCluster_ij_);
for nl=1:n_l;
QC_ij = QCluster_ij_(nl);
ns=0;
for nSample_Label_A=1:n_Sample_Label;
for nSample_Label_B=1:n_Sample_Label;
tmp_lp = z_to_p_0(AB_.AB_C_absZ_(1+ns,QC_ij)); tmp_lp = -tmp_lp/(n_l*n_Sample_Label);
Table_CcabsZ_(nQCluster,nSample_Label_A) = Table_CcabsZ_(nQCluster,nSample_Label_A) + tmp_lp;
Table_CcabsZ_(nQCluster,nSample_Label_B) = Table_CcabsZ_(nQCluster,nSample_Label_B) + tmp_lp;
ns=ns+1;
end;%for nSample_Label_B=1:n_Sample_Label;
end;%for nSample_Label_A=1:n_Sample_Label;
end;%for nl=1:n_l;
end;%for nQCluster=1:n_QCluster;
subplot(1,1,1);
colormap(colormap_beach());
imagesc(Table_CcabsZ_); colorbar; figbig;
set(gca,'XTick',1:n_Sample_Label,'XTickLabel',unique(str_Sample_Label_)); xtickangle(90);
set(gca,'YTick',1:n_QCluster,'YTickLabel',1:n_QCluster);
title('QC-cluster vs sample-cluster -log(p-value)');
fname_base = sprintf('%s/dir_jpg/Table_CcabsZ_dexnb_FIGB',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
%%%%%%%%;
dir_base = '/data/rangan/dir_bcc/dir_jamison/dir_loader_cluster';
gamma = 0.00; n_shuffle = 64; p_set = 0.05; n_member_lob = 2;
gamma_d = floor(gamma*1000); str_g = sprintf('_g%.3d',gamma_d);
p_set_d = floor(p_set*1000); str_p = sprintf('_p%.3d',p_set_d);
str_nml = sprintf('_nml%d',n_member_lob);
str_xfix = sprintf('lakcluster_nonbinary_trace_ZRimax%s%s%s',str_g,str_p,str_nml);
prefix_base = sprintf('CcrawZ_%s',str_xfix); 
dir_out = []; E_array_base_ = transpose(CcrawZ_); E_array_r_ij_ = []; E_array_c_ij_ = [];
test_loader_lakcluster_nonbinary_trace_ZRimax_recursive_2(dir_base,dir_out,prefix_base,E_array_base_,E_array_r_ij_,E_array_c_ij_,gamma,n_shuffle,p_set,n_member_lob);
%ZRimax_label_ = test_loader_lakcluster_nonbinary_trace_ZRimax_recursive_2(dir_base,dir_out,prefix_base,E_array_base_,E_array_r_ij_,E_array_c_ij_,gamma,n_shuffle,p_set,n_member_lob);
p_set_ = [0.05]*0.5.^[0:3];
for np=1:length(p_set_);
tmp_p_set = p_set_(np);
tmp_ZRimax_label_ = test_loader_lakcluster_nonbinary_trace_ZRimax_recursive_2(dir_base,dir_out,prefix_base,E_array_base_,E_array_r_ij_,E_array_c_ij_,gamma,n_shuffle,tmp_p_set,n_member_lob);
subplot(2,2,np);
scatter(tmp_VCcrawZ_(:,1),tmp_VCcrawZ_(:,2),15,label_str_to_enum_0(tmp_ZRimax_label_));
colormap('lines');
title(sprintf('p %0.6f',tmp_p_set));
axisnotick;
end;%for np=1:length(p_set_);
figbig;
fname_base = sprintf('%s/dir_jpg/CcrawZ_laknb_scatter_FIGA',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
%%%%%%%%;
end;%if flag_plot;

%%%%%%%%;
% spectral clustering of covariates. ;
% Verdict: Covariates are not significantly clustered by themselves! ;
% Rather: certain covariates are significantly associated with the clusters found after analyzing transcript data. ;
%%%%%%%%;
flag_plot=0;
if flag_plot;
%%%%%%%%;
tmp_Q_ = eye(n_CCOV); %[tmp_Q_,~] = qr(randn(n_CCOV));
CC_ = corr(mean_center_0(C_rank_)*tmp_Q_);
%%%%%%%%;
% spectral-->isosplit5;
%%%%%%%%;
[tmp_U_,tmp_S_,tmp_V_] = svds(CC_,n_CCOV); %<-- around 11 large principal values. ;
n_rank_CC = 12;
for nrank_CC=1:n_rank_CC;
opts_isosplit5 = struct('K_init',n_CCOV,'isocut_threshold',1.0);
label_C__{nrank_CC} = transpose(isosplit5(transpose(tmp_V_(:,1:nrank_CC)*tmp_S_(1:nrank_CC,1:nrank_CC)),opts_isosplit5));
end;%for nrank_CC=1:n_rank_CC;
for nrank_CC=1:n_rank_CC;
subplot(3,4,nrank_CC); scatter(tmp_V_(:,1),tmp_V_(:,2),15,label_C__{nrank_CC}); colormap('lines');
end;%for nrank_CC=1:n_rank_CC;
%%%%%%%%;
% tsne50-->isosplit5;
%%%%%%%%;
tmp_Q_ = eye(n_CCOV); %[tmp_Q_,~] = qr(randn(n_CCOV));
n_rank_CC = 2;
C_n_sub_ = fast_tsne_dr_0(transpose(mean_center_0(C_rank_)*tmp_Q_),struct('rand_seed',1,'no_dims',nrank_CC,'theta',0.0));
opts_isosplit5 = struct('K_init',n_CCOV,'isocut_threshold',1.0);
label_C__{nrank_CC} = transpose(isosplit5(transpose(C_n_sub_),opts_isosplit5));
subplot(1,1,1); scatter(C_n_sub_(:,1),C_n_sub_(:,2),15,label_C__{nrank_CC}); colormap('lines');
%%%%%%%%;
% dexnb; %<-- no statistical significance !? ;
%%%%%%%%;
dir_base = '/data/rangan/dir_bcc/dir_jamison/dir_loader_cluster';
gamma = 0.00; n_shuffle = 64; p_set = 0.05; n_member_lob = 2;
gamma_d = floor(gamma*1000); str_g = sprintf('_g%.3d',gamma_d);
p_set_d = floor(p_set*1000); str_p = sprintf('_p%.3d',p_set_d);
str_nml = sprintf('_nml%d',n_member_lob);
str_xfix = sprintf('dexcluster_nonbinary_trace_ZRimax%s%s%s',str_g,str_p,str_nml);
prefix_base = sprintf('C_rank_%s',str_xfix); 
dir_out = []; E_array_base_ = transpose(C_rank_); E_array_r_ij_ = []; E_array_c_ij_ = [];
test_loader_dexcluster_nonbinary_trace_ZRimax_recursive_2(dir_base,dir_out,prefix_base,E_array_base_,E_array_r_ij_,E_array_c_ij_,gamma,n_shuffle,p_set,n_member_lob);
ZRimax_label_ = test_loader_dexcluster_nonbinary_trace_ZRimax_recursive_2(dir_base,dir_out,prefix_base,E_array_base_,E_array_r_ij_,E_array_c_ij_,gamma,n_shuffle,p_set,n_member_lob);
%%%%%%%%;
[~,tmp_CC_ij_] = sort(tmp_V_(:,1));
%subplot(1,2,1); plot(1:n_CCOV,diag(tmp_S_),'ko'); xlabel('rank'); ylabel('sigma'); title('spectrum of CC');
subplot(1,1,1); imagesc(CC_(tmp_CC_ij_,tmp_CC_ij_),[-1,+1]); colormap(colormap_beach()); 
set(gca,'XTick',1:n_CCOV,'XTickLabel',C_VariableName_LC_(tmp_CC_ij_)); xtickangle(90);
set(gca,'YTick',1:n_CCOV,'YTickLabel',C_VariableName_LC_(tmp_CC_ij_)); 
set(gca,'FontSize',6);
%%%%%%%%;
% Is any of this statistically significant? ;
%%%%%%%%;
n_iteration = 54; rng(255);
for niteration=1:n_iteration;
if (niteration==1); tmp_Q_ = eye(n_CCOV); else; [tmp_Q_,~] = qr(randn(n_CCOV)); end;
[tmp_U_,tmp_S_,tmp_V_] = svds(mean_center_0(C_rank_)*tmp_Q_,n_CCOV); %<-- around 11 large principal values. ;
subplot(6,9,niteration); scatter(tmp_V_(:,1),tmp_V_(:,2),4,'ko','filled');
set(gca,'XTick',[],'YTick',[]);
%title(sprintf('ni%d',niteration));
end;%for niteration=1:n_iteration;
figbig;
fname_base = sprintf('%s/dir_jpg/C_rank_scatter_FIGB',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
%%%%%%%%;
end;%if flag_plot;

%%%%%%%%;
% spectral clustering of covariates after mahalanobization via E_li16f_. ;
% Verdict: Covariates are significantly clustered with respect to transcript data. ;
%%%%%%%%;
flag_plot=0;
if flag_plot;
%%%%%%%%;
[tmp_UE_,tmp_SE_,tmp_VE_] = svds(E_li16f_,n_u);
%UEC_ = inv(tmp_SE_)*transpose(tmp_UE_)*mean_center_0(C_rank_);
UEC_ = inv(tmp_SE_)*transpose(tmp_UE_)*(C_rank_);
tmp_Q_ = eye(n_CCOV); %[tmp_Q_,~] = qr(randn(n_CCOV));
[tmp_UC_,tmp_SC_,tmp_VC_] = svds(UEC_*tmp_Q_,n_CCOV);
%%%%%%%%;
% spectral-->isosplit5;
%%%%%%%%;
n_rank_CC = 6;
for nrank_CC=1:n_rank_CC;
opts_isosplit5 = struct('K_init',200,'isocut_threshold',1.0);
label_C__{nrank_CC} = transpose(isosplit5(transpose(tmp_VC_(:,1:nrank_CC)*tmp_SC_(1:nrank_CC,1:nrank_CC)),opts_isosplit5));
end;%for nrank_CC=1:n_rank_CC;
for nrank_CC=1:n_rank_CC;
subplot(2,3,nrank_CC); scatter(tmp_VC_(:,1),tmp_VC_(:,2),15,label_C__{nrank_CC}); colormap('lines');
end;%for nrank_CC=1:n_rank_CC;
figbig;
fname_base = sprintf('%s/dir_jpg/UEC_spectral_scatter_FIGA',dir_trunk);
if (~exist(sprintf('%s.jpg',fname_base),'file'));
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
end;%if (~exist(sprintf('%s.jpg',fname_base),'file'));
%%%%%%%%;
% dexnb;
%%%%%%%%;
dir_base = '/data/rangan/dir_bcc/dir_jamison/dir_loader_cluster';
gamma = 0.00; n_shuffle = 64; p_set = 0.05; n_member_lob = 2;
gamma_d = floor(gamma*1000); str_g = sprintf('_g%.3d',gamma_d);
p_set_d = floor(p_set*1000); str_p = sprintf('_p%.3d',p_set_d);
str_nml = sprintf('_nml%d',n_member_lob);
str_xfix = sprintf('dexcluster_nonbinary_trace_ZRimax%s%s%s',str_g,str_p,str_nml);
prefix_base = sprintf('UEC_%s',str_xfix); 
dir_out = []; E_array_base_ = transpose(UEC_); E_array_r_ij_ = []; E_array_c_ij_ = [];
test_loader_dexcluster_nonbinary_trace_ZRimax_recursive_2(dir_base,dir_out,prefix_base,E_array_base_,E_array_r_ij_,E_array_c_ij_,gamma,n_shuffle,p_set,n_member_lob);
%ZRimax_label_ = test_loader_dexcluster_nonbinary_trace_ZRimax_recursive_2(dir_base,dir_out,prefix_base,E_array_base_,E_array_r_ij_,E_array_c_ij_,gamma,n_shuffle,p_set,n_member_lob);
p_set_ = [0.05]*0.5.^[0:5];
for np=1:length(p_set_);
tmp_p_set = p_set_(np);
tmp_ZRimax_label_ = test_loader_dexcluster_nonbinary_trace_ZRimax_recursive_2(dir_base,dir_out,prefix_base,E_array_base_,E_array_r_ij_,E_array_c_ij_,gamma,n_shuffle,tmp_p_set,n_member_lob);
subplot(2,3,np);
scatter(tmp_VC_(:,1),tmp_VC_(:,2),15,label_str_to_enum_0(tmp_ZRimax_label_),'filled');
colormap('lines');
title(sprintf('p %0.6f #=%d',tmp_p_set,length(unique(tmp_ZRimax_label_))));
axisnotick;
end;%for np=1:length(p_set_);
figbig;
fname_base = sprintf('%s/dir_jpg/UEC_dexnb_scatter_FIGA',dir_trunk);
if (~exist(sprintf('%s.jpg',fname_base),'file'));
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
end;%if (~exist(sprintf('%s.jpg',fname_base),'file'));
%%%%%%%%;
% Print output: ;
%%%%%%%%;
p_set = 0.05; 
[ZRimax_output_label_,ZRimax_lpFmax_label_] = test_loader_dexcluster_nonbinary_trace_ZRimax_recursive_2(dir_base,dir_out,prefix_base,E_array_base_,E_array_r_ij_,E_array_c_ij_,gamma,n_shuffle,p_set,n_member_lob);
ZRimax_enum_ = label_str_to_enum_0(ZRimax_output_label_);
n_QCluster = length(unique(ZRimax_enum_));
%%%%%%%%;
% plot QC-clusters in PCA-space;
%%%%%%%%;
clf;subplot(1,1,1);
colormap('lines');
hold on;
for nQCluster=1:n_QCluster;
tmp_ij_ = find(ZRimax_enum_==nQCluster);
scatter(tmp_VC_(tmp_ij_,1),tmp_VC_(tmp_ij_,2),65,ZRimax_enum_(tmp_ij_),'filled','MarkerEdgeColor','k');
end;%for nQCluster=1:n_QCluster;
title(sprintf('QC clusters (UEC)'));
axisnotick;
legend({'GCContent','UniqueDupeSeqs','CellClass, etc.','PhredScore STD','PhredScore AVG','MeanCoverage'},'Location','NorthWest');
fname_base = sprintf('%s/dir_jpg/UEC_dexnb_scatter_FIGA1',dir_trunk);
if (~exist(sprintf('%s.jpg',fname_base),'file'));
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
end;%if (~exist(sprintf('%s.jpg',fname_base),'file'));

disp(sprintf(' n_QCluster: %d',n_QCluster));
disp(sprintf(' %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'));
for nQCluster=1:n_QCluster;
disp(sprintf(' QCluster #%d:',nQCluster));
disp(sprintf('\t%s\n',C_VariableName_{find(ZRimax_enum_==nQCluster)}));
disp(sprintf(' %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'));
end;%for nQCluster=1:n_QCluster;
%%%%%%%%;
% identify and store QC-clusters. ;
%%%%%%%%;
for nQCluster=1:n_QCluster;
disp(sprintf(' %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'));
tmp_infix = sprintf('C_rank_cUE%d_',nQCluster);
C_rank_cUEx_ij_ = find(ZRimax_enum_==nQCluster);
disp(sprintf(' %% nQCluster %d/%d --> %s(%d)',nQCluster,n_QCluster,tmp_infix,numel(C_rank_cUEx_ij_)));
disp(sprintf(' QCluster #%d:',nQCluster));
disp(sprintf('\t%s\n',C_VariableName_{C_rank_cUEx_ij_}));
disp(sprintf(' %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'));
C_rank_cUEx_ = C_rank_(:,C_rank_cUEx_ij_);
n_CCOV_cUEx = size(C_rank_cUEx_,2);
tmp_ = C_rank_cUEx_;
fname_tsv = sprintf('%s/dir_mat/%s.tsv',dir_trunk,tmp_infix);
if (~exist(fname_tsv,'file')); 
disp(sprintf(' %% writing %s',fname_tsv));
save(fname_tsv,'tmp_','-ascii','-tabs');
end;%if (~exist(fname_tsv,'file')); 
end;%for nQCluster=1:n_QCluster;
%%%%%%%%;
Table_UEC_ = zeros(n_QCluster,n_Sample_Label);
for nQCluster=1:n_QCluster;
QCluster_ij_ = find(ZRimax_enum_==nQCluster);
n_l = length(QCluster_ij_);
for nl=1:n_l;
QC_ij = QCluster_ij_(nl);
ns=0;
for nSample_Label_A=1:n_Sample_Label;
for nSample_Label_B=1:n_Sample_Label;
tmp_lp = z_to_p_0(AB_.AB_C_absZ_(1+ns,QC_ij)); tmp_lp = -tmp_lp/(n_l*n_Sample_Label);
Table_UEC_(nQCluster,nSample_Label_A) = Table_UEC_(nQCluster,nSample_Label_A) + tmp_lp;
Table_UEC_(nQCluster,nSample_Label_B) = Table_UEC_(nQCluster,nSample_Label_B) + tmp_lp;
ns=ns+1;
end;%for nSample_Label_B=1:n_Sample_Label;
end;%for nSample_Label_A=1:n_Sample_Label;
end;%for nl=1:n_l;
end;%for nQCluster=1:n_QCluster;
subplot(1,1,1);
colormap(colormap_beach());
imagesc(Table_UEC_); colorbar; figbig;
set(gca,'XTick',1:n_Sample_Label,'XTickLabel',unique(str_Sample_Label_)); xtickangle(90);
set(gca,'YTick',1:n_QCluster,'YTickLabel',1:n_QCluster);
title('QC-cluster vs sample-cluster -log(p-value)');
fname_base = sprintf('%s/dir_jpg/Table_UEC_dexnb_FIGB',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
%%%%%%%%;
% tsne00-->isosplit5;
%%%%%%%%;
tmp_Q_ = eye(n_CCOV); %[tmp_Q_,~] = qr(randn(n_CCOV));
UEC_sub_ = fast_tsne_dr_0(transpose(UEC_*tmp_Q_),struct('rand_seed',1,'no_dims',2,'theta',0.0));
opts_isosplit5 = struct('K_init',n_CCOV,'isocut_threshold',1.0);
label_UEC_ = transpose(isosplit5(transpose(UEC_sub_),opts_isosplit5));
subplot(1,1,1); scatter(UEC_sub_(:,1),UEC_sub_(:,2),15,label_UEC_); colormap('lines');
fname_base = sprintf('%s/dir_jpg/UEC_umap00_scatter_FIGA',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
%%%%%%%%;
% tsne50-->isosplit5;
%%%%%%%%;
tmp_Q_ = eye(n_CCOV); %[tmp_Q_,~] = qr(randn(n_CCOV));
UEC_sub_ = fast_tsne_dr_0(transpose(UEC_*tmp_Q_),struct('rand_seed',1,'no_dims',2,'theta',0.5));
opts_isosplit5 = struct('K_init',n_CCOV,'isocut_threshold',1.0);
label_UEC_ = transpose(isosplit5(transpose(UEC_sub_),opts_isosplit5));
subplot(1,1,1); scatter(UEC_sub_(:,1),UEC_sub_(:,2),15,label_UEC_); colormap('lines');
fname_base = sprintf('%s/dir_jpg/UEC_umap50_scatter_FIGA',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
%%%%%%%%;
end;%if flag_plot;

%%%%%%%%;
% spectral clustering of covariates after mahalanobization via I_li16f_. ;
% Verdict: ? ;
%%%%%%%%;
flag_plot=0;
if flag_plot;
%%%%%%%%;
[tmp_UI_,tmp_SI_,tmp_VI_] = svds(I_li16f_,n_u);
%UIC_ = inv(tmp_SI_)*transpose(tmp_UI_)*mean_center_0(C_rank_);
UIC_ = inv(tmp_SI_)*transpose(tmp_UI_)*(C_rank_);
tmp_Q_ = eye(n_CCOV); %[tmp_Q_,~] = qr(randn(n_CCOV));
[tmp_UC_,tmp_SC_,tmp_VC_] = svds(UIC_*tmp_Q_,n_CCOV);
%%%%%%%%;
% spectral-->isosplit5;
%%%%%%%%;
n_rank_CC = 6;
for nrank_CC=1:n_rank_CC;
opts_isosplit5 = struct('K_init',200,'isocut_threshold',1.0);
label_C__{nrank_CC} = transpose(isosplit5(transpose(tmp_VC_(:,1:nrank_CC)*tmp_SC_(1:nrank_CC,1:nrank_CC)),opts_isosplit5));
end;%for nrank_CC=1:n_rank_CC;
for nrank_CC=1:n_rank_CC;
subplot(2,3,nrank_CC); scatter(tmp_VC_(:,1),tmp_VC_(:,2),15,label_C__{nrank_CC}); colormap('lines');
end;%for nrank_CC=1:n_rank_CC;
figbig;
fname_base = sprintf('%s/dir_jpg/UIC_spectral_scatter_FIGA',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
%%%%%%%%;
% tsne00-->isosplit5;
%%%%%%%%;
tmp_Q_ = eye(n_CCOV); %[tmp_Q_,~] = qr(randn(n_CCOV));
UIC_sub_ = fast_tsne_dr_0(transpose(UIC_*tmp_Q_),struct('rand_seed',1,'no_dims',2,'theta',0.0));
opts_isosplit5 = struct('K_init',n_CCOV,'isocut_threshold',1.0);
label_UIC_ = transpose(isosplit5(transpose(UIC_sub_),opts_isosplit5));
subplot(1,1,1); scatter(UIC_sub_(:,1),UIC_sub_(:,2),15,label_UIC_); colormap('lines');
fname_base = sprintf('%s/dir_jpg/UIC_umap00_scatter_FIGA',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
%%%%%%%%;
% tsne50-->isosplit5;
%%%%%%%%;
tmp_Q_ = eye(n_CCOV); %[tmp_Q_,~] = qr(randn(n_CCOV));
UIC_sub_ = fast_tsne_dr_0(transpose(UIC_*tmp_Q_),struct('rand_seed',1,'no_dims',2,'theta',0.5));
opts_isosplit5 = struct('K_init',n_CCOV,'isocut_threshold',1.0);
label_UIC_ = transpose(isosplit5(transpose(UIC_sub_),opts_isosplit5));
subplot(1,1,1); scatter(UIC_sub_(:,1),UIC_sub_(:,2),15,label_UIC_); colormap('lines');
fname_base = sprintf('%s/dir_jpg/UIC_umap50_scatter_FIGA',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
%%%%%%%%;
% dexnb; %<-- not sure about statistical significance. ;
%%%%%%%%;
dir_base = '/data/rangan/dir_bcc/dir_jamison/dir_loader_cluster';
gamma = 0.00; n_shuffle = 64; p_set = 0.05; n_member_lob = 2;
gamma_d = floor(gamma*1000); str_g = sprintf('_g%.3d',gamma_d);
p_set_d = floor(p_set*1000); str_p = sprintf('_p%.3d',p_set_d);
str_nml = sprintf('_nml%d',n_member_lob);
str_xfix = sprintf('dexcluster_nonbinary_trace_ZRimax%s%s%s',str_g,str_p,str_nml);
prefix_base = sprintf('UIC_%s',str_xfix); 
dir_out = []; I_array_base_ = transpose(UIC_); I_array_r_ij_ = []; I_array_c_ij_ = [];
test_loader_dexcluster_nonbinary_trace_ZRimax_recursive_2(dir_base,dir_out,prefix_base,I_array_base_,I_array_r_ij_,I_array_c_ij_,gamma,n_shuffle,p_set,n_member_lob);
%ZRimax_label_ = test_loader_dexcluster_nonbinary_trace_ZRimax_recursive_2(dir_base,dir_out,prefix_base,I_array_base_,I_array_r_ij_,I_array_c_ij_,gamma,n_shuffle,p_set,n_member_lob);
p_set_ = [0.05]*0.5.^[0:3];
for np=1:length(p_set_);
tmp_p_set = p_set_(np);
tmp_ZRimax_label_ = test_loader_dexcluster_nonbinary_trace_ZRimax_recursive_2(dir_base,dir_out,prefix_base,I_array_base_,I_array_r_ij_,I_array_c_ij_,gamma,n_shuffle,tmp_p_set,n_member_lob);
subplot(2,2,np);
scatter(tmp_VC_(:,1),tmp_VC_(:,2),15,label_str_to_enum_0(tmp_ZRimax_label_));
colormap('lines');
title(sprintf('p %0.6f',tmp_p_set));
axisnotick;
end;%for np=1:length(p_set_);
figbig;
fname_base = sprintf('%s/dir_jpg/UIC_dexnb_scatter_FIGA',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
%%%%%%%%;
end;%if flag_plot;

%%%%%%%%;
% spectral clustering of covariates after mahalanobization via EI_li16f_. ;
% Verdict: ? ;
%%%%%%%%;
flag_plot=0;
if flag_plot;
%%%%%%%%;
[tmp_UEI_,tmp_SEI_,tmp_VEI_] = svds([E_li16f_ , I_li16f_],n_u);
%UEIC_ = inv(tmp_SEI_)*transpose(tmp_UEI_)*mean_center_0(C_rank_);
UEIC_ = inv(tmp_SEI_)*transpose(tmp_UEI_)*(C_rank_);
tmp_Q_ = eye(n_CCOV); %[tmp_Q_,~] = qr(randn(n_CCOV));
[tmp_UC_,tmp_SC_,tmp_VC_] = svds(UEIC_*tmp_Q_,n_CCOV);
%%%%%%%%;
% spectral-->isosplit5;
%%%%%%%%;
n_rank_CC = 6;
for nrank_CC=1:n_rank_CC;
opts_isosplit5 = struct('K_init',200,'isocut_threshold',1.0);
label_C__{nrank_CC} = transpose(isosplit5(transpose(tmp_VC_(:,1:nrank_CC)*tmp_SC_(1:nrank_CC,1:nrank_CC)),opts_isosplit5));
end;%for nrank_CC=1:n_rank_CC;
for nrank_CC=1:n_rank_CC;
subplot(2,3,nrank_CC); scatter(tmp_VC_(:,1),tmp_VC_(:,2),15,label_C__{nrank_CC}); colormap('lines');
end;%for nrank_CC=1:n_rank_CC;
figbig;
fname_base = sprintf('%s/dir_jpg/UEIC_spectral_scatter_FIGA',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
%%%%%%%%;
% tsne00-->isosplit5;
%%%%%%%%;
tmp_Q_ = eye(n_CCOV); %[tmp_Q_,~] = qr(randn(n_CCOV));
UEIC_sub_ = fast_tsne_dr_0(transpose(UEIC_*tmp_Q_),struct('rand_seed',1,'no_dims',2,'theta',0.0));
opts_isosplit5 = struct('K_init',n_CCOV,'isocut_threshold',1.0);
label_UEIC_ = transpose(isosplit5(transpose(UEIC_sub_),opts_isosplit5));
subplot(1,1,1); scatter(UEIC_sub_(:,1),UEIC_sub_(:,2),15,label_UEIC_); colormap('lines');
fname_base = sprintf('%s/dir_jpg/UEIC_umap00_scatter_FIGA',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
%%%%%%%%;
% tsne50-->isosplit5;
%%%%%%%%;
tmp_Q_ = eye(n_CCOV); %[tmp_Q_,~] = qr(randn(n_CCOV));
UEIC_sub_ = fast_tsne_dr_0(transpose(UEIC_*tmp_Q_),struct('rand_seed',1,'no_dims',2,'theta',0.5));
opts_isosplit5 = struct('K_init',n_CCOV,'isocut_threshold',1.0);
label_UEIC_ = transpose(isosplit5(transpose(UEIC_sub_),opts_isosplit5));
subplot(1,1,1); scatter(UEIC_sub_(:,1),UEIC_sub_(:,2),15,label_UEIC_); colormap('lines');
fname_base = sprintf('%s/dir_jpg/UEIC_umap50_scatter_FIGA',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
%%%%%%%%;
% dexnb; %<-- not sure about statistical significance. ;
%%%%%%%%;
dir_base = '/data/rangan/dir_bcc/dir_jamison/dir_loader_cluster';
gamma = 0.00; n_shuffle = 64; p_set = 0.05; n_member_lob = 2;
gamma_d = floor(gamma*1000); str_g = sprintf('_g%.3d',gamma_d);
p_set_d = floor(p_set*1000); str_p = sprintf('_p%.3d',p_set_d);
str_nml = sprintf('_nml%d',n_member_lob);
str_xfix = sprintf('dexcluster_nonbinary_trace_ZRimax%s%s%s',str_g,str_p,str_nml);
prefix_base = sprintf('UEIC_%s',str_xfix); 
dir_out = []; EI_array_base_ = transpose(UEIC_); EI_array_r_ij_ = []; EI_array_c_ij_ = [];
test_loader_dexcluster_nonbinary_trace_ZRimax_recursive_2(dir_base,dir_out,prefix_base,EI_array_base_,EI_array_r_ij_,EI_array_c_ij_,gamma,n_shuffle,p_set,n_member_lob);
%ZRimax_label_ = test_loader_dexcluster_nonbinary_trace_ZRimax_recursive_2(dir_base,dir_out,prefix_base,EI_array_base_,EI_array_r_ij_,EI_array_c_ij_,gamma,n_shuffle,p_set,n_member_lob);
p_set_ = [0.05]*0.5.^[0:3];
for np=1:length(p_set_);
tmp_p_set = p_set_(np);
tmp_ZRimax_label_ = test_loader_dexcluster_nonbinary_trace_ZRimax_recursive_2(dir_base,dir_out,prefix_base,EI_array_base_,EI_array_r_ij_,EI_array_c_ij_,gamma,n_shuffle,tmp_p_set,n_member_lob);
subplot(2,2,np);
scatter(tmp_VC_(:,1),tmp_VC_(:,2),15,label_str_to_enum_0(tmp_ZRimax_label_));
colormap('lines');
title(sprintf('p %0.6f',tmp_p_set));
axisnotick;
end;%for np=1:length(p_set_);
figbig;
fname_base = sprintf('%s/dir_jpg/UEIC_dexnb_scatter_FIGA',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
%%%%%%%%;
end;%if flag_plot;

%%%%%%%%;
% spectral clustering of covariates after accounting for both E_li16f_ as well as AIBS-clusters. ;
% Verdict: ? Not significant? Might want to try all dimensions? ;
%%%%%%%%;
flag_plot=0;
if flag_plot;
Sample_Label_enum_ = label_str_to_enum_0(str_Sample_Label_); 
alpha_ = 50; % alpha_ = linspace(40,54,15); %<-- alpha 50 seems reasonable. ;
[kld___,n_rank_,kld__,DVS__,SAD2__] = SampleSVD_5(E_li16f_,Sample_Label_enum_,alpha_);
kld_50__ = reshape(median(kld___(:,1:n_rank_(1),:),1),n_rank_(1),length(alpha_));
%plot(log2(1:n_rank_(1)),-kld_50__(1:n_rank_(1))./transpose(1:n_rank_(1))); %<-- see that n_rank_use = 34. ;
[~,n_rank_use] = max(-kld_50__(1:n_rank_(1))./transpose(1:n_rank_(1)));
disp(sprintf(' %% n_rank_use %d',n_rank_use));
DVSC_ = pinv(DVS__{1}(:,1:n_rank_use),1e-6*norm(DVS__{1}(:,1:n_rank_use),2))*(C_rank_);
tmp_Q_ = eye(n_CCOV); %[tmp_Q_,~] = qr(randn(n_CCOV));
[tmp_UC_,tmp_SC_,tmp_VC_] = svds(DVSC_*tmp_Q_,n_CCOV);
%%%%%%%%;
% spectral-->isosplit5;
%%%%%%%%;
n_rank_CC = 6;
for nrank_CC=1:n_rank_CC;
opts_isosplit5 = struct('K_init',200,'isocut_threshold',1.0);
label_C__{nrank_CC} = transpose(isosplit5(transpose(tmp_VC_(:,1:nrank_CC)*tmp_SC_(1:nrank_CC,1:nrank_CC)),opts_isosplit5));
end;%for nrank_CC=1:n_rank_CC;
for nrank_CC=1:n_rank_CC;
subplot(2,3,nrank_CC); scatter(tmp_VC_(:,1),tmp_VC_(:,2),15,label_C__{nrank_CC}); colormap('lines');
end;%for nrank_CC=1:n_rank_CC;
figbig;
fname_base = sprintf('%s/dir_jpg/DVSC_spectral_scatter_FIGA',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
%%%%%%%%;
% tsne00-->isosplit5;
%%%%%%%%;
tmp_Q_ = eye(n_CCOV); %[tmp_Q_,~] = qr(randn(n_CCOV));
DVSC_sub_ = fast_tsne_dr_0(transpose(DVSC_*tmp_Q_),struct('rand_seed',1,'no_dims',2,'theta',0.0));
opts_isosplit5 = struct('K_init',n_CCOV,'isocut_threshold',1.0);
label_DVSC_ = transpose(isosplit5(transpose(DVSC_sub_),opts_isosplit5));
subplot(1,1,1); scatter(DVSC_sub_(:,1),DVSC_sub_(:,2),15,label_DVSC_); colormap('lines');
fname_base = sprintf('%s/dir_jpg/DVSC_umap00_scatter_FIGA',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
%%%%%%%%;
% tsne50-->isosplit5;
%%%%%%%%;
tmp_Q_ = eye(n_CCOV); %[tmp_Q_,~] = qr(randn(n_CCOV));
DVSC_sub_ = fast_tsne_dr_0(transpose(DVSC_*tmp_Q_),struct('rand_seed',1,'no_dims',2,'theta',0.5));
opts_isosplit5 = struct('K_init',n_CCOV,'isocut_threshold',1.0);
label_DVSC_ = transpose(isosplit5(transpose(DVSC_sub_),opts_isosplit5));
subplot(1,1,1); scatter(DVSC_sub_(:,1),DVSC_sub_(:,2),15,label_DVSC_); colormap('lines');
fname_base = sprintf('%s/dir_jpg/DVSC_umap50_scatter_FIGA',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
%%%%%%%%;
% dexnb; %<-- again, no statistical significance. ;
%%%%%%%%;
dir_base = '/data/rangan/dir_bcc/dir_jamison/dir_loader_cluster';
gamma = 0.00; n_shuffle = 64; p_set = 0.05; n_member_lob = 2;
gamma_d = floor(gamma*1000); str_g = sprintf('_g%.3d',gamma_d);
p_set_d = floor(p_set*1000); str_p = sprintf('_p%.3d',p_set_d);
str_nml = sprintf('_nml%d',n_member_lob);
str_xfix = sprintf('dexcluster_nonbinary_trace_ZRimax%s%s%s',str_g,str_p,str_nml);
prefix_base = sprintf('DVSC_%s',str_xfix); 
dir_out = []; EI_array_base_ = transpose(DVSC_); EI_array_r_ij_ = []; EI_array_c_ij_ = [];
test_loader_dexcluster_nonbinary_trace_ZRimax_recursive_2(dir_base,dir_out,prefix_base,EI_array_base_,EI_array_r_ij_,EI_array_c_ij_,gamma,n_shuffle,p_set,n_member_lob);
%ZRimax_label_ = test_loader_dexcluster_nonbinary_trace_ZRimax_recursive_2(dir_base,dir_out,prefix_base,EI_array_base_,EI_array_r_ij_,EI_array_c_ij_,gamma,n_shuffle,p_set,n_member_lob);
p_set_ = [0.05]*0.5.^[0:3];
for np=1:length(p_set_);
tmp_p_set = p_set_(np);
tmp_ZRimax_label_ = test_loader_dexcluster_nonbinary_trace_ZRimax_recursive_2(dir_base,dir_out,prefix_base,EI_array_base_,EI_array_r_ij_,EI_array_c_ij_,gamma,n_shuffle,tmp_p_set,n_member_lob);
subplot(2,2,np);
scatter(tmp_VC_(:,1),tmp_VC_(:,2),15,label_str_to_enum_0(tmp_ZRimax_label_));
colormap('lines');
title(sprintf('p %0.6f',tmp_p_set));
axisnotick;
end;%for np=1:length(p_set_);
figbig;
fname_base = sprintf('%s/dir_jpg/DVSC_dexnb_scatter_FIGA',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
%%%%%%%%;
end;%if flag_plot;

%%%%%%%%;
tmp_ = C_rank_;
fname_tsv = sprintf('%s/dir_mat/C_rank_.tsv',dir_trunk);
if (~exist(fname_tsv,'file')); 
disp(sprintf(' %% writing %s',fname_tsv));
save(fname_tsv,'tmp_','-ascii','-tabs');
end;%if (~exist(fname_tsv,'file')); 
%%%%%%%%;
C_rank_cUE1_ = textread(sprintf('%s/dir_mat/C_rank_cUE1_.tsv',dir_trunk)); C_rank_cUE1_ = C_rank_cUE1_(:,1:end-1); n_CC_V_cUE1_ = size(C_rank_cUE1_,2);
C_rank_cUE2_ = textread(sprintf('%s/dir_mat/C_rank_cUE2_.tsv',dir_trunk)); C_rank_cUE2_ = C_rank_cUE2_(:,1:end-1); n_CC_V_cUE2_ = size(C_rank_cUE2_,2);
C_rank_cUE3_ = textread(sprintf('%s/dir_mat/C_rank_cUE3_.tsv',dir_trunk)); C_rank_cUE3_ = C_rank_cUE3_(:,1:end-1); n_CC_V_cUE3_ = size(C_rank_cUE3_,2);
C_rank_cUE4_ = textread(sprintf('%s/dir_mat/C_rank_cUE4_.tsv',dir_trunk)); C_rank_cUE4_ = C_rank_cUE4_(:,1:end-1); n_CC_V_cUE4_ = size(C_rank_cUE4_,2);
C_rank_cUE5_ = textread(sprintf('%s/dir_mat/C_rank_cUE5_.tsv',dir_trunk)); C_rank_cUE5_ = C_rank_cUE5_(:,1:end-1); n_CC_V_cUE5_ = size(C_rank_cUE5_,2);
C_rank_cUE6_ = textread(sprintf('%s/dir_mat/C_rank_cUE6_.tsv',dir_trunk)); C_rank_cUE6_ = C_rank_cUE6_(:,1:end-1); n_CC_V_cUE6_ = size(C_rank_cUE6_,2);
%%%%%%%%;
C_rank_cPhr_ij_ = []; 
for nc=1:n_CCOV; 
tmp_str_ = C_VariableName_{nc}; 
if (~isempty(strfind(tmp_str_,'Phred'))); C_rank_cPhr_ij_ = [C_rank_cPhr_ij_;nc]; end; 
end;%for nc=1:n_CCOV; 
C_rank_cPhr_ = C_rank_(:,C_rank_cPhr_ij_); n_CCOV_cPhr = size(C_rank_cPhr_,2);
n_CCOV_cPhr = size(C_rank_cPhr_,2);
%%%%%%%%;
tmp_ = C_rank_cPhr_;
fname_tsv = sprintf('%s/dir_mat/C_rank_cPhr_.tsv',dir_trunk);
if (~exist(fname_tsv,'file')); 
disp(sprintf(' %% writing %s',fname_tsv));
save(fname_tsv,'tmp_','-ascii','-tabs');
end;%if (~exist(fname_tsv,'file')); 
%%%%%%%%;
C_rank_c127_ = C_rank_; n_CCOV_c127 = size(C_rank_c127_,2);
%%%%%%%%;
tmp_ = C_rank_c127_;
fname_tsv = sprintf('%s/dir_mat/C_rank_c127_.tsv',dir_trunk);
if (~exist(fname_tsv,'file')); 
disp(sprintf(' %% writing %s',fname_tsv));
save(fname_tsv,'tmp_','-ascii','-tabs');
end;%if (~exist(fname_tsv,'file')); 
%%%%%%%%;
C_rank_c012_ij_ = [32;54;48;71;46;29;53;115;95;63;123;39]; %<-- top 12 most relelevant covariates listed in AIBS_. ;
C_rank_c012_ = C_rank_(:,C_rank_c012_ij_); n_CCOV_c012 = size(C_rank_c012_,2);
%%%%%%%%;
tmp_ = C_rank_c012_;
fname_tsv = sprintf('%s/dir_mat/C_rank_c012_.tsv',dir_trunk);
if (~exist(fname_tsv,'file')); 
disp(sprintf(' %% writing %s',fname_tsv));
save(fname_tsv,'tmp_','-ascii','-tabs');
end;%if (~exist(fname_tsv,'file')); 
%%%%%%%%;
C_rank_cRRR_ij_ = [43;110;30;47;48;67;69;114;117;121;102;113]; %<-- results from reduced-rank-regression. ;
C_rank_cRRR_ = C_rank_(:,C_rank_cRRR_ij_); n_CCOV_cRRR = size(C_rank_cRRR_,2);
%%%%%%%%;
tmp_ = C_rank_cRRR_;
fname_tsv = sprintf('%s/dir_mat/C_rank_cRRR_.tsv',dir_trunk);
if (~exist(fname_tsv,'file')); 
disp(sprintf(' %% writing %s',fname_tsv));
save(fname_tsv,'tmp_','-ascii','-tabs');
end;%if (~exist(fname_tsv,'file')); 

%%%%%%%%;
fname_tsv = sprintf('%s/dir_mat/u_ID_sub_.nsv',dir_trunk);
fp=fopen(fname_tsv,'w');
fprintf(fp,'%s\n',u_ID_{1:end});
fclose(fp);
%%%%%%%%;
fname_tsv = sprintf('%s/dir_mat/str_Sample_Label_sub_.nsv',dir_trunk);
fp=fopen(fname_tsv,'w');
fprintf(fp,'%s\n',str_Sample_Label_{1:end});
fclose(fp);
fname_tsv = sprintf('%s/dir_mat/C_VariableName_.tsv',dir_trunk);
fp=fopen(fname_tsv,'w');
fprintf(fp,'%s\t',C_VariableName_{1:end});
fclose(fp);
fname_tsv = sprintf('%s/dir_mat/C_VariableName_.nsv',dir_trunk);
fp=fopen(fname_tsv,'w');
fprintf(fp,'%s\n',C_VariableName_{1:end});
fclose(fp);
%%%%%%%%;
fname_tsv = sprintf('%s/dir_mat/E_GeneName_sub_.nsv',dir_trunk);
fp=fopen(fname_tsv,'w');
fprintf(fp,'%s\n',E_VariableName_sub_{1:end});
fclose(fp);
%%%%%%%%;
fname_tsv = sprintf('%s/dir_mat/I_GeneName_sub_.nsv',dir_trunk);
fp=fopen(fname_tsv,'w');
fprintf(fp,'%s\n',I_VariableName_sub_{1:end});
fclose(fp);
%%%%%%%%;

flag_correlation=0;
if flag_correlation;
if flag_E;
%%%%%%%%;
% Now measure correlation across samples of E_ and C_. ;
%%%%%%%%;
tmp_rank_avg_ = mean(C_rank_,1); tmp_rank_std_ = max(1,std(C_rank_,1,1));
tmp_C_ = (C_rank_ - repmat(tmp_rank_avg_,n_u,1))./repmat(tmp_rank_std_,n_u,1);
tmp_rank_avg_ = mean(E_li16f_rankn_,1); tmp_rank_std_ = max(1,std(E_li16f_rankn_,1,1));
tmp_E_ = (E_li16f_rankn_ - repmat(tmp_rank_avg_,n_u,1))./repmat(tmp_rank_std_,n_u,1);
clear tmp_rank_avg_ tmp_rank_std_;
CtEn_rank_ = transpose(tmp_C_)*tmp_E_ / n_u;
[tmp_U_,tmp_S_,tmp_V_] = svds(CtEn_rank_,1); [~,CtEn_rank_U_ij_] = sort(tmp_U_,'descend'); [~,CtEn_rank_V_ij_] = sort(tmp_V_,'descend');
CtEn_rank_ori_ = CtEn_rank_(CtEn_rank_U_ij_,CtEn_rank_V_ij_);
clear CtEn_rank_ tmp_U_ tmp_S_ tmp_V_ ;
flag_disp=1;
if flag_disp;
clf;
colormap(colormap_beach()); 
imagesc(transpose(CtEn_rank_ori_),[-1,+1]); 
set(gca,'XTick',1:n_CCOV,'XTickLabel',C_VariableName_LC_(CtEn_rank_U_ij_),'TickLabelInterpreter','none'); xtickangle(90);
set(gca,'FontSize',7);
xlabel('covariates'); ylabel('genes'); title('Correlation between Genes and Covariates');
set(gcf,'Position',1+[0,0,1024*2,1024]);
colorbar;
fname_base = sprintf('%s/dir_jpg/CtEn_sub_ori',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
end;%if flag_disp;
n_iteration  = 64;
CtEn_rank_avg_ = zeros(n_CCOV,n_E_GENE);
CtEn_rank_std_ = zeros(n_CCOV,n_E_GENE);
for niteration=1:n_iteration;
if (mod(niteration,10)==0); disp(sprintf(' %% niteration %d/%d',niteration,n_iteration)); end;
[tmp_Q_,~] = qr(randn(n_u));
tmp_CtEn_rank_ = transpose(tmp_C_)*tmp_Q_*tmp_E_ / n_u; clear tmp_Q_;
[tmp_U_,tmp_S_,tmp_V_] = svds(tmp_CtEn_rank_,1); [~,tmp_CtEn_rank_U_ij_] = sort(tmp_U_,'descend'); [~,tmp_CtEn_rank_V_ij_] = sort(tmp_V_,'descend');
CtEn_rank_avg_ = CtEn_rank_avg_ + tmp_CtEn_rank_(tmp_CtEn_rank_U_ij_,tmp_CtEn_rank_V_ij_);
CtEn_rank_std_ = CtEn_rank_std_ + tmp_CtEn_rank_(tmp_CtEn_rank_U_ij_,tmp_CtEn_rank_V_ij_).^2;
clear tmp_CtEn_rank_ tmp_U_ tmp_S_ tmp_V_ tmp_CtEn_rank_U_ij_ tmp_CtEn_rank_V_ij_ ;
end;%for niteration=1:n_iteration;
CtEn_rank_avg_ = CtEn_rank_avg_/n_iteration;
CtEn_rank_std_ = sqrt(CtEn_rank_std_/n_iteration - CtEn_rank_avg_.^2);
CtEn_rank_Z_ = ( CtEn_rank_ori_ - CtEn_rank_avg_ ) ./ CtEn_rank_std_ ;
%CtEn_rank_p_ = 0.5 * erfc( CtEn_rank_Z_ / sqrt(2) ) ;
CtEn_rank_p_ = 1.0 * erfc( abs(CtEn_rank_Z_) / sqrt(2) ) ; %<-- two sided. ;
clear tmp_C_ tmp_E_;
flag_disp=1;
if flag_disp;
clf;
colormap(colormap_beach()); 
imagesc(transpose(-log10(CtEn_rank_p_)),[0,+15]); 
set(gca,'XTick',1:n_CCOV,'XTickLabel',C_VariableName_LC_(CtEn_rank_U_ij_),'TickLabelInterpreter','none'); xtickangle(90);
set(gca,'FontSize',7);
xlabel('covariates'); ylabel('genes'); title('log10(p-value) of Correlation between Genes and Covariates');
set(gcf,'Position',1+[0,0,1024*2,1024]);
colorbar;
fname_base = sprintf('%s/dir_jpg/CtEn_sub_p',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
end;%if flag_disp;
end;%if flag_E;
end;%if flag_correlation;

if flag_correlation;
if flag_I;
%%%%%%%%;
% Now measure correlation across samples of I_ and C_. ;
%%%%%%%%;
tmp_rank_avg_ = mean(C_rank_,1); tmp_rank_std_ = max(1,std(C_rank_,1,1));
tmp_C_ = (C_rank_ - repmat(tmp_rank_avg_,n_u,1))./repmat(tmp_rank_std_,n_u,1);
tmp_rank_avg_ = mean(I_li16f_rankn_,1); tmp_rank_std_ = max(1,std(I_li16f_rankn_,1,1));
tmp_I_ = (I_li16f_rankn_ - repmat(tmp_rank_avg_,n_u,1))./repmat(tmp_rank_std_,n_u,1);
clear tmp_rank_avg_ tmp_rank_std_;
CtIn_rank_ = transpose(tmp_C_)*tmp_I_ / n_u;
[tmp_U_,tmp_S_,tmp_V_] = svds(CtIn_rank_,1); [~,CtIn_rank_U_ij_] = sort(tmp_U_,'descend'); [~,CtIn_rank_V_ij_] = sort(tmp_V_,'descend');
CtIn_rank_ori_ = CtIn_rank_(CtIn_rank_U_ij_,CtIn_rank_V_ij_);
clear CtIn_rank_ tmp_U_ tmp_S_ tmp_V_ ;
flag_disp=1;
if flag_disp;
clf;
colormap(colormap_beach()); 
imagesc(transpose(CtIn_rank_ori_),[-1,+1]); 
set(gca,'XTick',1:n_CCOV,'XTickLabel',C_VariableName_LC_(CtIn_rank_U_ij_),'TickLabelInterpreter','none'); xtickangle(90);
set(gca,'FontSize',7);
xlabel('covariates'); ylabel('genes'); title('Correlation between Genes and Covariates');
set(gcf,'Position',1+[0,0,1024*2,1024]);
colorbar;
fname_base = sprintf('%s/dir_jpg/CtIn_sub_ori',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
end;%if flag_disp;
n_iteration  = 64;
CtIn_rank_avg_ = zeros(n_CCOV,n_I_GENE);
CtIn_rank_std_ = zeros(n_CCOV,n_I_GENE);
for niteration=1:n_iteration;
if (mod(niteration,10)==0); disp(sprintf(' %% niteration %d/%d',niteration,n_iteration)); end;
[tmp_Q_,~] = qr(randn(n_u));
tmp_CtIn_rank_ = transpose(tmp_C_)*tmp_Q_*tmp_I_ / n_u; clear tmp_Q_;
[tmp_U_,tmp_S_,tmp_V_] = svds(tmp_CtIn_rank_,1); [~,tmp_CtIn_rank_U_ij_] = sort(tmp_U_,'descend'); [~,tmp_CtIn_rank_V_ij_] = sort(tmp_V_,'descend');
CtIn_rank_avg_ = CtIn_rank_avg_ + tmp_CtIn_rank_(tmp_CtIn_rank_U_ij_,tmp_CtIn_rank_V_ij_);
CtIn_rank_std_ = CtIn_rank_std_ + tmp_CtIn_rank_(tmp_CtIn_rank_U_ij_,tmp_CtIn_rank_V_ij_).^2;
clear tmp_CtIn_rank_ tmp_U_ tmp_S_ tmp_V_ tmp_CtIn_rank_U_ij_ tmp_CtIn_rank_V_ij_ ;
end;%for niteration=1:n_iteration;
CtIn_rank_avg_ = CtIn_rank_avg_/n_iteration;
CtIn_rank_std_ = sqrt(CtIn_rank_std_/n_iteration - CtIn_rank_avg_.^2);
CtIn_rank_Z_ = ( CtIn_rank_ori_ - CtIn_rank_avg_ ) ./ CtIn_rank_std_ ;
%CtIn_rank_p_ = 0.5 * erfc( CtIn_rank_Z_ / sqrt(2) ) ;
CtIn_rank_p_ = 1.0 * erfc( abs(CtIn_rank_Z_) / sqrt(2) ) ; %<-- two sided. ;
clear tmp_C_ tmp_I_;
flag_disp=1;
if flag_disp;
clf;
colormap(colormap_beach()); 
imagesc(transpose(-log10(CtIn_rank_p_)),[0,+15]); 
set(gca,'XTick',1:n_CCOV,'XTickLabel',C_VariableName_LC_(CtIn_rank_U_ij_),'TickLabelInterpreter','none'); xtickangle(90);
set(gca,'FontSize',7);
xlabel('covariates'); ylabel('genes'); title('log10(p-value) of Correlation between Genes and Covariates');
set(gcf,'Position',1+[0,0,1024*2,1024]);
colorbar;
fname_base = sprintf('%s/dir_jpg/CtIn_sub_p',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
end;%if flag_disp;
end;%if flag_I;
end;%if flag_correlation;

if flag_correlation;
flag_disp=1;
if flag_disp;
clf;
n_bin = 32;
%%%%%%%%;
if flag_E;
subplot(2,4,1); hold on;
tmp_ng_ = 1:n_E_GENE;
%plot(tmp_ng_,log10(1+E_length_(E_col_val_(CtEn_rank_V_ij_))),'r.');
tmp_ij_ = find(E_length_(E_col_val_(CtEn_rank_V_ij_))>0);
plot(tmp_ng_(tmp_ij_),log10(1+E_length_(E_col_val_(CtEn_rank_V_ij_(tmp_ij_)))),'ro');
xlabel('gene-index (matching CtEn_p order)'); xlim([0,n_E_GENE]); tmp_yl_ = ylim();
ylabel('log10(gene length)');
title('E gene length vs gene ordering');
subplot(2,4,2); hold on;
tmp_ng_ = 1:n_E_GENE;
tmp_ij_ = find(E_length_(E_col_val_(CtEn_rank_V_ij_))>0);
colormap(colormap_beach());
imagesc(log10(1+hist2d_0(tmp_ng_(tmp_ij_),log10(1+E_length_(E_col_val_(CtEn_rank_V_ij_(tmp_ij_)))),n_bin,n_bin,[1,n_E_GENE],tmp_yl_)));
colorbar();
xlabel('gene-index (matching CtEn_p order)'); ylabel('log10(gene length)');
xlim([1,n_bin]); ylim([1,n_bin]);
set(gca,'XTick',[],'XTickLabel',[],'YTick',[],'YTickLabel',[]);
title('E gene length vs gene ordering');
end;%if flag_E;
%%%%%%%%;
if flag_I;
subplot(2,4,3); hold on;
tmp_ng_ = 1:n_I_GENE;
%plot(tmp_ng_,log10(1+I_length_(I_col_val_(CtIn_rank_V_ij_))),'b.');
tmp_ij_ = find(I_length_(I_col_val_(CtIn_rank_V_ij_))>0);
plot(tmp_ng_(tmp_ij_),log10(1+I_length_(I_col_val_(CtIn_rank_V_ij_(tmp_ij_)))),'bo');
xlabel('gene-index (matching CtIn_p order)'); xlim([0,n_I_GENE]); tmp_yl_ = ylim();
ylabel('log10(gene length)');
title('I gene length vs gene ordering');
subplot(2,4,4); hold on;
tmp_ng_ = 1:n_I_GENE;
tmp_ij_ = find(I_length_(I_col_val_(CtIn_rank_V_ij_))>0);
colormap(colormap_beach()); 
imagesc(log10(1+hist2d_0(tmp_ng_(tmp_ij_),log10(1+I_length_(I_col_val_(CtIn_rank_V_ij_(tmp_ij_)))),n_bin,n_bin,[1,n_I_GENE],tmp_yl_)));
colorbar();
xlabel('gene-index (matching CtIn_p order)'); ylabel('log10(gene length)');
xlim([1,n_bin]); ylim([1,n_bin]);
set(gca,'XTick',[],'XTickLabel',[],'YTick',[],'YTickLabel',[]);
title('I gene length vs gene ordering');
end;%if flag_E;
%%%%%%%%;
if flag_E;
subplot(2,4,5); hold on;
tmp_ng_ = 1:n_E_GENE;
tmp_ij_ = find(E_length_(E_col_val_(CtEn_rank_V_ij_))>0);
tmp_X_ = corr(transpose(log10(sum(abs(CtEn_rank_ori_(:,tmp_ij_)).^2,1))),log10(E_length_(E_col_val_(CtEn_rank_V_ij_(tmp_ij_)))));
plot(log10(sum(abs(CtEn_rank_ori_(:,tmp_ij_)).^2,1)),log10(E_length_(E_col_val_(CtEn_rank_V_ij_(tmp_ij_)))),'ro');
xlabel('log10(sum squared correlation)'); ylabel('log10(gene length)');
tmp_yl_ = ylim(); tmp_xl_ = xlim();
title(sprintf('avg-corr^2 vs E gene-length (C %0.6f)',tmp_X_));
subplot(2,4,6); hold on;
colormap(colormap_beach());
imagesc(log10(1+hist2d_0(log10(sum(abs(CtEn_rank_ori_(:,tmp_ij_)).^2,1)),log10(E_length_(E_col_val_(CtEn_rank_V_ij_(tmp_ij_)))),n_bin,n_bin,tmp_xl_,tmp_yl_)));
colorbar();
colorbar();
xlabel('log10(sum squared correlation)'); ylabel('log10(gene length)');
xlim([1,n_bin]); ylim([1,n_bin]);
set(gca,'XTick',[],'XTickLabel',[],'YTick',[],'YTickLabel',[]);
title(sprintf('avg-corr^2 vs E gene-length (C %0.6f)',tmp_X_));
end;%if flag_E;
%%%%%%%%;
if flag_I;
subplot(2,4,7); hold on;
tmp_ng_ = 1:n_I_GENE;
tmp_ij_ = find(I_length_(I_col_val_(CtIn_rank_V_ij_))>0);
tmp_X_ = corr(transpose(log10(sum(abs(CtIn_rank_ori_(:,tmp_ij_)).^2,1))),log10(I_length_(I_col_val_(CtIn_rank_V_ij_(tmp_ij_)))));
plot(log10(sum(abs(CtIn_rank_ori_(:,tmp_ij_)).^2,1)),log10(I_length_(I_col_val_(CtIn_rank_V_ij_(tmp_ij_)))),'bo');
xlabel('log10(sum squared correlation)'); ylabel('log10(gene length)');
tmp_yl_ = ylim(); tmp_xl_ = xlim();
title(sprintf('avg-corr^2 vs I gene-length (C %0.6f)',tmp_X_));
subplot(2,4,8); hold on;
colormap(colormap_beach());
imagesc(log10(1+hist2d_0(log10(sum(abs(CtIn_rank_ori_(:,tmp_ij_)).^2,1)),log10(I_length_(I_col_val_(CtIn_rank_V_ij_(tmp_ij_)))),n_bin,n_bin,tmp_xl_,tmp_yl_)));
colorbar();
colorbar();
xlabel('log10(sum squared correlation)'); ylabel('log10(gene length)');
xlim([1,n_bin]); ylim([1,n_bin]);
set(gca,'XTick',[],'XTickLabel',[],'YTick',[],'YTickLabel',[]);
title(sprintf('avg-corr^2 vs I gene-length (C %0.6f)',tmp_X_));
end;%if flag_I;
%%%%%%%%;
set(gcf,'Position',1+[0,0,1024*2,1024]);
fname_base = sprintf('%s/dir_jpg/CtXn_X_sub_vs_length',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
clear tmp_xl_ tmp_yl_ tmp_X_ tmp_ij_ tmp_ng_ ;
end;%if flag_disp;
%%%%%%%%;
% Note that there is not much correlation between length and covariate-correlation. ;
%%%%%%%%;
end;%if flag_correlation;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
% Fit linear model to log of imputed data (li16f) ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
n_rank_xeta = 16;

%%%%%%%%;
% cUE1 ;
%%%%%%%%;
[xeta_RRR_li16f_cUE1_] = test_loader_lm_RRR_1(C_rank_cUE1_,E_li16f_,I_li16f_,n_rank_xeta,dir_trunk,'li16f_cUE1');
[xeta_LSQ_li16f_cUE1_] = test_loader_lm_LSQ_1(C_rank_cUE1_,E_li16f_,I_li16f_,dir_trunk,'li16f_cUE1');
[xeta_RRR_li16f_clogr_cUE1_] = test_loader_lm_RRR_1(C_rank_cUE1_,E_li16f_clogr_,I_li16f_clogr_,n_rank_xeta,dir_trunk,'li16f_clogr_cUE1');
[xeta_LSQ_li16f_clogr_cUE1_] = test_loader_lm_LSQ_1(C_rank_cUE1_,E_li16f_clogr_,I_li16f_clogr_,dir_trunk,'li16f_clogr_cUE1');
[xeta_RRR_li16f_rankn_cUE1_] = test_loader_lm_RRR_1(C_rank_cUE1_,E_li16f_rankn_,I_li16f_rankn_,n_rank_xeta,dir_trunk,'li16f_rankn_cUE1');
[xeta_LSQ_li16f_rankn_cUE1_] = test_loader_lm_LSQ_1(C_rank_cUE1_,E_li16f_rankn_,I_li16f_rankn_,dir_trunk,'li16f_rankn_cUE1');
%%%%%%%%;
% cUE2 ;
%%%%%%%%;
[xeta_RRR_li16f_cUE2_] = test_loader_lm_RRR_1(C_rank_cUE2_,E_li16f_,I_li16f_,n_rank_xeta,dir_trunk,'li16f_cUE2');
[xeta_LSQ_li16f_cUE2_] = test_loader_lm_LSQ_1(C_rank_cUE2_,E_li16f_,I_li16f_,dir_trunk,'li16f_cUE2');
[xeta_RRR_li16f_clogr_cUE2_] = test_loader_lm_RRR_1(C_rank_cUE2_,E_li16f_clogr_,I_li16f_clogr_,n_rank_xeta,dir_trunk,'li16f_clogr_cUE2');
[xeta_LSQ_li16f_clogr_cUE2_] = test_loader_lm_LSQ_1(C_rank_cUE2_,E_li16f_clogr_,I_li16f_clogr_,dir_trunk,'li16f_clogr_cUE2');
[xeta_RRR_li16f_rankn_cUE2_] = test_loader_lm_RRR_1(C_rank_cUE2_,E_li16f_rankn_,I_li16f_rankn_,n_rank_xeta,dir_trunk,'li16f_rankn_cUE2');
[xeta_LSQ_li16f_rankn_cUE2_] = test_loader_lm_LSQ_1(C_rank_cUE2_,E_li16f_rankn_,I_li16f_rankn_,dir_trunk,'li16f_rankn_cUE2');
%%%%%%%%;
% cUE3 ;
%%%%%%%%;
[xeta_RRR_li16f_cUE3_] = test_loader_lm_RRR_1(C_rank_cUE3_,E_li16f_,I_li16f_,n_rank_xeta,dir_trunk,'li16f_cUE3');
[xeta_LSQ_li16f_cUE3_] = test_loader_lm_LSQ_1(C_rank_cUE3_,E_li16f_,I_li16f_,dir_trunk,'li16f_cUE3');
[xeta_RRR_li16f_clogr_cUE3_] = test_loader_lm_RRR_1(C_rank_cUE3_,E_li16f_clogr_,I_li16f_clogr_,n_rank_xeta,dir_trunk,'li16f_clogr_cUE3');
[xeta_LSQ_li16f_clogr_cUE3_] = test_loader_lm_LSQ_1(C_rank_cUE3_,E_li16f_clogr_,I_li16f_clogr_,dir_trunk,'li16f_clogr_cUE3');
[xeta_RRR_li16f_rankn_cUE3_] = test_loader_lm_RRR_1(C_rank_cUE3_,E_li16f_rankn_,I_li16f_rankn_,n_rank_xeta,dir_trunk,'li16f_rankn_cUE3');
[xeta_LSQ_li16f_rankn_cUE3_] = test_loader_lm_LSQ_1(C_rank_cUE3_,E_li16f_rankn_,I_li16f_rankn_,dir_trunk,'li16f_rankn_cUE3');
%%%%%%%%;
% cUE4 ;
%%%%%%%%;
[xeta_RRR_li16f_cUE4_] = test_loader_lm_RRR_1(C_rank_cUE4_,E_li16f_,I_li16f_,n_rank_xeta,dir_trunk,'li16f_cUE4');
[xeta_LSQ_li16f_cUE4_] = test_loader_lm_LSQ_1(C_rank_cUE4_,E_li16f_,I_li16f_,dir_trunk,'li16f_cUE4');
[xeta_RRR_li16f_clogr_cUE4_] = test_loader_lm_RRR_1(C_rank_cUE4_,E_li16f_clogr_,I_li16f_clogr_,n_rank_xeta,dir_trunk,'li16f_clogr_cUE4');
[xeta_LSQ_li16f_clogr_cUE4_] = test_loader_lm_LSQ_1(C_rank_cUE4_,E_li16f_clogr_,I_li16f_clogr_,dir_trunk,'li16f_clogr_cUE4');
[xeta_RRR_li16f_rankn_cUE4_] = test_loader_lm_RRR_1(C_rank_cUE4_,E_li16f_rankn_,I_li16f_rankn_,n_rank_xeta,dir_trunk,'li16f_rankn_cUE4');
[xeta_LSQ_li16f_rankn_cUE4_] = test_loader_lm_LSQ_1(C_rank_cUE4_,E_li16f_rankn_,I_li16f_rankn_,dir_trunk,'li16f_rankn_cUE4');
%%%%%%%%;
% cUE5 ;
%%%%%%%%;
[xeta_RRR_li16f_cUE5_] = test_loader_lm_RRR_1(C_rank_cUE5_,E_li16f_,I_li16f_,n_rank_xeta,dir_trunk,'li16f_cUE5');
[xeta_LSQ_li16f_cUE5_] = test_loader_lm_LSQ_1(C_rank_cUE5_,E_li16f_,I_li16f_,dir_trunk,'li16f_cUE5');
[xeta_RRR_li16f_clogr_cUE5_] = test_loader_lm_RRR_1(C_rank_cUE5_,E_li16f_clogr_,I_li16f_clogr_,n_rank_xeta,dir_trunk,'li16f_clogr_cUE5');
[xeta_LSQ_li16f_clogr_cUE5_] = test_loader_lm_LSQ_1(C_rank_cUE5_,E_li16f_clogr_,I_li16f_clogr_,dir_trunk,'li16f_clogr_cUE5');
[xeta_RRR_li16f_rankn_cUE5_] = test_loader_lm_RRR_1(C_rank_cUE5_,E_li16f_rankn_,I_li16f_rankn_,n_rank_xeta,dir_trunk,'li16f_rankn_cUE5');
[xeta_LSQ_li16f_rankn_cUE5_] = test_loader_lm_LSQ_1(C_rank_cUE5_,E_li16f_rankn_,I_li16f_rankn_,dir_trunk,'li16f_rankn_cUE5');
%%%%%%%%;
% cUE6 ;
%%%%%%%%;
[xeta_RRR_li16f_cUE6_] = test_loader_lm_RRR_1(C_rank_cUE6_,E_li16f_,I_li16f_,n_rank_xeta,dir_trunk,'li16f_cUE6');
[xeta_LSQ_li16f_cUE6_] = test_loader_lm_LSQ_1(C_rank_cUE6_,E_li16f_,I_li16f_,dir_trunk,'li16f_cUE6');
[xeta_RRR_li16f_clogr_cUE6_] = test_loader_lm_RRR_1(C_rank_cUE6_,E_li16f_clogr_,I_li16f_clogr_,n_rank_xeta,dir_trunk,'li16f_clogr_cUE6');
[xeta_LSQ_li16f_clogr_cUE6_] = test_loader_lm_LSQ_1(C_rank_cUE6_,E_li16f_clogr_,I_li16f_clogr_,dir_trunk,'li16f_clogr_cUE6');
[xeta_RRR_li16f_rankn_cUE6_] = test_loader_lm_RRR_1(C_rank_cUE6_,E_li16f_rankn_,I_li16f_rankn_,n_rank_xeta,dir_trunk,'li16f_rankn_cUE6');
[xeta_LSQ_li16f_rankn_cUE6_] = test_loader_lm_LSQ_1(C_rank_cUE6_,E_li16f_rankn_,I_li16f_rankn_,dir_trunk,'li16f_rankn_cUE6');
%%%%%%%%;
% cPhr ;
%%%%%%%%;
[xeta_RRR_li16f_cPhr_] = test_loader_lm_RRR_1(C_rank_cPhr_,E_li16f_,I_li16f_,n_rank_xeta,dir_trunk,'li16f_cPhr');
[xeta_LSQ_li16f_cPhr_] = test_loader_lm_LSQ_1(C_rank_cPhr_,E_li16f_,I_li16f_,dir_trunk,'li16f_cPhr');
[xeta_RRR_li16f_clogr_cPhr_] = test_loader_lm_RRR_1(C_rank_cPhr_,E_li16f_clogr_,I_li16f_clogr_,n_rank_xeta,dir_trunk,'li16f_clogr_cPhr');
[xeta_LSQ_li16f_clogr_cPhr_] = test_loader_lm_LSQ_1(C_rank_cPhr_,E_li16f_clogr_,I_li16f_clogr_,dir_trunk,'li16f_clogr_cPhr');
[xeta_RRR_li16f_rankn_cPhr_] = test_loader_lm_RRR_1(C_rank_cPhr_,E_li16f_rankn_,I_li16f_rankn_,n_rank_xeta,dir_trunk,'li16f_rankn_cPhr');
[xeta_LSQ_li16f_rankn_cPhr_] = test_loader_lm_LSQ_1(C_rank_cPhr_,E_li16f_rankn_,I_li16f_rankn_,dir_trunk,'li16f_rankn_cPhr');
%%%%%%%%;
% c127 ;
%%%%%%%%;
[xeta_RRR_li16f_c127_] = test_loader_lm_RRR_1(C_rank_c127_,E_li16f_,I_li16f_,n_rank_xeta,dir_trunk,'li16f_c127');
[xeta_LSQ_li16f_c127_] = test_loader_lm_LSQ_1(C_rank_c127_,E_li16f_,I_li16f_,dir_trunk,'li16f_c127');
[xeta_RRR_li16f_clogr_c127_] = test_loader_lm_RRR_1(C_rank_c127_,E_li16f_clogr_,I_li16f_clogr_,n_rank_xeta,dir_trunk,'li16f_clogr_c127');
[xeta_LSQ_li16f_clogr_c127_] = test_loader_lm_LSQ_1(C_rank_c127_,E_li16f_clogr_,I_li16f_clogr_,dir_trunk,'li16f_clogr_c127');
[xeta_RRR_li16f_rankn_c127_] = test_loader_lm_RRR_1(C_rank_c127_,E_li16f_rankn_,I_li16f_rankn_,n_rank_xeta,dir_trunk,'li16f_rankn_c127');
[xeta_LSQ_li16f_rankn_c127_] = test_loader_lm_LSQ_1(C_rank_c127_,E_li16f_rankn_,I_li16f_rankn_,dir_trunk,'li16f_rankn_c127');
%%%%%%%%;
% c012 ;
%%%%%%%%;
[xeta_RRR_li16f_c012_] = test_loader_lm_RRR_1(C_rank_c012_,E_li16f_,I_li16f_,n_rank_xeta,dir_trunk,'li16f_c012');
[xeta_LSQ_li16f_c012_] = test_loader_lm_LSQ_1(C_rank_c012_,E_li16f_,I_li16f_,dir_trunk,'li16f_c012');
[xeta_RRR_li16f_clogr_c012_] = test_loader_lm_RRR_1(C_rank_c012_,E_li16f_clogr_,I_li16f_clogr_,n_rank_xeta,dir_trunk,'li16f_clogr_c012');
[xeta_LSQ_li16f_clogr_c012_] = test_loader_lm_LSQ_1(C_rank_c012_,E_li16f_clogr_,I_li16f_clogr_,dir_trunk,'li16f_clogr_c012');
[xeta_RRR_li16f_rankn_c012_] = test_loader_lm_RRR_1(C_rank_c012_,E_li16f_rankn_,I_li16f_rankn_,n_rank_xeta,dir_trunk,'li16f_rankn_c012');
[xeta_LSQ_li16f_rankn_c012_] = test_loader_lm_LSQ_1(C_rank_c012_,E_li16f_rankn_,I_li16f_rankn_,dir_trunk,'li16f_rankn_c012');
%%%%%%%%;
% cRRR ;
%%%%%%%%;
[xeta_RRR_li16f_cRRR_] = test_loader_lm_RRR_1(C_rank_cRRR_,E_li16f_,I_li16f_,n_rank_xeta,dir_trunk,'li16f_cRRR');
[xeta_LSQ_li16f_cRRR_] = test_loader_lm_LSQ_1(C_rank_cRRR_,E_li16f_,I_li16f_,dir_trunk,'li16f_cRRR');
[xeta_RRR_li16f_clogr_cRRR_] = test_loader_lm_RRR_1(C_rank_cRRR_,E_li16f_clogr_,I_li16f_clogr_,n_rank_xeta,dir_trunk,'li16f_clogr_cRRR');
[xeta_LSQ_li16f_clogr_cRRR_] = test_loader_lm_LSQ_1(C_rank_cRRR_,E_li16f_clogr_,I_li16f_clogr_,dir_trunk,'li16f_clogr_cRRR');
[xeta_RRR_li16f_rankn_cRRR_] = test_loader_lm_RRR_1(C_rank_cRRR_,E_li16f_rankn_,I_li16f_rankn_,n_rank_xeta,dir_trunk,'li16f_rankn_cRRR');
[xeta_LSQ_li16f_rankn_cRRR_] = test_loader_lm_LSQ_1(C_rank_cRRR_,E_li16f_rankn_,I_li16f_rankn_,dir_trunk,'li16f_rankn_cRRR');

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
% Assess inter- and intra-cluster pair differences. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
% Measure rank-differences. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
C_aucX__ = zeros(n_Sample_Label,n_Sample_Label,n_CCOV);
C_rank_avg_ = zeros(n_Sample_Label,n_CCOV);
%%%%%%%%;
for nA = 1:n_Sample_Label;
disp(sprintf(' %% Rank average for Label %d (%s):',nA,u_Sample_Label_{nA}));
tmp_Label_A_ij_ = find(strcmp(str_Sample_Label_,u_Sample_Label_{nA})); tmp_n_A = length(tmp_Label_A_ij_);
C_rank_avg_(nA,:) = mean(C_rank_(tmp_Label_A_ij_,:),1);
end;%for nA = 1:n_Sample_Label;
%%%%%%%%;
for nA = 1:n_Sample_Label;
for nB = 1:n_Sample_Label;
disp(sprintf(' %% Comparing Label %d (%s) and %d (%s):',nA,u_Sample_Label_{nA},nB,u_Sample_Label_{nB}));
C_aucX__(nA,nB,:) = C_rank_avg_(nA,:) - C_rank_avg_(nB,:);
%C_aucX__(nB,nA,:) = -C_aucX__(nA,nB,:);
end;%for nB = 1:n_Sample_Label;
end;%for nA = 1:n_Sample_Label;
clear tmp_Label_A_ij_ tmp_n_A ;
%%%%%%%%;
tmp_ = reshape(C_aucX__,n_Sample_Label*n_Sample_Label,n_CCOV);
fname_tsv = sprintf('%s/dir_mat/C_aucX__.tsv',dir_trunk);
if (~exist(fname_tsv));
disp(sprintf(' %% writing %s',fname_tsv));
save(fname_tsv,'tmp_','-ascii','-tabs');
end;%if (~exist(fname_tsv));
%%%%%%%%;
tmp_ = C_rank_avg_;
fname_tsv = sprintf('%s/dir_mat/C_rank_avg_.tsv',dir_trunk);
if (~exist(fname_tsv));
disp(sprintf(' %% writing %s',fname_tsv));
save(fname_tsv,'tmp_','-ascii','-tabs');
end;%if (~exist(fname_tsv));

disp('returning'); return; 

%%%%%%%%;
% For each gene and covariate, we can record the sorted-list of Label-pairs from I_aucX__ and C_aucX__. ;
% We can compare this to the distribution of sorted-lists obtained in a (Label-Label) permutation-test. ;
% Similarly, for each Label-pair, we can record the sorted-list of genes and covariates from I_aucX__ and C_aucX__. ;
% Again, we can compare this to the distribution of sorted-lists obtained in a (Label-Label) permutation-test. ;
% Note that, for now, this operation requires more than 32GB of ram (i.e., more than box615). ;
%%%%%%%%;
n_iteration_wrap = 128;
n_rank_wrap = 1;
%%%%%%%%;
test_loader_helper_wrap_1(dir_trunk,n_iteration_wrap,n_Sample_Label,str_Sample_Label_,C_VariableName_LC_,E_li16f_rankn_,I_li16f_rankn_,xeta_RRR_li16f_rankn_cUE1_,n_rank_wrap);
test_loader_helper_wrap_1(dir_trunk,n_iteration_wrap,n_Sample_Label,str_Sample_Label_,C_VariableName_LC_,E_li16f_rankn_,I_li16f_rankn_,xeta_RRR_li16f_rankn_cUE2_,n_rank_wrap);
test_loader_helper_wrap_1(dir_trunk,n_iteration_wrap,n_Sample_Label,str_Sample_Label_,C_VariableName_LC_,E_li16f_rankn_,I_li16f_rankn_,xeta_RRR_li16f_rankn_cUE3_,n_rank_wrap);
test_loader_helper_wrap_1(dir_trunk,n_iteration_wrap,n_Sample_Label,str_Sample_Label_,C_VariableName_LC_,E_li16f_rankn_,I_li16f_rankn_,xeta_RRR_li16f_rankn_cUE4_,n_rank_wrap);
test_loader_helper_wrap_1(dir_trunk,n_iteration_wrap,n_Sample_Label,str_Sample_Label_,C_VariableName_LC_,E_li16f_rankn_,I_li16f_rankn_,xeta_RRR_li16f_rankn_cUE5_,n_rank_wrap);
test_loader_helper_wrap_1(dir_trunk,n_iteration_wrap,n_Sample_Label,str_Sample_Label_,C_VariableName_LC_,E_li16f_rankn_,I_li16f_rankn_,xeta_RRR_li16f_rankn_cUE6_,n_rank_wrap);
%%%%%%%%;
n_rank_wrap = 9;
%%%%%%%%;
test_loader_helper_wrap_1(dir_trunk,n_iteration_wrap,n_Sample_Label,str_Sample_Label_,C_VariableName_LC_,E_li16f_rankn_,I_li16f_rankn_,xeta_RRR_li16f_rankn_cPhr_,n_rank_wrap);
test_loader_helper_wrap_1(dir_trunk,n_iteration_wrap,n_Sample_Label,str_Sample_Label_,C_VariableName_LC_,E_li16f_rankn_,I_li16f_rankn_,xeta_RRR_li16f_rankn_c127_,n_rank_wrap);
test_loader_helper_wrap_1(dir_trunk,n_iteration_wrap,n_Sample_Label,str_Sample_Label_,C_VariableName_LC_,E_li16f_rankn_,I_li16f_rankn_,xeta_RRR_li16f_rankn_c012_,n_rank_wrap);
test_loader_helper_wrap_1(dir_trunk,n_iteration_wrap,n_Sample_Label,str_Sample_Label_,C_VariableName_LC_,E_li16f_rankn_,I_li16f_rankn_,xeta_RRR_li16f_rankn_cRRR_,n_rank_wrap);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;

fname_readme = sprintf('%s/dir_mat/readme_sub.txt',dir_trunk);
fp_readme = fopen(fname_readme,'w');
fprintf(fp_readme,'u_ID_sub_.nsv: newline delimited list of sample ids, subselected for quality.\n');
fprintf(fp_readme,'str_Sample_Label_sub_.nsv: newline delimited list of cluster-labels for the samples.\n');
fprintf(fp_readme,'C_VariableName_.tsv: tab delimited list of metadata (i.e., Covariates) names.\n');
fprintf(fp_readme,'C_VariableName_.nsv: newline delimited list of metadata (i.e., Covariates) names.\n');
fprintf(fp_readme,'E_GeneName_sub_.nsv: newline delimited list of exon gene names, subselected for quality.\n');
fprintf(fp_readme,'I_GeneName_sub_.nsv: newline delimited list of intron gene names, subselected for quality.\n');
fprintf(fp_readme,'E_li16f_.tsv: tab delimited array of samples (rows) by exon gene log-expression-values (rank-6 linear imputation) (columns).\n');
fprintf(fp_readme,'I_li16f_.tsv: tab delimited array of smaples (rows) by intron gene log-expression-values (rank-6 linear imputation) (columns).\n');
fprintf(fp_readme,'E_li16f_clogr_.tsv: tab delimited array of samples (rows) by exon gene log-expression-values (rank-6 linear imputation) (columns) followed by mean-centering (centered-log-ratio).\n');
fprintf(fp_readme,'I_li16f_clogr_.tsv: tab delimited array of smaples (rows) by intron gene log-expression-values (rank-6 linear imputation) (columns) followed by mean-centering (centered-log-ratio).\n');
fprintf(fp_readme,'E_li16f_rankn_.tsv: tab delimited array of samples (rows) by exon gene log-expression-values (rank-6 linear imputation) (columns) followed by mean-centering (centered-log-ratio) followed by rank-normalization.\n');
fprintf(fp_readme,'I_li16f_rankn_.tsv: tab delimited array of smaples (rows) by intron gene log-expression-values (rank-6 linear imputation) (columns) followed by mean-centering (centered-log-ratio) followed by rank-normalization.\n');
fprintf(fp_readme,'C_rank_c012_.tsv: tab delimited array of samples (rows) by covariate ranks (columns).\n');
fprintf(fp_readme,'E_li16f_c012_zeta_un_.tsv and E_li16f_c012_zeta_vn_.tsv: tab delimited arrays of coefficients. The outer-product [E_li16f_c012_zeta_] := [E_li16f_c012_zeta_un_]*[E_li16f_c012_zeta_vn_] is a coefficient matrix for the linear model [Exon-Gene-Li16f] = [1 , Covariate-Rank]*[E_li16f_c012_zeta_]. The ''1'' in the previous expression refers to a vector of all ones (i.e., the constant term in the linear model).\n');
fprintf(fp_readme,'E_li16f_c012_beta_un_.tsv and E_li16f_c012_beta_vn_.tsv: tab delimited arrays of coefficients. The outer-product [E_li16f_c012_beta_] := [E_li16f_c012_beta_un_]*[E_li16f_c012_beta_vn_] is a coefficient matrix for the linear model [Covariate-Rank] = [1 , Exon-Gene-Li16f]*[E_li16f_c012_beta_]. The ''1'' in the previous expression refers to a vector of all ones (i.e., the constant term in the linear model).\n');
fprintf(fp_readme,'I_li16f_c012_zeta_un_.tsv and I_li16f_c012_zeta_vn_.tsv: tab delimited arrays of coefficients. The outer-product [I_li16f_c012_zeta_] := [I_li16f_c012_zeta_un_]*[I_li16f_c012_zeta_vn_] is a coefficient matrix for the linear model [Intron-Gene-Li16f] = [1 , Covariate-Rank]*[I_li16f_c012_zeta_]. The ''1'' in the previous expression refers to a vector of all ones (i.e., the constant term in the linear model).\n');
fprintf(fp_readme,'I_li16f_c012_beta_un_.tsv and I_li16f_c012_beta_vn_.tsv: tab delimited arrays of coefficients. The outer-product [I_li16f_c012_beta_] := [I_li16f_c012_beta_un_]*[I_li16f_c012_beta_vn_] is a coefficient matrix for the linear model [Covariate-Rank] = [1 , Intron-Gene-Li16f]*[I_li16f_c012_beta_]. The ''1'' in the previous expression refers to a vector of all ones (i.e., the constant term in the linear model).\n');
fprintf(fp_readme,'E_li16f_clogr_c012_zeta_un_.tsv and E_li16f_clogr_c012_zeta_vn_.tsv: tab delimited arrays of coefficients. The outer-product [E_li16f_clogr_c012_zeta_] := [E_li16f_clogr_c012_zeta_un_]*[E_li16f_clogr_c012_zeta_vn_] is a coefficient matrix for the linear model [Exon-Gene-Li16f_Clogr] = [1 , Covariate-Rank]*[E_li16f_clogr_c012_zeta_]. The ''1'' in the previous expression refers to a vector of all ones (i.e., the constant term in the linear model).\n');
fprintf(fp_readme,'E_li16f_clogr_c012_beta_un_.tsv and E_li16f_clogr_c012_beta_vn_.tsv: tab delimited arrays of coefficients. The outer-product [E_li16f_clogr_c012_beta_] := [E_li16f_clogr_c012_beta_un_]*[E_li16f_clogr_c012_beta_vn_] is a coefficient matrix for the linear model [Covariate-Rank] = [1 , Exon-Gene-Li16f_Clogr]*[E_li16f_clogr_c012_beta_]. The ''1'' in the previous expression refers to a vector of all ones (i.e., the constant term in the linear model).\n');
fprintf(fp_readme,'I_li16f_clogr_c012_zeta_un_.tsv and I_li16f_clogr_c012_zeta_vn_.tsv: tab delimited arrays of coefficients. The outer-product [I_li16f_clogr_c012_zeta_] := [I_li16f_clogr_c012_zeta_un_]*[I_li16f_clogr_c012_zeta_vn_] is a coefficient matrix for the linear model [Intron-Gene-Li16f_Clogr] = [1 , Covariate-Rank]*[I_li16f_clogr_c012_zeta_]. The ''1'' in the previous expression refers to a vector of all ones (i.e., the constant term in the linear model).\n');
fprintf(fp_readme,'I_li16f_clogr_c012_beta_un_.tsv and I_li16f_clogr_c012_beta_vn_.tsv: tab delimited arrays of coefficients. The outer-product [I_li16f_clogr_c012_beta_] := [I_li16f_clogr_c012_beta_un_]*[I_li16f_clogr_c012_beta_vn_] is a coefficient matrix for the linear model [Covariate-Rank] = [1 , Intron-Gene-Li16f_Clogr]*[I_li16f_clogr_c012_beta_]. The ''1'' in the previous expression refers to a vector of all ones (i.e., the constant term in the linear model).\n');
fprintf(fp_readme,'E_li16f_rankn_c012_zeta_un_.tsv and E_li16f_rankn_c012_zeta_vn_.tsv: tab delimited arrays of coefficients. The outer-product [E_li16f_rankn_c012_zeta_] := [E_li16f_rankn_c012_zeta_un_]*[E_li16f_rankn_c012_zeta_vn_] is a coefficient matrix for the linear model [Exon-Gene-Li16f_Rankn] = [1 , Covariate-Rank]*[E_li16f_rankn_c012_zeta_]. The ''1'' in the previous expression refers to a vector of all ones (i.e., the constant term in the linear model).\n');
fprintf(fp_readme,'E_li16f_rankn_c012_beta_un_.tsv and E_li16f_rankn_c012_beta_vn_.tsv: tab delimited arrays of coefficients. The outer-product [E_li16f_rankn_c012_beta_] := [E_li16f_rankn_c012_beta_un_]*[E_li16f_rankn_c012_beta_vn_] is a coefficient matrix for the linear model [Covariate-Rank] = [1 , Exon-Gene-Li16f_Rankn]*[E_li16f_rankn_c012_beta_]. The ''1'' in the previous expression refers to a vector of all ones (i.e., the constant term in the linear model).\n');
fprintf(fp_readme,'I_li16f_rankn_c012_zeta_un_.tsv and I_li16f_rankn_c012_zeta_vn_.tsv: tab delimited arrays of coefficients. The outer-product [I_li16f_rankn_c012_zeta_] := [I_li16f_rankn_c012_zeta_un_]*[I_li16f_rankn_c012_zeta_vn_] is a coefficient matrix for the linear model [Intron-Gene-Li16f_Rankn] = [1 , Covariate-Rank]*[I_li16f_rankn_c012_zeta_]. The ''1'' in the previous expression refers to a vector of all ones (i.e., the constant term in the linear model).\n');
fprintf(fp_readme,'I_li16f_rankn_c012_beta_un_.tsv and I_li16f_rankn_c012_beta_vn_.tsv: tab delimited arrays of coefficients. The outer-product [I_li16f_rankn_c012_beta_] := [I_li16f_rankn_c012_beta_un_]*[I_li16f_rankn_c012_beta_vn_] is a coefficient matrix for the linear model [Covariate-Rank] = [1 , Intron-Gene-Li16f_Rankn]*[I_li16f_rankn_c012_beta_]. The ''1'' in the previous expression refers to a vector of all ones (i.e., the constant term in the linear model).\n');
fprintf(fp_readme,'AB_E_li16f_rankn_c012_C_absZ_.tsv: tab delimited array of cluster-pairs (rows) by covariate (columns). Each array entry indicates the absolute-value of the z-score associated with the (raw) differential-expression of that particular covariate-rank over that cluster pair.\n');
fprintf(fp_readme,'AB_E_li16f_rankn_c012_K_absZ_.tsv: tab delimited array of cluster-pairs (rows) by covariate (columns). Each array entry indicates the absolute-value of the z-score associated with the (relative) differential-expression of that particular covariate-rank over that cluster pair. In this context ''relative'' means corrected for the linear effect of the E gene-ranks.\n');
fprintf(fp_readme,'AB_E_li16f_rankn_c012_Z_absZ_.tsv: tab delimited array of cluster-pairs (rows) by exon genes (columns). Each array entry indicates the absolute-value of the z-score associated with the (raw) differential-expression of that particular gene-rank over that cluster pair.\n');
fprintf(fp_readme,'AB_E_li16f_rankn_c012_H_absZ_.tsv: tab delimited array of cluster-pairs (rows) by exon genes (columns). Each array entry indicates the absolute-value of the z-score associated with the (relative) differential-expression of that particular gene-rank over that cluster pair. In this context ''relative'' means corrected for the linear effect of the covariate-rank.\n');
fprintf(fp_readme,'AB_I_li16f_rankn_c012_C_absZ_.tsv: tab delimited array of cluster-pairs (rows) by covariate (columns). Each array entry indicates the absolute-value of the z-score associated with the (raw) differential-expression of that particular covariate-rank over that cluster pair.\n');
fprintf(fp_readme,'AB_I_li16f_rankn_c012_K_absZ_.tsv: tab delimited array of cluster-pairs (rows) by covariate (columns). Each array entry indicates the absolute-value of the z-score associated with the (relative) differential-expression of that particular covariate-rank over that cluster pair. In this context ''relative'' means corrected for the linear effect of the I gene-ranks.\n');
fprintf(fp_readme,'AB_I_li16f_rankn_c012_Z_absZ_.tsv: tab delimited array of cluster-pairs (rows) by intron genes (columns). Each array entry indicates the absolute-value of the z-score associated with the (raw) differential-expression of that particular gene-rank over that cluster pair.\n');
fprintf(fp_readme,'AB_I_li16f_rankn_c012_H_absZ_.tsv: tab delimited array of cluster-pairs (rows) by intron genes (columns). Each array entry indicates the absolute-value of the z-score associated with the (relative) differential-expression of that particular gene-rank over that cluster pair. In this context ''relative'' means corrected for the linear effect of the covariate-rank.\n');
fprintf(fp_readme,'AB_E_li16f_rankn_c012_C_rawZ_.tsv: tab delimited array of cluster-pairs (rows) by covariate (columns). Each array entry indicates the raw z-score associated with the (raw) differential-expression of that particular covariate-rank over that cluster pair.\n');
fprintf(fp_readme,'AB_E_li16f_rankn_c012_K_rawZ_.tsv: tab delimited array of cluster-pairs (rows) by covariate (columns). Each array entry indicates the raw z-score associated with the (relative) differential-expression of that particular covariate-rank over that cluster pair. In this context ''relative'' means corrected for the linear effect of the E gene-ranks.\n');
fprintf(fp_readme,'AB_E_li16f_rankn_c012_Z_rawZ_.tsv: tab delimited array of cluster-pairs (rows) by exon genes (columns). Each array entry indicates the raw z-score associated with the (raw) differential-expression of that particular gene-rank over that cluster pair.\n');
fprintf(fp_readme,'AB_E_li16f_rankn_c012_H_rawZ_.tsv: tab delimited array of cluster-pairs (rows) by exon genes (columns). Each array entry indicates the raw z-score associated with the (relative) differential-expression of that particular gene-rank over that cluster pair. In this context ''relative'' means corrected for the linear effect of the covariate-rank.\n');
fprintf(fp_readme,'AB_I_li16f_rankn_c012_C_rawZ_.tsv: tab delimited array of cluster-pairs (rows) by covariate (columns). Each array entry indicates the raw z-score associated with the (raw) differential-expression of that particular covariate-rank over that cluster pair.\n');
fprintf(fp_readme,'AB_I_li16f_rankn_c012_K_rawZ_.tsv: tab delimited array of cluster-pairs (rows) by covariate (columns). Each array entry indicates the raw z-score associated with the (relative) differential-expression of that particular covariate-rank over that cluster pair. In this context ''relative'' means corrected for the linear effect of the I gene-ranks.\n');
fprintf(fp_readme,'AB_I_li16f_rankn_c012_Z_rawZ_.tsv: tab delimited array of cluster-pairs (rows) by intron genes (columns). Each array entry indicates the raw z-score associated with the (raw) differential-expression of that particular gene-rank over that cluster pair.\n');
fprintf(fp_readme,'AB_I_li16f_rankn_c012_H_rawZ_.tsv: tab delimited array of cluster-pairs (rows) by intron genes (columns). Each array entry indicates the raw z-score associated with the (relative) differential-expression of that particular gene-rank over that cluster pair. In this context ''relative'' means corrected for the linear effect of the covariate-rank.\n');
fclose(fp_readme);

%%%%%%%%;
% Now pulling together results from transcript-differential-expression across AIBS cluster-pairs. ;
%%%%%%%%;
cp_row_ = zeros(2*n_Sample_Label^2,1);
cp_col_ = zeros(2*n_Sample_Label^2,1);
cp_val_ = zeros(2*n_Sample_Label^2,1);
na=0;
for nSample_Label_A=1:n_Sample_Label;
for nSample_Label_B=1:n_Sample_Label;
tmp_tab = 1 + (nSample_Label_A-1) + (nSample_Label_B-1)*n_Sample_Label;
cp_row_(1+na) = nSample_Label_A;
cp_col_(1+na) = tmp_tab;
cp_val_(1+na) = 1;
na = na+1;
cp_row_(1+na) = nSample_Label_B;
cp_col_(1+na) = tmp_tab;
cp_val_(1+na) = 1;
na = na+1;
end;%for nSample_Label_B=1:n_Sample_Label;
end;%for nSample_Label_A=1:n_Sample_Label;
assert(na==2*n_Sample_Label^2);
cp_ = sparse(cp_row_,cp_col_,cp_val_,n_Sample_Label,n_Sample_Label^2);
%%%%%%%%;
str_X = 'E';
str_Y = 'li16f_rankn';
str_Z_ = {'127','012','RRR','UE1','UE2','UE3','UE4','UE5','UE6'}; n_Z = 9;
n_Z_rank_ = [9,9,9,1,1,1,1,1,1]; assert(numel(n_Z_rank_)==n_Z);
cp_markergene_ = zeros(1+n_Sample_Label,n_Z);
for nZ=1:n_Z;
str_Z = str_Z_{nZ};
disp(sprintf(' %% nZ %d/%d %s',nZ,n_Z,str_Z));
%%%%%%%%;
nrank = 1;
str_file = sprintf('%s/dir_mat/dir_AB/AB_%s_%s_c%s_r%d_Z_rawZ_.tsv',dir_trunk,str_X,str_Y,str_Z,nrank);
tmp_AB_Z0_ = textread(str_file); tmp_AB_Z0_ = tmp_AB_Z0_(:,1:end-1);
%nrank = 1;
%str_file = sprintf('%s/dir_mat/dir_AB/AB_%s_%s_c%s_r%d_H_rawZ_.tsv',dir_trunk,str_X,str_Y,str_Z,nrank);
%tmp_AB_H1_ = textread(str_file); tmp_AB_H1_ = tmp_AB_H1_(:,1:end-1);
nrank = n_Z_rank_(nZ);
str_file = sprintf('%s/dir_mat/dir_AB/AB_%s_%s_c%s_r%d_H_rawZ_.tsv',dir_trunk,str_X,str_Y,str_Z,nrank);
tmp_AB_H9_ = textread(str_file); tmp_AB_H9_ = tmp_AB_H9_(:,1:end-1);
%%%%%%%%;
cp_markergene_(1,nZ) = corr(tmp_AB_Z0_(:),tmp_AB_H9_(:));
for nSample_Label=1:n_Sample_Label;
tmp_ij_ = find(cp_(nSample_Label,:));
tmp_Z0_ = tmp_AB_Z0_(tmp_ij_,:);
tmp_H9_ = tmp_AB_H9_(tmp_ij_,:);
cp_markergene_(1+nSample_Label,nZ) = corr(tmp_Z0_(:),tmp_H9_(:));
end;%for nSample_Label=1:n_Sample_Label;
%%%%%%%%;
end;%for nZ=1:n_Z;

%%%%%%%%;
% print out table. ;
%%%%%%%%;
disp(sprintf(' %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'));
disp(sprintf(' %% %s %s ',str_X,str_Y));
disp(sprintf(' %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'));
for nZ=1:n_Z;
str_Z = str_Z_{nZ};
str_out_ = sprintf(' %% c%s:\t MarkerGene Correlation: \t ALL: %+0.2f\t EACH: ',str_Z,cp_markergene_(1,nZ));
for nSample_Label=1:n_Sample_Label;
str_out_ = sprintf('%s %+0.2f',str_out_,cp_markergene_(1+nSample_Label,nZ));
end;%for nSample_Label=1:n_Sample_Label;
disp(sprintf('%s',str_out_));
end;%for nZ=1:n_Z;

%{ output:
  % c127: MarkerGene Correlation:  ALL: +0.57 EACH:  +0.57 +0.65 +0.46 +0.61 +0.64 +0.52 +0.55 +0.53 +0.66 +0.49 +0.67 +0.54 +0.68 +0.57 +0.51 +0.65 +0.55 +0.42 +0.69 +0.64 +0.52 +0.61 +0.54 +0.61 +0.46 +0.47 +0.51 +0.59 +0.52 +0.58 +0.56 +0.46 +0.38 +0.61 +0.66 +0.54 +0.62 +0.55 +0.34 +0.65 +0.42 +0.56 +0.64 +0.55 +0.65 +0.58 +0.60
	 % c012: MarkerGene Correlation:  ALL: +0.75 EACH:  +0.83 +0.80 +0.63 +0.82 +0.81 +0.77 +0.66 +0.71 +0.83 +0.73 +0.77 +0.71 +0.79 +0.72 +0.66 +0.82 +0.69 +0.59 +0.83 +0.86 +0.60 +0.78 +0.75 +0.74 +0.58 +0.67 +0.65 +0.75 +0.65 +0.67 +0.63 +0.62 +0.71 +0.81 +0.81 +0.64 +0.72 +0.60 +0.54 +0.83 +0.18 +0.86 +0.85 +0.65 +0.82 +0.80 +0.62
	 % cRRR: MarkerGene Correlation:  ALL: +0.80 EACH:  +0.85 +0.83 +0.76 +0.86 +0.89 +0.86 +0.77 +0.81 +0.87 +0.83 +0.81 +0.72 +0.80 +0.76 +0.64 +0.84 +0.84 +0.69 +0.82 +0.89 +0.63 +0.87 +0.76 +0.78 +0.71 +0.71 +0.77 +0.88 +0.64 +0.73 +0.70 +0.76 +0.70 +0.88 +0.88 +0.65 +0.77 +0.75 +0.78 +0.86 +0.53 +0.86 +0.88 +0.66 +0.89 +0.87 +0.64
	 % cUE1: MarkerGene Correlation:  ALL: +1.00 EACH:  +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00
	 % cUE2: MarkerGene Correlation:  ALL: +1.00 EACH:  +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +0.99 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +0.99 +0.99 +0.99 +1.00 +1.00 +0.99 +1.00 +0.99 +0.99 +1.00 +0.99 +1.00 +1.00 +0.99 +1.00 +0.99 +0.99 +1.00 +1.00 +1.00 +1.00 +1.00 +0.99
	 % cUE3: MarkerGene Correlation:  ALL: +0.99 EACH:  +0.99 +0.99 +0.99 +0.99 +0.99 +0.99 +0.99 +0.99 +0.99 +0.99 +0.99 +0.99 +0.99 +0.99 +0.99 +0.99 +0.99 +0.98 +0.99 +0.99 +0.99 +0.99 +0.99 +0.99 +0.98 +0.99 +0.99 +0.99 +0.99 +0.99 +0.99 +0.98 +0.96 +0.99 +0.98 +0.99 +0.98 +0.98 +0.99 +0.99 +0.89 +0.99 +0.99 +0.99 +0.99 +0.99 +0.98
	 % cUE4: MarkerGene Correlation:  ALL: +1.00 EACH:  +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00
	 % cUE5: MarkerGene Correlation:  ALL: +1.00 EACH:  +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00 +1.00
	 % cUE6: MarkerGene Correlation:  ALL: +0.99 EACH:  +0.99 +0.99 +1.00 +0.99 +0.99 +1.00 +1.00 +0.99 +0.99 +0.99 +0.99 +0.99 +1.00 +0.99 +1.00 +1.00 +0.99 +0.99 +0.99 +0.99 +0.99 +0.99 +0.99 +0.99 +0.99 +0.99 +0.99 +1.00 +1.00 +0.99 +0.99 +0.99 +0.96 +1.00 +0.99 +0.99 +0.99 +0.99 +0.99 +0.99 +0.92 +1.00 +0.99 +1.00 +0.99 +0.99 +0.99
	 %}

%%%%%%%%;
dir_trunk = '/data/rangan/dir_bcc/dir_jamison';
str_C_tsv_ = sprintf('%s/dir_mat/C_rank_.tsv',dir_trunk);
C_rank_ = textread(str_C_tsv_); C_rank_ = C_rank_(:,1:end-1);
str_C_nsv_ = sprintf('%s/dir_mat/C_VariableName_.nsv',dir_trunk);
fp = fopen(str_C_nsv_,'r'); C_VariableName_ = textscan(fp,'%s\n'); fclose(fp); C_VariableName_ = C_VariableName_{1};
fp_label_A_ = fopen(sprintf('%s/dir_mat/str_CLabel_sub_.nsv',dir_trunk),'r');
str_label_A_ = textscan(fp_label_A_,'%s'); fclose(fp_label_A_);
n_u = numel(str_label_A_{1});
prefix_normalization = 'li16f';
str_E_tsv_ = sprintf('%s/dir_mat/E_%s_.tsv',dir_trunk,prefix_normalization);
fp = fopen(str_E_tsv_,'r'); tmp_ = fgetl(fp); fclose(fp);
n_E_GENE = numel(str2num(tmp_)); clear tmp_;
str_I_tsv_ = sprintf('%s/dir_mat/I_%s_.tsv',dir_trunk,prefix_normalization);
fp = fopen(str_I_tsv_,'r'); tmp_ = fgetl(fp); fclose(fp);
n_I_GENE = numel(str2num(tmp_)); clear tmp_;
label_A_ = label_str_to_enum_0(str_label_A_{1});
%%%%%%%%;
%%%%%%%%;
u_label_A_ = unique(str_label_A_{1});
n_label_A = length(u_label_A_);
label_A_each__ = zeros(n_u,n_label_A);
for nlabel_A=1:n_label_A;
label_A_each__(:,nlabel_A) = zeros(n_u,1);
tmp_ij_ = find(strcmp(str_label_A_{1},u_label_A_{nlabel_A}));
label_A_each__(tmp_ij_,nlabel_A) = 1;
end;%for nlabel_A=1:n_label_A;
%%%%%%%%;
%%%%%%%%;
% print out figure;. ;
%%%%%%%%;
str_ticklabel_ = cell(1+n_label_A,1);
str_ticklabel_{1} = 'all';
for nlabel_A=1:n_label_A;
str_ticklabel_{1+nlabel_A} = sprintf('%d: ''%s''',nlabel_A,u_label_A_{nlabel_A});
end;%for nlabel_A=1:n_label_A;
pre_Y_ = {'127','012','RRR','UE1','UE2','UE3','UE4','UE5','UE6'};
colormap(colormap_beach());
imagesc(transpose(cp_markergene_),[0.5,1.0]); 
set(gca,'XTick',1:1+n_label_A,'XTickLabel',str_ticklabel_); xtickangle(90);
set(gca,'YTick',1:numel(pre_Y_),'YTickLabel',pre_Y_);
set(gca,'TickLength',[0,0]);
set(gca,'FontName','Courier');
cbh = colorbar;
set(cbh,'YTick',[0.5,1],'YTickLabel',[0.5,1]);
set(cbh,'TickLength',[0]);
title(sprintf('%s',str_X));
figbig;
fname = sprintf('/data/rangan/dir_bcc/dir_jamison/dir_jpg/test_loader_27_cp_markergene_%s_FIGA',str_X);
disp(sprintf(' %% writing %s',fname));
print('-djpeg',sprintf('%s.jpg',fname));
print('-depsc',sprintf('%s.eps',fname));
clf;
[~,tmp_ij_] = sort(cp_markergene_(2:end,1),'ascend');
tmp_ij_ = [1;1+tmp_ij_];
tmp_cp_ = cp_markergene_(tmp_ij_,:); tmp_cp_ = [tmp_cp_;tmp_cp_(end,:)];
hold on; 
stairs(1:2+n_label_A,tmp_cp_(:,1),'b-','LineWidth',3);
stairs(1:2+n_label_A,tmp_cp_(:,2),'r-','LineWidth',3);
stairs(1:2+n_label_A,tmp_cp_(:,3),'g-','LineWidth',3);
hold off;
grid on;
legend({'127','012','RRR'},'Location','SouthEast');
set(gca,'XTick',0.5+(1:1+n_label_A),'XTickLabel',str_ticklabel_(tmp_ij_)); xtickangle(90);
title(sprintf('%s',str_X));
figbig;
fname = sprintf('/data/rangan/dir_bcc/dir_jamison/dir_jpg/test_loader_27_cp_markergene_%s_FIGB',str_X);
disp(sprintf(' %% writing %s',fname));
print('-djpeg',sprintf('%s.jpg',fname));
print('-depsc',sprintf('%s.eps',fname));

disp('returning');return;



