function mc = xxxcluster_PGC_getbim_ver3(fname,p_lo_threshold,p_hi_threshold);
% creates a column-mask mc which is 0 for all alleles such that: ;
% either ;
% a) the minor-allele-frequency of that snp is below p_lo_threshold, ;
% or ;
% b) the minor-allele-frequency of that snp is above p_hi_threshold, ;
% or ;
% c) the frequency of allele type is below p_lo_threshold.^2 ;
% or ;
% d) the frequency of allele type is above (1-p_lo_threshold).^2 ;

if nargin<3;
p_hi_threshold = 1.0;
end;%if nargin<3;

verbose=0;
if verbose;
disp(sprintf('%% Bim: ; '));
disp(sprintf('%% This has the same structure as a typical bim file, ; '));
disp(sprintf('%% with five extra fields. ; '));
disp(sprintf('%% field 6+1: allele type. ; '));
disp(sprintf('%% field 6+2: total relative entropy across (nonexcluded) patients. ; '));
disp(sprintf('%% field 6+3: frequency of allele type (i.e., sparsity of column). ; '));
disp(sprintf('%% field 6+4: frequency of missing data for that snp. ; '));
disp(sprintf('%% field 6+5: minor-allele-frequency of that snp. ; '));
disp(sprintf('%% Moreover, the allele-ordering should be sorted in terms of column-sparsity. ; '));
end;%if verbose;

fp = fopen(fname,'r');
bim_ = textscan(fp,'%d\t%s\t%d\t%d\t%c\t%c\t%s\t%f\t%f\t%f\t%f\n');
fclose(fp);
marker_id_ = bim_{2};
bit_type_ =  bim_{7};
I_opt_tot_ = bim_{8};
fr2_xxx_tot_ = bim_{9};
frq_mss_tot_ = bim_{10};
x_opt_tot_ = bim_{11};
tmp_ij_ = find(x_opt_tot_>0.5); 
x_opt_tot_(tmp_ij_) = 1 - x_opt_tot_(tmp_ij_);
mc = ones(length(marker_id_),1);
p_min = min(p_lo_threshold,p_hi_threshold);
p_max = max(p_lo_threshold,p_hi_threshold);
tmp = find( x_opt_tot_ < p_min | x_opt_tot_ > p_max | fr2_xxx_tot_ < p_min.^2 | fr2_xxx_tot_ > (1-p_min).^2 );
mc(tmp)=0;
