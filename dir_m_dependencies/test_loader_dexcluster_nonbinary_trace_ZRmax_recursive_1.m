function output_label_ = test_loader_dexcluster_nonbinary_trace_ZRmax_recursive_1(dir_trunk,dir_out,prefix_base,E_array_base_,E_array_r_ij_,E_array_c_ij_,gamma,n_shuffle,p_set,n_member_lob);

%%%%%%%%;
verbose=2;
if (isempty(E_array_r_ij_)); E_array_r_ij_ = 1:size(E_array_base_,1); end;
if (isempty(E_array_c_ij_)); E_array_c_ij_ = 1:size(E_array_base_,2); end;
if (isempty(gamma)); gamma = 0.01; end;
if (isempty(n_shuffle)); n_shuffle = 64; end;
if (isempty(p_set)); p_set = 0.05; end;
if (isempty(n_member_lob)); n_member_lob = 3; end;
%%%%%%%%;
%n_u = size(E_array_base_(E_array_r_ij_,:),1); n_g = size(E_array_base_(E_array_r_ij_,E_array_c_ij_),2);
n_u = numel(E_array_r_ij_); n_g = numel(E_array_c_ij_);
dir_code = '/data/rangan/dir_bcc/dir_lakcluster_c_dev';
rev_flag = 0; A_n_rind_ = {[1:n_u]}; A_n_cind = 1:n_g; Z_n_rind_ = {[]}; T_n_ = {ones(n_u,1)}; T_n_cind = 1;
GLOBAL_TEST_sparse = 0; B_MLT = 0; Ireq = 0;  verbose_flag = 0; flag_force_create = 0; flag_force_fig = 0;
%%%%%%%%;
if (isempty(dir_out));
if (verbose>1); disp(sprintf(' %% dir_out not provided, constructing.')); end;
shuffle_num=0;
test_string = sprintf('%s_%s',prefix_base,xxxcluster_uADZSZDA_xfix_gen_ver1('dexnb_trace_ZRmax',rev_flag,A_n_rind_,Z_n_rind_,T_n_cind,GLOBAL_TEST_sparse,gamma,B_MLT,Ireq,shuffle_num));
if (verbose>1); disp(sprintf(' test_string: %s',test_string)); end;
dir_0in = sprintf('%s/dir_%s',dir_trunk,prefix_base);
if (verbose>1); disp(sprintf(' dir_0in: %s',dir_0in)); end;
if (~exist(dir_0in,'dir')); disp(sprintf(' %% mkdir %s',dir_0in)); mkdir(dir_0in); end;
dir_out = sprintf('%s/dir_%s',dir_0in,test_string); 
if (verbose>1); disp(sprintf(' dir_out: %s',dir_out)); end;
end;%if (isempty(dir_out));
if (verbose>0); disp(sprintf(' %% [entering test_loader_dexcluster_nonbinary_trace_ZRmax_recursive_1]: dir_out %s',dir_out)); end;
if (~exist(dir_out,'dir')); disp(sprintf(' %% mkdir %s',dir_out)); mkdir(dir_out); end;
%%%%%%%%;
str_base = sprintf('%s/base.mat',dir_out);
if (~exist(str_base,'file'));
if (verbose>1); disp(sprintf(' %% %s not found, creating',str_base)); end;
save(str_base,'E_array_r_ij_','E_array_c_ij_','gamma','n_shuffle','prefix_base','dir_out','p_set');
end;%if (~exist(str_base,'file'));
%%%%%%%%;
dir_trace = sprintf('%s/dir_trace',dir_out); 
if (~exist(dir_trace,'dir')); disp(sprintf(' %% mkdir %s',dir_trace)); mkdir(dir_trace); end;
dir_jpg = sprintf('%s/dir_jpg',dir_out); 
if (~exist(dir_jpg,'dir')); disp(sprintf(' %% mkdir %s',dir_jpg)); mkdir(dir_jpg); end;
%%%%%%%%;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;

if nargout==1; %<-- extract labels. ;
output_label_ = cell(n_u,1); for nu=1:n_u; output_label_{nu} = '0'; end;
str_branch = sprintf('%s/branch.mat',dir_out);
load(str_branch,'type_code');
%%%%%%%%;
if (strcmp(type_code,'stop'));
if (verbose>1); disp(sprintf(' %% %s --> stop',dir_out)); end;
end;%if (strcmp(type_code,'stop'));
%%%%%%%%;
if (strcmp(type_code,'split'));
if (verbose>1); disp(sprintf(' %% %s --> split',dir_out)); end;
load(str_branch,'branch_A_r_ij_','branch_B_r_ij_');
dir_A_out = sprintf('%s/dir_A',dir_out); if (~exist(dir_A_out,'dir')); disp(sprintf(' %% mkdir %s',dir_A_out)); mkdir(dir_A_out); end;
E_array_A_r_ij_ = E_array_r_ij_(branch_A_r_ij_); E_array_A_c_ij_ = E_array_c_ij_;
if (verbose>1); disp(sprintf(' %% %s <-- calling (n_sample = %d)',dir_A_out,length(E_array_A_r_ij_))); end;
tmp_label_ = test_loader_dexcluster_nonbinary_trace_ZRmax_recursive_1(dir_trunk,dir_A_out,prefix_base,E_array_base_,E_array_A_r_ij_,E_array_A_c_ij_,gamma,n_shuffle,p_set,n_member_lob);
for nu=1:length(branch_A_r_ij_);
tmp_ij = branch_A_r_ij_(nu);
output_label_{tmp_ij} = sprintf('%s%s',sprintf('A'),tmp_label_{nu});
end;%for nu=1:length(branch_A_r_ij_);
dir_B_out = sprintf('%s/dir_B',dir_out); if (~exist(dir_B_out,'dir')); disp(sprintf(' %% mkdir %s',dir_B_out)); mkdir(dir_B_out); end;
E_array_B_r_ij_ = E_array_r_ij_(branch_B_r_ij_); E_array_B_c_ij_ = E_array_c_ij_;
if (verbose>1); disp(sprintf(' %% %s <-- calling (n_sample = %d)',dir_B_out,length(E_array_B_r_ij_))); end;
tmp_label_ = test_loader_dexcluster_nonbinary_trace_ZRmax_recursive_1(dir_trunk,dir_B_out,prefix_base,E_array_base_,E_array_B_r_ij_,E_array_B_c_ij_,gamma,n_shuffle,p_set,n_member_lob);
for nu=1:length(branch_B_r_ij_);
tmp_ij = branch_B_r_ij_(nu);
output_label_{tmp_ij} = sprintf('%s%s',sprintf('B'),tmp_label_{nu});
end;%for nu=1:length(branch_B_r_ij_);
end;%if (strcmp(type_code,'split'));
%%%%%%%%;
end;%if nargout==1;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;

if nargout==0; %<-- calculation. ;

%%%%%%%%;
shuffle_num=0;
str_trace = sprintf('%s/out_trace_s%.4d.txt',dir_trace,shuffle_num);
str_xdrop = sprintf('%s/out_xdrop_a.txt',dir_out);
if (exist(str_trace,'file') & ~flag_force_create);
if (verbose>1); disp(sprintf(' %% %s found, not creating',str_trace)); end;
out_trace_E_0_ = textread(str_trace);
end;%if (exist(str_trace,'file') & ~flag_force_create);
if (~(exist(str_trace,'file')) |  flag_force_create);
if (verbose>1); disp(sprintf(' %% %s not found, creating',str_trace)); end;
L_array_ = mean_center_0(E_array_base_(E_array_r_ij_,E_array_c_ij_));
[out_xdrop_E_0_,out_trace_E_0_] = dexcluster_nonbinary_AAAA_ver0(L_array_,gamma);
rdrop_E_0_ = 1+out_xdrop_E_0_(find(out_xdrop_E_0_(:,1)>-1),1); rkeep_E_0_ = rdrop_E_0_(end:-1:1);
cdrop_E_0_ = 1+out_xdrop_E_0_(find(out_xdrop_E_0_(:,2)>-1),2); ckeep_E_0_ = cdrop_E_0_(end:-1:1);
n_iter_ = out_trace_E_0_(:,1); r_rem_ = out_trace_E_0_(:,2); c_rem_ = out_trace_E_0_(:,3);
rkeep_E_0_ij_ = r_rem_(end:-1:1); ckeep_E_0_ij_ = c_rem_(end:-1:1);
clear L_array_;
fp=fopen(str_trace,'w');
fprintf(fp,'%d %d %d %0.16f %0.16f %d\n',transpose(out_trace_E_0_));
fclose(fp);
fp=fopen(str_xdrop,'w');
fprintf(fp,'%d %d\n',transpose(out_xdrop_E_0_));
fclose(fp);
end;%if (~(exist(str_trace,'file')) |  flag_force_create);
%%%%%%%%;
tmp_p_ = randperm(n_shuffle);
for nshuffle=1:n_shuffle;
shuffle_num = tmp_p_(nshuffle);
str_trace = sprintf('%s/out_trace_s%.4d.txt',dir_trace,shuffle_num); 
if ( (exist(str_trace,'file')) & ~flag_force_create);
if (verbose>1); disp(sprintf(' %% %s found, not creating',str_trace)); end;
end;%if ( (exist(str_trace,'file')) & ~flag_force_create);
if (~(exist(str_trace,'file')) |  flag_force_create);
if (verbose>1); disp(sprintf(' %% %d/%d: %s not found, creating',nshuffle,n_shuffle,str_trace)); end;
rng(nshuffle); [tmp_Q_,~] = qr(randn(n_u));
L_array_ = mean_center_0(tmp_Q_*mean_center_0(E_array_base_(E_array_r_ij_,E_array_c_ij_)));
[out_xdrop_E_0_,out_trace_E_0_] = dexcluster_nonbinary_AAAA_ver0(L_array_,gamma);
rdrop_E_0_ = 1+out_xdrop_E_0_(find(out_xdrop_E_0_(:,1)>-1),1); rkeep_E_0_ = rdrop_E_0_(end:-1:1);
cdrop_E_0_ = 1+out_xdrop_E_0_(find(out_xdrop_E_0_(:,2)>-1),2); ckeep_E_0_ = cdrop_E_0_(end:-1:1);
n_iter_ = out_trace_E_0_(:,1); r_rem_ = out_trace_E_0_(:,2); c_rem_ = out_trace_E_0_(:,3);
rkeep_E_0_ij_ = r_rem_(end:-1:1); ckeep_E_0_ij_ = c_rem_(end:-1:1);
clear tmp_Q_ L_array_;
fp=fopen(str_trace,'w');
fprintf(fp,'%d %d %d %0.16f %0.16f %d\n',transpose(out_trace_E_0_));
fclose(fp);
end;%if (~(exist(str_trace,'file')) |  flag_force_create);
end;%for nshuffle=1:n_shuffle;
%%%%%%%%;

%%%%%%%%;
str_branch = sprintf('%s/branch.mat',dir_out);
if ( exist(str_branch,'file'));
load(str_branch);
end;%if ( exist(str_branch,'file'));
if (~exist(str_branch,'file'));
if (verbose>1); disp(sprintf(' %% %s not found, creating',str_branch)); end;
%%%%%%%%;
str_xdrop = sprintf('%s/out_xdrop_a.txt',dir_out);
fcheck(str_xdrop);
out_xdrop_E_0_ = textread(str_xdrop);
rdrop_E_0_ = 1+out_xdrop_E_0_(find(out_xdrop_E_0_(:,1)>-1),1); rkeep_E_0_ = rdrop_E_0_(end:-1:1);
cdrop_E_0_ = 1+out_xdrop_E_0_(find(out_xdrop_E_0_(:,2)>-1),2); ckeep_E_0_ = cdrop_E_0_(end:-1:1);
%%%%%%%%;
trace_ = cell(1+n_shuffle,1);
for nshuffle=0:n_shuffle;
fcheck(sprintf('%s/out_trace_s%0.4d.txt',dir_trace,nshuffle));
trace_{1+nshuffle} = textread(sprintf('%s/out_trace_s%0.4d.txt',dir_trace,nshuffle));
end;%for nshuffle=1:n_shuffle;
trace_s0000_ = trace_{1};
QR_ = zeros(size(trace_s0000_,1),1+n_shuffle);
QC_ = zeros(size(trace_s0000_,1),1+n_shuffle);
for nshuffle=0:n_shuffle;
tmp_d = min(length(trace_s0000_(:,1)),length(trace_{1+nshuffle}(:,1)));
QR_(1:tmp_d,1+nshuffle) = trace_{1+nshuffle}(1:tmp_d,4);
QC_(1:tmp_d,1+nshuffle) = trace_{1+nshuffle}(1:tmp_d,5);
end;%for nshuffle=1:n_shuffle;
n_iter_ = trace_s0000_(:,1); n_iteration = n_iter_(end);
r_rem_ = trace_s0000_(:,2);
c_rem_ = trace_s0000_(:,3);
%%%%%%%%;
QR_avg_ = mean(QR_(:,2:end),2); QR_std_ = std(QR_(:,2:end),[],2);
ZR_ = (QR_ - repmat(QR_avg_,1,1+n_shuffle))./repmat(QR_std_,1,1+n_shuffle);
QC_avg_ = mean(QC_(:,2:end),2); QC_std_ = std(QC_(:,2:end),[],2);
ZC_ = (QC_ - repmat(QC_avg_,1,1+n_shuffle))./repmat(QC_std_,1,1+n_shuffle);
%%%%%%%%;
lp_R_ = z_to_p_0(ZR_); lp_C_ = z_to_p_0(ZC_);
[lp_R_max,ZR_ij] = max(-lp_R_(:,1));
r_rem_E_cut = r_rem_(ZR_ij); c_rem_E_cut = c_rem_(ZR_ij); n_rank = 2;
L_array_ = mean_center_0(E_array_base_(E_array_r_ij_,E_array_c_ij_));
[tmp_U_,~,tmp_V_] = svds( L_array_(rkeep_E_0_(1:r_rem_E_cut),ckeep_E_0_(1:c_rem_E_cut)) ,n_rank);
tmp_E1_pos_ = L_array_(:,ckeep_E_0_(1:c_rem_E_cut))*tmp_V_; %<-- original. ;
E1_ZRmax_label_ = zeros(n_u,1); E1_ZRmax_label_(rkeep_E_0_(1:r_rem_E_cut)) = 1;
clear L_array_;
%%%%%%%%;
if n_iteration>1;
str_fig = sprintf('%s/base_ZRmax',dir_jpg);
if (~exist(sprintf('%s.jpg',str_fig),'file'));
if (verbose); disp(sprintf(' %% %s not found, creating',sprintf('%s.jpg',str_fig))); end;
figure(1);
clf;
subplot(1,2,1); hold on;
plot(n_iter_,-lp_R_(:,2:end),'k-','LineWidth',1);
plot(n_iter_,-lp_R_(:,1),'r-','LineWidth',2);
plot(n_iter_(ZR_ij),-lp_R_(ZR_ij,1),'go');
hold off;
xlim([0,n_iteration]);
xlabel('iteration'); ylabel('-log(p(ZR))'); title(sprintf('%s: -log(p(ZR)) vs iteration',dir_out),'Interpreter','none');
subplot(1,2,2); hold on;
scatter(tmp_E1_pos_(:,1),tmp_E1_pos_(:,2),25,E1_ZRmax_label_); colormap('lines');
hold off;
xlabel('pc1');ylabel('pc2'); title('scatterplot');
figbig;
print('-depsc',sprintf('%s.eps',str_fig));
print('-djpeg',sprintf('%s.jpg',str_fig));
end;%if (~exist(sprintf('%s.jpg',str_fig),'file'));
end;%if n_iteration>1;
%%%%%%%%;
if n_iteration>1;
str_fig = sprintf('%s/base_QZ',dir_jpg);
if (~exist(sprintf('%s.jpg',str_fig),'file'));
if (verbose); disp(sprintf(' %% %s not found, creating',sprintf('%s.jpg',str_fig))); end;
figure(1);
clf;
subplot(1,2,1); hold on;
plot(n_iter_,ZR_(:,2:end),'k-','LineWidth',1);
plot(n_iter_,ZR_(:,1),'r-','LineWidth',2);
hold off;
xlim([0,n_iteration]);
xlabel('iteration'); ylabel('ZR'); title(sprintf('%s: ZR vs iteration',dir_out),'Interpreter','none');
subplot(1,2,2); hold on;
plot(n_u-r_rem_,ZR_(:,2:end),'k-','LineWidth',1);
plot(n_u-r_rem_,ZR_(:,1),'r-','LineWidth',2);
hold off;
xlim([0,n_u]);
xlabel('samples remaining'); ylabel('ZR'); title(sprintf('%s: ZR vs sample',dir_out),'Interpreter','none');
figbig;
print('-depsc',sprintf('%s.eps',str_fig));
print('-djpeg',sprintf('%s.jpg',str_fig));
end;%if (~exist(sprintf('%s.jpg',str_fig),'file'));
end;%if n_iteration>1;
%%%%%%%%;
flag_split=1;
p_branch = 1;
%%%%%%%%;
if (lp_R_max< -log(p_set)); 
if (verbose>1); disp(sprintf(' %% lp_R_max %0.6f; not significant. ;',lp_R_max));  end;
end;%if (lp_R_max< -log(p_set));  
%%%%%%%%;
if (lp_R_max>=-log(p_set)); 
if (verbose>1); disp(sprintf(' %% lp_R_max %0.6f; statistically significant, ZR_ij %d. ;',lp_R_max,ZR_ij)); end;
%%%%%%%%;
% cleaning up rows. ;
%%%%%%%%;
gamma_rdrop = 0;
%%%%%%%%;
% First recalculate original trace. ;
%%%%%%%%;
shuffle_num=0;
str_trace = sprintf('%s/out_trace_F_s%.4d.txt',dir_trace,shuffle_num);
str_xdrop = sprintf('%s/out_xdrop_F_a.txt',dir_out);
if (exist(str_trace,'file') & ~flag_force_create);
if (verbose>1); disp(sprintf(' %% %s found, not creating',str_trace)); end;
out_trace_F_0_ = textread(str_trace);
end;%if (exist(str_trace,'file') & ~flag_force_create);
if (~(exist(str_trace,'file')) |  flag_force_create);
if (verbose>1); disp(sprintf(' %% %s not found, creating',str_trace)); end;
L_array_ = mean_center_0(E_array_base_(E_array_r_ij_,E_array_c_ij_(ckeep_E_0_(1:c_rem_E_cut))));
[out_xdrop_F_0_,out_trace_F_0_] = dexcluster_nonbinary_AAAA_rdrop_ver0(L_array_,gamma_rdrop);
rdrop_F_0_ = 1+out_xdrop_F_0_(find(out_xdrop_F_0_(:,1)>-1),1); rkeep_F_0_ = rdrop_F_0_(end:-1:1);
n_iter_F_ = out_trace_F_0_(:,1); r_rem_F_ = out_trace_F_0_(:,2);
rkeep_F_0_ij_ = r_rem_F_(end:-1:1);
clear L_array_;
fp=fopen(str_trace,'w');
fprintf(fp,'%d %d %d %0.16f %0.16f %d\n',transpose(out_trace_F_0_));
fclose(fp);
fp=fopen(str_xdrop,'w');
fprintf(fp,'%d %d\n',transpose(out_xdrop_F_0_));
fclose(fp);
end;%if (~(exist(str_trace,'file')) |  flag_force_create);
%%%%%%%%;
% Now recalculate shuffled traces. ;
%%%%%%%%;
tmp_p_ = randperm(n_shuffle);
for nshuffle=1:n_shuffle;
shuffle_num = tmp_p_(nshuffle);
str_trace = sprintf('%s/out_trace_F_s%.4d.txt',dir_trace,shuffle_num); 
if ( (exist(str_trace,'file')) & ~flag_force_create);
if (verbose>1); disp(sprintf(' %% %s found, not creating',str_trace)); end;
end;%if ( (exist(str_trace,'file')) & ~flag_force_create);
if (~(exist(str_trace,'file')) |  flag_force_create);
if (verbose>1); disp(sprintf(' %% %d/%d: %s not found, creating',nshuffle,n_shuffle,str_trace)); end;
rng(nshuffle); [tmp_Q_,~] = qr(randn(n_u));
L_array_ = mean_center_0(tmp_Q_*mean_center_0(E_array_base_(E_array_r_ij_,E_array_c_ij_(ckeep_E_0_(1:c_rem_E_cut)))));
[out_xdrop_F_0_,out_trace_F_0_] = dexcluster_nonbinary_AAAA_rdrop_ver0(L_array_,gamma_rdrop);
rdrop_F_0_ = 1+out_xdrop_F_0_(find(out_xdrop_F_0_(:,1)>-1),1); rkeep_F_0_ = rdrop_F_0_(end:-1:1);
n_iter_F_ = out_trace_F_0_(:,1); r_rem_F_ = out_trace_F_0_(:,2);
rkeep_F_0_ij_ = r_rem_F_(end:-1:1);
clear tmp_Q_ L_array_;
fp=fopen(str_trace,'w');
fprintf(fp,'%d %d %d %0.16f %0.16f %d\n',transpose(out_trace_F_0_));
fclose(fp);
end;%if (~(exist(str_trace,'file')) |  flag_force_create);
end;%for nshuffle=1:n_shuffle;
%%%%%%%%;
% Now extract out_xdrop_F. ;
%%%%%%%%;
str_xdrop = sprintf('%s/out_xdrop_F_a.txt',dir_out);
fcheck(str_xdrop);
out_xdrop_F_0_ = textread(str_xdrop);
rdrop_F_0_ = 1+out_xdrop_F_0_(find(out_xdrop_F_0_(:,1)>-1),1); rkeep_F_0_ = rdrop_F_0_(end:-1:1);
%%%%%%%%;
% Now extract trace_F. ;
%%%%%%%%;
trace_F_ = cell(1+n_shuffle,1);
for nshuffle=0:n_shuffle;
fcheck(sprintf('%s/out_trace_F_s%0.4d.txt',dir_trace,nshuffle));
trace_F_{1+nshuffle} = textread(sprintf('%s/out_trace_F_s%0.4d.txt',dir_trace,nshuffle));
end;%for nshuffle=1:n_shuffle;
trace_F_s0000_ = trace_F_{1};
QR_F_ = zeros(size(trace_F_s0000_,1),1+n_shuffle);
QC_F_ = zeros(size(trace_F_s0000_,1),1+n_shuffle);
for nshuffle=0:n_shuffle;
tmp_d = min(length(trace_F_s0000_(:,1)),length(trace_F_{1+nshuffle}(:,1)));
QR_F_(1:tmp_d,1+nshuffle) = trace_F_{1+nshuffle}(1:tmp_d,4);
QC_F_(1:tmp_d,1+nshuffle) = trace_F_{1+nshuffle}(1:tmp_d,5);
end;%for nshuffle=1:n_shuffle;
n_iter_F_ = trace_F_s0000_(:,1); n_iteration_F = n_iter_F_(end);
r_rem_F_ = trace_F_s0000_(:,2);
%%%%%%%%;
% Now calculate ZR_F. ;
%%%%%%%%;
QR_F_avg_ = mean(QR_F_(:,2:end),2); QR_F_std_ = std(QR_F_(:,2:end),[],2);
ZR_F_ = (QR_F_ - repmat(QR_F_avg_,1,1+n_shuffle))./repmat(QR_F_std_,1,1+n_shuffle);
QC_F_avg_ = mean(QC_F_(:,2:end),2); QC_F_std_ = std(QC_F_(:,2:end),[],2);
ZC_F_ = (QC_F_ - repmat(QC_F_avg_,1,1+n_shuffle))./repmat(QC_F_std_,1,1+n_shuffle);
%%%%%%%%;
% Now define F1_ZRmax_label_. ;
%%%%%%%%;
lp_R_F_ = z_to_p_0(ZR_F_); lp_R_F_ij_ = find( (r_rem_F_>n_member_lob) & ((n_u - r_rem_F_)>n_member_lob) );
[lp_R_F_max,ZR_F_ij] = max(-lp_R_F_(lp_R_F_ij_,1)); ZR_F_ij = lp_R_F_ij_(ZR_F_ij);
r_rem_F_cut = r_rem_F_(ZR_F_ij); n_rank = 2;
L_array_ = mean_center_0(E_array_base_(E_array_r_ij_,E_array_c_ij_));
[tmp_U_,~,tmp_V_] = svds( L_array_(rkeep_F_0_(1:r_rem_F_cut),ckeep_E_0_(1:c_rem_E_cut)) ,n_rank);
tmp_F1_pos_ = L_array_(:,ckeep_E_0_(1:c_rem_E_cut))*tmp_V_; %<-- original. ;
F1_ZRmax_label_ = zeros(n_u,1); F1_ZRmax_label_(rkeep_F_0_(1:r_rem_F_cut)) = 1;
clear L_array_;
%%%%%%%%;
if n_iteration>1;
str_fig = sprintf('%s/base_ZRmax_F',dir_jpg);
if (~exist(sprintf('%s.jpg',str_fig),'file'));
if (verbose); disp(sprintf(' %% %s not found, creating',sprintf('%s.jpg',str_fig))); end;
figure(1);
clf;
subplot(2,2,1); hold on;
plot(n_iter_,-lp_R_(:,2:end),'k-','LineWidth',1);
plot(n_iter_,-lp_R_(:,1),'r-','LineWidth',2);
plot(n_iter_(ZR_ij),-lp_R_(ZR_ij,1),'go');
hold off;
xlim([0,n_iteration]);
xlabel('iteration'); ylabel('-log(p(ZR))'); title(sprintf('%s: -log(p(ZR_E)) vs iteration',dir_out),'Interpreter','none');
subplot(2,2,3); hold on;
plot(n_iter_F_,-lp_R_F_(:,2:end),'k-','LineWidth',1);
plot(n_iter_F_,-lp_R_F_(:,1),'r-','LineWidth',2);
plot(n_iter_F_(ZR_F_ij),-lp_R_F_(ZR_F_ij,1),'go');
hold off;
xlim([0,n_iteration]);
xlabel('iteration'); ylabel('-log(p(ZR))'); title(sprintf('%s: -log(p(ZR_F)) vs iteration',dir_out),'Interpreter','none');
subplot(2,2,2); hold on;
scatter(tmp_E1_pos_(:,1),tmp_E1_pos_(:,2),25,E1_ZRmax_label_); colormap('lines');
hold off;
xlabel('pc1');ylabel('pc2'); title('scatterplot E');
subplot(2,2,4); hold on;
scatter(tmp_F1_pos_(:,1),tmp_F1_pos_(:,2),25,F1_ZRmax_label_); colormap('lines');
hold off;
xlabel('pc1');ylabel('pc2'); title('scatterplot F');
figbig;
print('-depsc',sprintf('%s.eps',str_fig));
print('-djpeg',sprintf('%s.jpg',str_fig));
end;%if (~exist(sprintf('%s.jpg',str_fig),'file'));
end;%if n_iteration>1;
%%%%%%%%;
p_branch = exp(-lp_R_F_max);
tmp_u_ = unique(F1_ZRmax_label_); flag_split = (length(tmp_u_)==2); if (flag_split); flag_split = flag_split & length(find(F1_ZRmax_label_==tmp_u_(1)))>n_member_lob; end; if (flag_split); flag_split = flag_split & length(find(F1_ZRmax_label_==tmp_u_(2)))>n_member_lob; end;
%%%%%%%%;
if ~flag_split;
type_code = 'stop';
p_branch = 1;
branch_A_r_ij_ = [];
branch_B_r_ij_ = [];
save(str_branch,'trace_','trace_F_','QR_','QC_','ZR_','ZC_','QR_F_','ZR_F_','lp_R_','lp_R_max','lp_R_F_','lp_R_F_max','p_set','p_branch','type_code','ZR_ij','ZR_F_ij','branch_A_r_ij_','branch_B_r_ij_','E1_ZRmax_label_','F1_ZRmax_label_');
 else; 
type_code = 'split';
p_branch = p_branch;
branch_A_r_ij_ = find(F1_ZRmax_label_==tmp_u_(1));
branch_B_r_ij_ = find(F1_ZRmax_label_==tmp_u_(2));
save(str_branch,'trace_','trace_F_','QR_','QC_','ZR_','ZC_','QR_F_','ZR_F_','lp_R_','lp_R_max','lp_R_F_','lp_R_F_max','p_set','p_branch','type_code','ZR_ij','ZR_F_ij','branch_A_r_ij_','branch_B_r_ij_','E1_ZRmax_label_','F1_ZRmax_label_');
end;%if flag_split;
%%%%%%%%;
end;%if (lp_R_max>=-log(p_set)); 
%%%%%%%%;
if ((lp_R_max<-log(p_set)) | ~flag_split);
type_code = 'stop';
branch_A_r_ij_ = [];
branch_B_r_ij_ = [];
if (~exist(str_branch,'file')); 
save(str_branch,'trace_','QR_','QC_','ZR_','ZC_','lp_R_','lp_R_max','p_set','p_branch','type_code','ZR_ij','branch_A_r_ij_','branch_B_r_ij_','E1_ZRmax_label_');
end;%if (~exist(str_branch,'file')); 
end;%if ((lp_R_max<-log(p_set)) | ~flag_split);
%%%%%%%%;
end;%if (~exist(str_branch,'file'));

str_branch = sprintf('%s/branch.mat',dir_out);
pause(1.0);
load(str_branch);
if strcmp(type_code,'stop');
if (verbose>1); disp(sprintf(' %% %s --> stop',dir_out)); end;
end;%if strcmp(type_code,'stop');
if strcmp(type_code,'split');
if (verbose>1); disp(sprintf(' %% %s --> split',dir_out)); end;
dir_A_out = sprintf('%s/dir_A',dir_out); if (~exist(dir_A_out,'dir')); disp(sprintf(' %% mkdir %s',dir_A_out)); mkdir(dir_A_out); end;
E_array_A_r_ij_ = E_array_r_ij_(branch_A_r_ij_); E_array_A_c_ij_ = E_array_c_ij_;
if (verbose>1); disp(sprintf(' %% %s <-- calling (n_sample = %d)',dir_A_out,length(E_array_A_r_ij_))); end;
test_loader_dexcluster_nonbinary_trace_ZRmax_recursive_1(dir_trunk,dir_A_out,prefix_base,E_array_base_,E_array_A_r_ij_,E_array_A_c_ij_,gamma,n_shuffle,p_set,n_member_lob);
dir_B_out = sprintf('%s/dir_B',dir_out); if (~exist(dir_B_out,'dir')); disp(sprintf(' %% mkdir %s',dir_B_out)); mkdir(dir_B_out); end;
E_array_B_r_ij_ = E_array_r_ij_(branch_B_r_ij_); E_array_B_c_ij_ = E_array_c_ij_;
if (verbose>1); disp(sprintf(' %% %s <-- calling (n_sample = %d)',dir_B_out,length(E_array_B_r_ij_))); end;
test_loader_dexcluster_nonbinary_trace_ZRmax_recursive_1(dir_trunk,dir_B_out,prefix_base,E_array_base_,E_array_B_r_ij_,E_array_B_c_ij_,gamma,n_shuffle,p_set,n_member_lob);
end;%if strcmp(type_code,'split');

end;%if nargout==0; %<-- calculation. ;
