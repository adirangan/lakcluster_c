function [rank_estimate_sample,s_B_nlp_,svd_sample__,eig_tw__,eig_B_,kta_opt__,h_x__,h_eig__,h_opt__] = rank_estimate_sample_fullperm_1(A__,p_val_0in,n_shuffle);
% iteratively estimates the rank of a matrix A__. ;
% compare with rank_estimate_tracywidom_0. ;
if (nargin<1);
rng(0);
A__ = randn(128,256);
n_rank = 5;
[U__,S__,V__] = svds(A__,min(size(A__))); S_ = diag(S__); S_(1+n_rank:end) = S_(1+n_rank:end)*0.925;
A__ = U__*diag(S_)*transpose(V__);
[rank_estimate_sample,s_B_nlp_,svd_sample__,eig_B_,eig_tw__,kta_opt__,h_x__,h_eig__,h_opt__] = rank_estimate_sample_fullperm_1(A__);
disp('returning'); return;
end;%if (nargin<1);

if (nargin<2); p_val_0in = 0.01; end;
if (nargin<3); n_shuffle = 128; end;

verbose=1;
kta_wis_ = [ 46.44604884387787 ; 0.18605402228279347 ; 9.848007781128567 ]; %<-- k, theta, alpha for wishart matrices with beta==1. ;
[n_row,n_col] = size(A__); n_dim = min(n_row,n_col);
rank_estimate_sample = 0;
s_B_nlp_ = zeros(n_dim,1);
svd_sample__ = zeros(n_shuffle,n_dim);
eig_tw__ = zeros(n_shuffle,n_dim);
eig_B_ = zeros(n_dim);
kta_opt__ = zeros(3,n_dim);
n_h = 32;
h_x__ = zeros(n_h,n_dim);
h_eig__ = zeros(n_h,n_dim);
h_opt__ = zeros(n_h,n_dim);
B__ = (A__ - mean(A__,'all'))/std(A__,1,'all');
p_val_use = p_val_0in/(1+p_val_0in); %<-- now sum(p_val_use.^[1:Inf]) = p_val_0in. ;
continue_flag=1;
while (continue_flag);
if (verbose); disp(sprintf(' %% rank_estimate_sample %d/%d',rank_estimate_sample,n_dim)); end;
[U_B__,S_B__,V_B__] = svds(B__,n_dim); s_B = S_B__(1,1);
svd_sample_ = zeros(n_shuffle,1);
for nshuffle=0:n_shuffle-1;
if (verbose & mod(nshuffle,16)==0); disp(sprintf(' %% nshuffle %d/%d',nshuffle,n_shuffle)); end;
rng(1024*nshuffle); C__(:) = B__(randperm(n_row*n_col));
svd_sample_(1+nshuffle) = svds(C__,1);
end;%for nshuffle=0:n_shuffle-1;
svd_sample__(:,1+rank_estimate_sample) = svd_sample_;
a1 = -0.5; a2 = -0.5; %<-- beta = 1 for real. ;
avg_tw = ( sqrt(n_row + a1) + sqrt(n_col + a2) ).^2 ;
std_tw = sqrt(avg_tw) * ( 1/sqrt(n_row + a1) + 1/sqrt(n_col + a2) ).^(1/3);
eig_tw_ = (svd_sample_.^2 - avg_tw)/std_tw;
eig_tw__(:,1+rank_estimate_sample) = eig_tw_;
h_x_ = transpose(linspace(min(eig_tw_),max(eig_tw_),n_h));
h_x__(:,1+rank_estimate_sample) = h_x_;
h_eig_ = hist(eig_tw_,h_x_); h_eig_ = h_eig_/sum(h_eig_)/mean(diff(h_x_));
h_eig__(:,1+rank_estimate_sample) = h_eig_;
tw_nll = @(kta_) sum(tw_chiani_nll(eig_tw_,kta_(1+0),kta_(1+1),kta_(1+2)));
if (rank_estimate_sample==0); kta_ini_ = kta_wis_; end;
if (rank_estimate_sample> 0); kta_ini_ = kta_opt__(:,1+rank_estimate_sample-1); end;
kta_opt_ = fminsearch(tw_nll,kta_wis_,optimset('MaxIter',1e4,'MaxFunEvals',1e4));
kta_opt__(:,1+rank_estimate_sample) = kta_opt_;
h_opt_ = tw_chiani_pdf(h_x_,[],kta_opt_);
h_opt__(:,1+rank_estimate_sample) = h_opt_;
eig_B = (s_B.^2 - avg_tw)/std_tw;
eig_B_(1+rank_estimate_sample) = eig_B;
s_B_p_val = 1-tw_chiani_cdf(eig_B,[],kta_opt_);
s_B_nlp = -log(s_B_p_val);
if (verbose); disp(sprintf(' %% k %0.6f theta %0.6f alpha %0.6f --> p %0.6f = exp(-%0.6f)',kta_opt_,s_B_p_val,s_B_nlp)); end;
s_B_nlp_(1+rank_estimate_sample) = s_B_nlp;
if (s_B_p_val<=p_val_use);
rank_estimate_sample = rank_estimate_sample+1;
B__ = transpose(U_B__(:,2:end))*B__;
B__ = (B__ - mean(B__,'all'))/std(B__,1,'all');
[n_row,n_col] = size(B__); n_dim = min(n_row,n_col);
continue_flag=1;
else;%if (s_B_p_val> p_val_use);
continue_flag=0;
end;%if (s_B< svd_sample_threshold);
end;%while (continue_flag);
s_B_nlp_ = s_B_nlp_(1:rank_estimate_sample+1);
eig_B_ = eig_B_(1:rank_estimate_sample+1);
svd_sample__ = svd_sample__(:,1:rank_estimate_sample+1);
eig_tw__ = eig_tw__(:,1:rank_estimate_sample+1);
kta_opt__ = kta_opt__(:,1:rank_estimate_sample+1);
h_x__ = h_x__(:,1:rank_estimate_sample+1);
h_eig__ = h_eig__(:,1:rank_estimate_sample+1);
h_opt__ = h_opt__(:,1:rank_estimate_sample+1);

if (verbose);
figure(1);clf;
hold on;
for nrank=0:rank_estimate_sample+1-1;
tmp_h_max = max(max(h_eig__(:,1+nrank)),max(h_opt__(:,1+nrank)));
tmp_h_min = min(min(h_eig__(:,1+nrank)),min(h_opt__(:,1+nrank)));
tmp_eig_max = max(h_x__(:,1+nrank)) + 0.125*( max(h_x__(:,1+nrank)) - min(h_x__(:,1+nrank)) );
stairs(h_x__(:,1+nrank),nrank*1 + h_eig__(:,1+nrank)/tmp_h_max,'k-');
plot(h_x__(:,1+nrank),nrank*1 + h_opt__(:,1+nrank)/tmp_h_max,'r-');
plot(h_x__(:,1+nrank),nrank*1 + 0*ones(n_h,1),'k-');
if (eig_B_(1+nrank)< tmp_eig_max); plot(eig_B_(1+nrank)*[1;1],nrank*1 + [0;1],'g-','LineWidth',2); end;
if (eig_B_(1+nrank)>=tmp_eig_max); plot(tmp_eig_max*[1;1],nrank*1 + [0;1],'g:','LineWidth',2); end;
end;%for nrank=0:rank_estimate_sample+1-1;
end;%if (verbose);
hold off;
xlabel('eig');
ylabel('rank');
axis tight;
title(sprintf('rank %d',rank_estimate_sample));

if (verbose); 
S_A_ = svds(A__,min(size(A__))); n_dim = min(size(A__));
figure(2); clf;
hold on;
plot(1:n_dim,S_A_,'ko-','MarkerSize',15);
plot(1:rank_estimate_sample,S_A_(1:rank_estimate_sample),'rx','MarkerSize',15);
xlim([1,n_dim]); xlabel('rank');ylabel('sigma'); 
title(sprintf('rank %d',rank_estimate_sample));
end;%if (verbose); 

