function [lpv,lP_0,flag_method,cap_,cup_] = label_to_label_enrichment_2(label_A_,label_B_);
% Calculates enrichment p-value. ;
% Assumes numeric labels, although labels do not need to be sequential. ;
% lpv = log of p-value (estimated). ;
% lP_0 = log of probability of achieving observed intersections. ;
%        Note that, up to a constant, this is the same as the entropy of the observed intersections. ;
% flag_method = 0 for trivial case, 
% flag_method = 1 for monte-carlo, 
% flag_method = 2 for monte-carlo + importance-sampling ;
% flag_method = 3 for simple lP0 (i.e., when importance-sampling fails). ;
% cap_ = set of intersections. ;
% cup_ = set of unions. ;
%%%%%%%%;
verbose=0;
if (verbose); disp(sprintf(' %% [entering label_to_label_enrichment_2]')); end;
lpv = 0; lP_0 = 0; flag_method = 0;
%%%%%%%%;
n_A = numel(label_A_);
u_label_A_ = unique(label_A_);
n_label_A = length(u_label_A_);
n_label_A_ = zeros(n_label_A,1);
for nlabel_A = 1:n_label_A;
ij_A_{nlabel_A} = find(label_A_ == u_label_A_(nlabel_A));
n_label_A_(nlabel_A) = numel(ij_A_{nlabel_A});
end;%for nlabel_A=1:n_label_A;
%%%%%%%%;
n_B = numel(label_B_);
u_label_B_ = unique(label_B_);
n_label_B = length(u_label_B_);
n_label_B_ = zeros(n_label_B,1);
for nlabel_B = 1:n_label_B;
ij_B_{nlabel_B} = find(label_B_ == u_label_B_(nlabel_B));
n_label_B_(nlabel_B) = numel(ij_B_{nlabel_B});
end;%for nlabel_B=1:n_label_B;
%%%%%%%%;
if (n_A~=n_B); disp(sprintf(' %% Warning! n_A %d n_B %d in label_to_label_enrichment',n_A,n_B)); end;
assert(n_A==n_B);
n_X = n_A;
%%%%%%%%;
cap_ = zeros(n_label_A,n_label_B);
cup_ = zeros(n_label_A,n_label_B);
for nlabel_A=1:n_label_A;
for nlabel_B=1:n_label_B;
cap_(nlabel_A,nlabel_B) = numel(intersect(ij_A_{nlabel_A},ij_B_{nlabel_B}));
cup_(nlabel_A,nlabel_B) = numel(union(ij_A_{nlabel_A},ij_B_{nlabel_B}));
end;%for nlabel_B=1:n_label_B;
end;%for nlabel_A=1:n_label_A;
%%%%%%%%;
% Given a list of specific sets from A, ;
% as well as the cardinality of the sets in B, ;
% the number of ways of finding the precise intersections listed in cap_ is: ;
% lN = sum(gammaln(1+n_label_A_)) - sum(gammaln(1+cap_(:))). ;
% Similarly, the probability of observing cap_ is: ;
% lP = sum(gammaln(1+n_label_A_)) - sum(gammaln(1+cap_(:))) + sum(gammaln(1+n_label_B_)) - gammaln(1+n_X). ;
%%%%%%%%;
num_A_ = zeros(n_A,1);
for nlabel_A=1:n_label_A;
num_A_(ij_A_{nlabel_A}) = nlabel_A;
end;%for nlabel_A=1:n_label_A;
num_B_ = zeros(n_B,1);
for nlabel_B=1:n_label_B;
num_B_(ij_B_{nlabel_B}) = nlabel_B;
end;%for nlabel_B=1:n_label_B;
lP_base = sum(gammaln(1+n_label_A_)) + sum(gammaln(1+n_label_B_)) - gammaln(1+n_X);
cap_0_ = sparse(num_A_,num_B_,1,n_label_A,n_label_B);
tmp_0 = sum(gammaln(1+cap_0_),'all');
lN_0 = +tmp_0;
lP_0 = lP_base - tmp_0;
flag_method = 0;
%%%%%%%%;
if (lP_0<log(0.50));
%%%%%%%%;
% First we check to see if the p-value can be approximated using monte-carlo. ;
%%%%%%%%;
n_iteration=1024;
lN_ = zeros(n_iteration,1);
lP_ = zeros(n_iteration,1);
cap__ = zeros(n_label_A,n_label_B,n_iteration);
for niteration=1:n_iteration;
tmp_cap_ = sparse(num_A_,num_B_(randperm(n_B)),1,n_label_A,n_label_B);
tmp = sum(gammaln(1+tmp_cap_),'all');
lN_(niteration) = +tmp;
lP_(niteration) = lP_base - tmp;
cap__(:,:,niteration) = tmp_cap_;
end;%for niteration=1:n_iteration;
clear tmp_cap_;
% compare mean(cap__,3) with (n_label_A_*transpose(n_label_B_)/n_X) ;
% try: ;
%{
  cap_avg__ = mean(cap__,3);
  cap_bar__ = (n_label_A_*transpose(n_label_B_)/n_X);
  disp(sprintf(' %% relative deviation: %0.16f',fnorm(cap_avg__-cap_bar__)/fnorm(cap_bar__)));
  %}
[~,u_cap_ij_] = unique(transpose(reshape(cap__,n_label_A*n_label_B,n_iteration)),'row');
clear cap__;
n_u = numel(u_cap_ij_);
lN_u_ = lN_(u_cap_ij_);
lP_u_ = lP_(u_cap_ij_);
%%%%%%%%;
% if lN_0 falls in the range observed, we can ;
% model the probability of observing lN_u (w.r.t. sampling label_B_) ;
% as a gaussian in lN_u. ;
%%%%%%%%;
if (lN_0<prctile(lN_u_,95));
if (verbose); disp(sprintf(' %% using monte-carlo (flag_method == 1)')); end;
n_iteration=1024*8;
lN_ = zeros(n_iteration,1);
lP_ = zeros(n_iteration,1);
cap__ = zeros(n_label_A,n_label_B,n_iteration);
for niteration=1:n_iteration;
tmp_cap_ = sparse(num_A_,num_B_(randperm(n_B)),1,n_label_A,n_label_B);
tmp = sum(gammaln(1+tmp_cap_),'all');
lN_(niteration) = +tmp;
lP_(niteration) = lP_base - tmp;
cap__(:,:,niteration) = tmp_cap_;
end;%for niteration=1:n_iteration;
[~,u_cap_ij_] = unique(transpose(reshape(cap__,n_label_A*n_label_B,n_iteration)),'row');
clear tmp_cap_; clear cap__;
n_u = numel(u_cap_ij_);
lN_u_ = lN_(u_cap_ij_);
lP_u_ = lP_(u_cap_ij_);
mu = mean(lN_u_); sg = max(1e-12,std(lN_u_,1));
flag_plot=0;
if flag_plot;
n_h = 33;
hlN_ = mu + sg*4.5*linspace(-1,1,n_h);
h_ = hist(lN_u_,hlN_); h_ = h_/sum(h_)/mean(diff(hlN_));
g_ = 1/sqrt(2*pi) / sg * exp(-(hlN_-mu).^2/(2*sg^2));
subplot(1,2,1); plot(hlN_,g_,'r-',hlN_,h_,'k.'); xlabel('lN_u'); ylabel('p'); title('p');
subplot(1,2,2); plot(hlN_,log(g_),'r-',hlN_,log(h_),'k.'); ylim([min(log(g_)),max(log(g_))]); xlabel('lN_u'); ylabel('log(p)'); title('log(p)');
end;%if flag_plot;
z = (lN_0-mu)/sg;
lpv = z_to_p_0(z); flag_method = 1;
 else;%end;%if (lN_0<prctile(lN_u_,95));
%%%%%%%%;
% Otherwise, use gradient-flow to shift observations. ;
%%%%%%%%;
if (verbose); disp(sprintf(' %% using gradient-flow to sample rare regions (flag_method == 2)')); end;
flag_method = 2;
%%%%%%%%;
tmp_n_iteration=4; tmp_n_timestep=min(max(n_label_A_),max(n_label_B_)); 
[tmp_lN__,tmp_lP__,~] = label_to_label_enrichment_sample_path_0(n_label_A,n_label_A_,num_A_,n_label_B,n_label_B_,num_B_,lP_base,tmp_n_iteration,tmp_n_timestep,[]);
lP_avg_ = mean(tmp_lP__,1); lP_ij_ = find(lP_avg_<lP_0);
if  isempty(lP_ij_); 
disp(sprintf(' %% Warning: Preliminary search insufficient to locate rare regions.'));
disp(sprintf(' %% Increasing tmp_n_timestep is unlikely to improve sampling.'));
disp(sprintf(' %% Instead, we approximate integral with lP_0 (flag_method == 3).'));
lpv = lP_0; flag_method = 3;
end;%if  isempty(lP_ij_); 
if ~isempty(lP_ij_);
n_timestep = ceil(1+1.25*min(lP_ij_));
if (verbose); disp(sprintf(' %% found rare region in %d --> %d steps',min(lP_ij_),n_timestep)); end;
n_iteration = 256; %<-- typically enough for 1 digit accuracy. ;
[lN__,lP__,~] = label_to_label_enrichment_sample_path_0(n_label_A,n_label_A_,num_A_,n_label_B,n_label_B_,num_B_,lP_base,n_iteration,n_timestep,[]);
lpv_ = zeros(n_timestep,1);
for ntimestep=1:n_timestep;
tmp_lN_ = lN__(:,ntimestep);
tmp_lP_ = lP__(:,ntimestep);
tmp_lN_ij_ = find(tmp_lN_>lN_0);
if ( isempty(tmp_lN_ij_)); lpv_(ntimestep) = -Inf; end;
if (~isempty(tmp_lN_ij_)); 
tmp_lw_ = tmp_lP_ - lP__(:,1); %<-- weight should be P(original)/P(shifted) = exp(lP_(ntimestep))/exp(lP_(1)). ;
tmp_lw_max = max(tmp_lw_); %<-- factor out largest exponential. ;
tmp_lw_adj_ = tmp_lw_ - tmp_lw_max; %<-- all adjusted weights are smaller than one. ;
lpv_(ntimestep) = tmp_lw_max + log(sum(exp(tmp_lw_adj_(tmp_lN_ij_)))/n_iteration) ;
if (verbose); disp(sprintf(' %% ntimestep %d/%d; fraction %d/%d; tmp_lw_max %0.2f lpv %0.2f',ntimestep,n_timestep,length(tmp_lN_ij_),n_iteration,tmp_lw_max,lpv_(ntimestep))); end;
end;%if (~isempty(tmp_lN_ij_)); 
end;%for ntimestep=1:n_timestep;
lpv = max(lpv_); flag_method = 2; %<-- Note that here we take the largest value under the presumption that it is better to overestimate the p-value. ;
end;%if ~isempty(lP_ij_);
%%%%%%%%;
end;%if (lN_0<prctile(lN_u_,95));
end;%if (lP_0<log(0.50));
if (verbose); disp(sprintf(' %% [finished label_to_label_enrichment_2]')); end;
