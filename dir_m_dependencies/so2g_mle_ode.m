function [m_A,s_A,m_B,s_B,l] = so2g_mleode(d_,t_max);
% Uses stiff ode solver (gradient descent) to calculate the sum of 2 gaussians ;
% which is has the maximum likelihood given the data d_. ;
% The sum of 2 gaussians is written as: ;
% rho(x) = (1/(1+exp(-l)))*p_A(x) + (exp(-l)/(1+exp(-l)))*p_B(x) ;
% where p_C(x) = 1/sqrt(2*pi)/s_C * exp(-(x-m_C)^2/(2*s_C^2)) ;
% and C = A,B. ;
% Note that gradient descent makes use of: ;
% dp/dm = p(x) * ( -(x-m)/s^2 ) ;
% dp/ds = p(x) * ( -1/s + (x-m)^2/s^3 ) ;

if nargin<1; t_max = 1; end;

m_A = prctile(d_,25); s_A = std(d_)/2;
m_B = prctile(d_,75); s_B = std(d_)/2;
l = 0.0;
[t_,y_] = ode15s(@(t,y)oderhs(t,y,d_),[0,t_max],[m_A;s_A;m_B;s_B;l]);
m_A = y_(end,1);
s_A = y_(end,2);
m_B = y_(end,3);
s_B = y_(end,4);
l = y_(end,5);
flag_plot=1;
if flag_plot;
clf;
subplot(1,2,1);
tmp_x_ = linspace(min(d_),max(d_),32);
tmp_y_ = linspace(min(d_),max(d_),1024);
tmp_h_ = hist(d_,tmp_x_); tmp_h_ = tmp_h_/sum(tmp_h_)/mean(diff(tmp_x_));
hold on; 
stairs(tmp_x_,tmp_h_,'k-');
plot(tmp_y_,rho(tmp_y_,m_A,s_A,m_B,s_B,l),'g-');
plot(tmp_y_,lA(l).*p(tmp_y_,m_A,s_A),'r-');
plot(tmp_y_,lB(l).*p(tmp_y_,m_B,s_B),'b-');
hold off;
xlim([min(d_),max(d_)]);
title(sprintf('m_A %0.2f s_A %0.2f m_B %0.2f s_B %0.2f l %0.2f',m_A,s_A,m_B,s_B,l));
subplot(1,2,2);
L_ = zeros(size(t_));
for nt=1:length(t_);
L_(nt) = sum(lrho(d_,y_(nt,1),y_(nt,2),y_(nt,3),y_(nt,4),y_(nt,5)));
end;%for nt=1:length(t_);
plot(t_,L_,'k-');xlabel('time');ylabel('log likelihood');
end;%if flag_plot;


function [dy_] = oderhs(t_,y_,d_);
m_A = y_(1);
s_A = y_(2);
m_B = y_(3);
s_B = y_(4);
l = y_(5);
dLdl = sum(dlrhodl(d_,m_A,s_A,m_B,s_B,l)) ;
dLdmA = sum(dlrhodmA(d_,m_A,s_A,m_B,s_B,l)) ;
dLdsA = sum(dlrhodsA(d_,m_A,s_A,m_B,s_B,l)) ;
dLdmB = sum(dlrhodmB(d_,m_A,s_A,m_B,s_B,l)) ;
dLdsB = sum(dlrhodsB(d_,m_A,s_A,m_B,s_B,l)) ;
dy_ = [dLdmA;dLdsA;dLdmB;dLdsB;dLdl];

function output = p(x,m,s); output = 1/sqrt(2*pi)./s .* exp(-(x-m).^2./(2*s.^2)) ;
function output = dpdm(x,m,s); output = p(x,m,s) .* ( +(x-m)./s.^2 ) ;
function output = dpds(x,m,s); output = p(x,m,s) .* ( -1./s + (x-m).^2 ./ s.^3 ) ;
function output = lA(l); output = 1./(1+exp(-l)) ; 
function output = lB(l); output = exp(-l)./(1+exp(-l)) ;
function output = dlAdl(l); output = +lA(l).*lB(l) ; 
function output = dlBdl(l); output = -lA(l).*lB(l) ;
function output = rho(x,m_A,s_A,m_B,s_B,l); output = lA(l).*p(x,m_A,s_A) + lB(l).*p(x,m_B,s_B) ;
function output = lrho(x,m_A,s_A,m_B,s_B,l); output = log(rho(x,m_A,s_A,m_B,s_B,l)) ;
function output = drhodl(x,m_A,s_A,m_B,s_B,l); output = dlAdl(l).*p(x,m_A,s_A) + dlBdl(l).*p(x,m_B,s_B) ;
function output = drhodmA(x,m_A,s_A,m_B,s_B,l); output = lA(l).*dpdm(x,m_A,s_A) ;
function output = drhodsA(x,m_A,s_A,m_B,s_B,l); output = lA(l).*dpds(x,m_A,s_A) ;
function output = drhodmB(x,m_A,s_A,m_B,s_B,l); output = lB(l).*dpdm(x,m_B,s_B) ;
function output = drhodsB(x,m_A,s_A,m_B,s_B,l); output = lB(l).*dpds(x,m_B,s_B) ;
function output = dlrhodl(x,m_A,s_A,m_B,s_B,l); output = drhodl(x,m_A,s_A,m_B,s_B,l)./rho(x,m_A,s_A,m_B,s_B,l) ;
function output = dlrhodmA(x,m_A,s_A,m_B,s_B,l); output = drhodmA(x,m_A,s_A,m_B,s_B,l)./rho(x,m_A,s_A,m_B,s_B,l) ;
function output = dlrhodsA(x,m_A,s_A,m_B,s_B,l); output = drhodsA(x,m_A,s_A,m_B,s_B,l)./rho(x,m_A,s_A,m_B,s_B,l) ;
function output = dlrhodmB(x,m_A,s_A,m_B,s_B,l); output = drhodmB(x,m_A,s_A,m_B,s_B,l)./rho(x,m_A,s_A,m_B,s_B,l) ;
function output = dlrhodsB(x,m_A,s_A,m_B,s_B,l); output = drhodsB(x,m_A,s_A,m_B,s_B,l)./rho(x,m_A,s_A,m_B,s_B,l) ;
