function [C_n_] = impute_knn(verbose,B_n_,ij_missed_,n_neighbor,str_row_vs_col,str_prefix);
% nearest neighbor imputation. ;

if (nargin<1);
verbose=1;
B_n_ = 3+round(10*rand(5,8)); 
ij_missed_ = randperm(numel(B_n_)); ij_missed_ = ij_missed_(1:10); B_n_(ij_missed_)=0;
n_neighbor = 2;
disp(num2str(B_n_));
C_n_ = impute_knn(verbose,B_n_,ij_missed_,n_neighbor,'row');
disp(num2str(C_n_));
D_n_ = impute_knn(verbose,B_n_,ij_missed_,n_neighbor,'col');
disp(num2str(D_n_));
disp('returning');return;
end;%if (nargin<1);

na=3;
if nargin<na; ij_missed_ = find(B_n_==0); end; na=na+1;
if nargin<na; n_neighbor = 1; end; na=na+1;
if nargin<na; str_row_vs_col = 'row'; end; na=na+1;
if nargin<na; str_prefix = 'test'; end; na=na+1;
% n_neighbor = 1; str_row_vs_col = 'row'; str_prefix = 'test'; 

if (verbose); disp(sprintf(' %% [entering impute_knn] str_prefix %s',str_prefix)); end;
p_missed = numel(ij_missed_)/numel(B_n_);
ij_filled_ = setdiff(1:numel(B_n_),ij_missed_);
p_filled = numel(ij_filled_)/numel(B_n_);
[n_row,n_col] = size(B_n_); n_dim = min(n_row,n_col);
P_n_ = zeros(n_row,n_col); P_n_(ij_filled_) = 1;
C_n_ = B_n_;
if (strcmp(str_row_vs_col,'row'));
n_neighbor = max(1,min(n_row-1,n_neighbor));
P_n__ = cell(n_col,1);
for ncol=1:n_col;
P_n__{ncol} = find(P_n_(:,ncol));
end;%for ncol=1:n_col;
PnPt_ = P_n_*transpose(P_n_); 
BnBt_ = (B_n_*transpose(B_n_))./max(1,PnPt_);
Distance_ = max( 0 , repmat(diag(BnBt_),1,n_row) + repmat(transpose(diag(BnBt_)),n_row,1) - 2*BnBt_ );
for nrow=1:n_row;
Distance_(nrow,nrow) = +Inf;
end;%for nrow=1:n_row;
[~,tmp_ij__] = sort(Distance_);
[tmp_i_,tmp_j_] = ind2sub([n_row,n_col],sort(ij_missed_));
for nl=1:numel(ij_missed_);
tmp_i = tmp_i_(nl); tmp_j = tmp_j_(nl);
if (verbose>1); disp(sprintf(' %% nl %d (%d,%d): ',nl,tmp_i,tmp_j)); end;
[tmp_k_] = intersect(tmp_ij__(:,tmp_i),P_n__{tmp_j},'stable');
if (verbose>1); disp(sprintf(' %% found tmp_k_:')); disp(num2str(tmp_k_)); end;
tmp_n_neighbor = min(numel(tmp_k_),n_neighbor);
if (verbose>1); disp(sprintf(' %% setting tmp_n_neighbor %d',tmp_n_neighbor)); end;
tmp_l_ = tmp_k_(1:tmp_n_neighbor);
if (verbose>1); disp(sprintf(' %% tmp_l_: ')); disp(num2str(tmp_l_)); end;
C_n_(tmp_i,tmp_j) = mean(C_n_(tmp_l_,tmp_j));
if (verbose>1); disp(sprintf(' %% setting C_n_(%d,%d) = %0.2f',tmp_i,tmp_j,C_n_(tmp_i,tmp_j))); end;
end;%for nl=1:numel(ij_missed_);
end;%if (strcmp(str_row_vs_col,'row'));
if (strcmp(str_row_vs_col,'col'));
[tmp_i_,tmp_j_] = ind2sub([n_row,n_col],sort(ij_missed_));
ji_missed_ = sub2ind([n_col,n_row],tmp_j_,tmp_i_);
C_n_ = transpose(impute_knn(verbose,transpose(B_n_),ji_missed_,n_neighbor,'row',str_prefix));
end;%if (strcmp(str_row_vs_col,'col'));
if (verbose); disp(sprintf(' %% [finished impute_knn] str_prefix %s',str_prefix)); end;
