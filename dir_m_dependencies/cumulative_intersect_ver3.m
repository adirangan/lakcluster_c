function cumulative_intersect_ver3(verbose,...
string_name_1_s0000,n_iteration_1,r_tot_1_,n_r_rem_1,r_rem_1_,mr_D_1_full,rdrop_a_1_,...
string_name_2_s0000,n_iteration_2,r_tot_2_,n_r_rem_2,r_rem_2_,mr_D_2_full,rdrop_a_2_);
%{
  % built off of lisa_xdropplot_intersect_ver2.m ;
 %}

%%%%%%%%%%%%%%%%;
% reconstruct r_tot (total remaining) ;
%%%%%%%%%%%%%%%%;
%r_tot_1_ = sum(n_r_rem_1_)-cumsum([0;n_r_rem_1_(1:end-1)]);
%r_tot_2_ = sum(n_r_rem_2_)-cumsum([0;n_r_rem_2_(1:end-1)]);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
% Now compute intersection number. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
if (verbose>0); disp(sprintf(' %% comparing %s to %s',string_name_1_s0000,string_name_2_s0000)); end;
r_1_len_ = zeros(1+n_iteration_1,1); for ni=0:n_iteration_1; r_1_len_(1+ni) = length(r_rem_1_{1+ni}); end;%for ni=0:n_iteration_1;
r_2_len_ = zeros(1+n_iteration_2,1); for ni=0:n_iteration_2; r_2_len_(1+ni) = length(r_rem_2_{1+ni}); end;%for ni=0:n_iteration_2;
%%%%%%%%%%%%%%%%;
% slow ;
%%%%%%%%%%%%%%%%;
%{
if (verbose); tic; end;
r_cap_len__ = zeros(1+n_iteration_1,1+n_iteration_2); 
 for ni1=0:n_iteration_1; if (verbose>0); disp(sprintf('ni1 %d/%d',ni1,n_iteration_1)); end; for ni2=0:n_iteration_2;
r_cap_len__(1+ni1,1+ni2) = length(intersect(r_rem_1_{1+ni1},r_rem_2_{1+ni2}));
end;end;%for ni1=0:n_iteration_1; for ni2=0:n_iteration_2;
if (verbose); disp(sprintf(' %% slow method: %0.2f seconds',toc)); end;
 %}
%%%%%%%%%%%%%%%%;
% fast ;
%%%%%%%%%%%%%%%%;
if (verbose); tic; end;
tmp_r_1_ = [r_rem_1_{1} ; rdrop_a_1_]; 
tmp_r_2_ = [r_rem_2_{1} ; rdrop_a_2_]; 
[~,tmp_r_1_] = sort(tmp_r_1_); 
[~,tmp_r_2_] = sort(tmp_r_2_); 
tmp_r__ = sparse(tmp_r_1_,tmp_r_2_,1,n_r_rem_1,n_r_rem_2);
%%%%%%%%;
tmp_r_1 = zeros(n_r_rem_1,1);
nr_1=0;
for ni_1=0:n_iteration_1;
tmp_1 = length(r_rem_1_{1+ni_1});
tmp_r_1(1+nr_1) = 1;
nr_1 = nr_1 + tmp_1;
end;%for ni_1=0:n_iteration_1;
tmp_r_1 = cumsum(tmp_r_1);
tmp_r_1_ = sparse(1:n_r_rem_1,tmp_r_1,1,n_r_rem_1,1+n_iteration_1);
%%%%%%%%;
tmp_r_2 = zeros(n_r_rem_2,1);
nr_2=0;
for ni_2=0:n_iteration_2;
tmp_2 = length(r_rem_2_{1+ni_2});
tmp_r_2(1+nr_2) = 1;
nr_2 = nr_2 + tmp_2;
end;%for ni_2=0:n_iteration_2;
tmp_r_2 = cumsum(tmp_r_2);
tmp_r_2_ = sparse(1:n_r_rem_2,tmp_r_2,1,n_r_rem_2,1+n_iteration_2);
%%%%%%%%;
r_cap_len__ = transpose(tmp_r_1_)*tmp_r__*tmp_r_2_;
%%%%%%%%;
if (verbose); disp(sprintf(' %% fast method: %0.2f seconds',toc)); end;
%%%%%%%%%%%%%%%%;

%%%%%%%%%%%%%%%%;
% Now calculation intersection fraction. ;
% r_len_1_(j) is the number of rows ejected at step j (trial 1). ;
% r_len_2_(k) is the number of rows ejected at step k (trial 2). ;
% r_cap_len__(j,k) is the intersection of the ejected rows from step j (trial 1) and step k (trial 2). ;
% r_cap_ss__(j,k) is the (double) cumulative sum of r_cap_len__; 
% i.e., the total number of ejected rows which lie in the intersection of steps 1-j (trial 1) and steps 1-k (trial 2). ;
% r_rmv_1__(j,:) is the total number of ejected rows at step j (trial 1). ;
% r_rmv_2__(:,k) is the total number of ejected rows at step k (trial 2). ;
% n_r_full is the maximum number of rows possible. ;
% r_rtn_1__(j,:) is the number of rows remaining at step j (trial 1). ;
% i.e., r_rtn_1__(1:end-1,1) == r_tot_1_. Similarly, ;
% r_rtn_2__(:,k) is the number of rows remaining at step k (trial 2). ;
% r_rtn__(j,k) is the number of rows remaining after step j (trial 1) and step k (trial 2). ;
% r_rtn_max__(j,k) is the maximum possible number of rows remaining at step j (trial 1) and step k (trial 2). ;
% i.e., assuming that trial 1 and 2 throw out the same rows. ;
% r_rtn_avg__(j,k) is the maximum of the fraction left at step j (trial 1) and the fraction left at step k (trial 2). ;
% i.e., the 'average' fraction one would expect if the rows eliminated were chosen at random. ;
% r_rtn_f__(j,k) is the number of rows remaining after step j (trial 1) and step k (trial 2) divided by the maximum number of rows that could possibly remain at this step. ;
%%%%%%%%%%%%%%%%;
n_r_full = max(length(mr_D_1_full),length(mr_D_2_full)); 
r_cap_ss__ = cumsum(cumsum(r_cap_len__,1),2); 
r_rmv_1__ = repmat(cumsum(r_1_len_),1,1+n_iteration_2);
r_rmv_2__ = repmat(transpose(cumsum(r_2_len_)),1+n_iteration_1,1);
r_rtn_1__ = n_r_full - r_rmv_1__;
r_rtn_2__ = n_r_full - r_rmv_2__;
r_rtn__ = n_r_full - r_rmv_1__ - r_rmv_2__ + r_cap_ss__;
r_rtn_max__ = n_r_full - max(r_rmv_1__,r_rmv_2__);
r_rtn_avg__ = max( r_rtn_1__/(n_r_full - r_1_len_(1)) , r_rtn_2__/(n_r_full - r_2_len_(1)) );
r_rtn_f__ = r_rtn__ ./ r_rtn_max__ ;
%%%%%%%%%%%%%%%%;
% Now calculate p-values (asymptotic). ;
% p_r_1_ and p_r_2_ are the fractions remaining from trial-1 and trial-2. ;
% mu__(j,k) is the average fraction expected after step j (trial 1) and step k (trial 2) assuming random elimination. ; 
% sg__(j,k) is the variance in the fraction expected after step j (trial 1) and step k (trial 2) assuming random elimination. ;
% pv__(j,k) is the p-value after step j (trial 1) and step k (trial 2). ;
%%%%%%%%%%%%%%%%;
p_r_1_ = r_tot_1_./r_tot_1_(1); p_r_2_ = r_tot_2_./r_tot_2_(1);
r_mu__ = p_r_1_ * transpose(p_r_2_) * r_rtn__(1,1);
r_s2__ = (p_r_1_ * transpose(p_r_2_)) .* (1 - (p_r_1_ * transpose(p_r_2_))) .* r_rtn__(1,1);
r_sg__ = sqrt(r_s2__);
r_pv__ = 0.5*(1 - erf((r_rtn__(1:end-1,1:end-1) - r_mu__)./sqrt(2)./r_sg__));
%%%%%%%%;

%%%%%%%%%%%%%%%%;
% plot results. ;
%%%%%%%%%%%%%%%%;
if (verbose>0);
figure;clf;
colormap('hot');
subplot(1,3,1); imagesc(r_rtn_f__,[0,1]); colorbar;
axis square;
%set(gca,'Xtick',[],'Ytick',[]); 
xlabel(string_name_2_s0000,'Interpreter','none'); 
ylabel(string_name_1_s0000,'Interpreter','none'); 
title('row retain fraction vs iteration');
subplot(1,3,2); imagesc(log(r_rtn_f__./r_rtn_avg__),[-2,+2]); colorbar;
axis square;
%set(gca,'Xtick',[],'Ytick',[]); 
xlabel(string_name_2_s0000,'Interpreter','none'); 
ylabel(string_name_1_s0000,'Interpreter','none'); 
title('log(row retain / expected)');
subplot(1,3,3); imagesc(-log10(r_pv__),[0,5]); colorbar;
axis square;
%set(gca,'Xtick',[],'Ytick',[]); 
xlabel(string_name_2_s0000,'Interpreter','none'); 
ylabel(string_name_1_s0000,'Interpreter','none'); 
title('log10(row pvalue)');
set(gcf,'Position',1+[0,0,1024*1.5,768]);
end;%if (verbose>0);
%%%%%%%%%%%%%%%%;
