function [lpv,lP_0,flag_method,cap_,cup_] = label_to_label_enrichment_1(label_A_,label_B_);
% Calculates enrichment p-value. ;
% Assumes numeric labels, although labels do not need to be sequential. ;
% lpv = log of p-value (estimated). ;
% lP_0 = probability of achieving intersections. ;
% flag_method = 0 for trivial case, 1 for monte-carlo, 2 for laplace. ;
% cap_ = set of intersections. ;
% cup_ = set of unions. ;
%%%%%%%%;
verbose=0;
if (verbose); disp(sprintf(' %% [entering label_to_label_enrichment_1]')); end;
lpv = 0; lP_0 = 0; flag_method = 0;
%%%%%%%%;
n_A = numel(label_A_);
u_label_A_ = unique(label_A_);
n_label_A = length(u_label_A_);
n_label_A_ = zeros(n_label_A,1);
for nlabel_A = 1:n_label_A;
ij_A_{nlabel_A} = find(label_A_ == u_label_A_(nlabel_A));
n_label_A_(nlabel_A) = numel(ij_A_{nlabel_A});
end;%for nlabel_A=1:n_label_A;
%%%%%%%%;
n_B = numel(label_B_);
u_label_B_ = unique(label_B_);
n_label_B = length(u_label_B_);
n_label_B_ = zeros(n_label_B,1);
for nlabel_B = 1:n_label_B;
ij_B_{nlabel_B} = find(label_B_ == u_label_B_(nlabel_B));
n_label_B_(nlabel_B) = numel(ij_B_{nlabel_B});
end;%for nlabel_B=1:n_label_B;
%%%%%%%%;
if (n_A~=n_B); disp(sprintf(' %% Warning! n_A %d n_B %d in label_to_label_enrichment',n_A,n_B)); end;
assert(n_A==n_B);
n_X = n_A;
%%%%%%%%;
cap_ = zeros(n_label_A,n_label_B);
cup_ = zeros(n_label_A,n_label_B);
for nlabel_A=1:n_label_A;
for nlabel_B=1:n_label_B;
cap_(nlabel_A,nlabel_B) = numel(intersect(ij_A_{nlabel_A},ij_B_{nlabel_B}));
cup_(nlabel_A,nlabel_B) = numel(union(ij_A_{nlabel_A},ij_B_{nlabel_B}));
end;%for nlabel_B=1:n_label_B;
end;%for nlabel_A=1:n_label_A;
%%%%%%%%;
% Given a list of specific sets from A, ;
% as well as the cardinality of the sets in B, ;
% the number of ways of finding the precise intersections listed in cap_ is: ;
% lN = sum(gammaln(1+n_label_A_)) - sum(gammaln(1+cap_(:))). ;
% Similarly, the probability of observing cap_ is: ;
% lP = sum(gammaln(1+n_label_A_)) - sum(gammaln(1+cap_(:))) + sum(gammaln(1+n_label_B_)) - gammaln(1+n_X). ;
%%%%%%%%;
num_A_ = zeros(n_A,1);
for nlabel_A=1:n_label_A;
num_A_(ij_A_{nlabel_A}) = nlabel_A;
end;%for nlabel_A=1:n_label_A;
num_B_ = zeros(n_B,1);
for nlabel_B=1:n_label_B;
num_B_(ij_B_{nlabel_B}) = nlabel_B;
end;%for nlabel_B=1:n_label_B;
tmp_lP = sum(gammaln(1+n_label_A_)) + sum(gammaln(1+n_label_B_)) - gammaln(1+n_X);
cap_0_ = sparse(num_A_,num_B_,1,n_label_A,n_label_B);
tmp_0 = sum(gammaln(1+cap_0_),'all');
lN_0 = +tmp_0;
lP_0 = tmp_lP - tmp_0;
flag_method = 0;
%%%%%%%%;
if (lP_0<0);
%%%%%%%%;
% First we check to see if the p-value can be approximated using monte-carlo. ;
%%%%%%%%;
n_iteration=1024;
lN_ = zeros(n_iteration,1);
lP_ = zeros(n_iteration,1);
cap__ = zeros(n_label_A,n_label_B,n_iteration);
for niteration=1:n_iteration;
tmp_cap_ = sparse(num_A_,num_B_(randperm(n_B)),1,n_label_A,n_label_B);
tmp = sum(gammaln(1+tmp_cap_),'all');
lN_(niteration) = +tmp;
lP_(niteration) = tmp_lP - tmp;
cap__(:,:,niteration) = tmp_cap_;
end;%for niteration=1:n_iteration;
clear tmp_cap_;
% compare mean(cap__,3) with (n_label_A_*transpose(n_label_B_)/n_X) ;
% try: ;
%{
  cap_avg__ = mean(cap__,3);
  cap_bar__ = (n_label_A_*transpose(n_label_B_)/n_X);
  disp(sprintf(' %% relative deviation: %0.16f',fnorm(cap_avg__-cap_bar__)/fnorm(cap_bar__)));
  %}
[~,u_cap_ij_] = unique(transpose(reshape(cap__,n_label_A*n_label_B,n_iteration)),'row');
clear cap__;
n_u = numel(u_cap_ij_);
lN_u_ = lN_(u_cap_ij_);
lP_u_ = lP_(u_cap_ij_);
%%%%%%%%;
% if lN_0 falls in the range observed, we can ;
% model the probability of observing lN_u (w.r.t. sampling label_B_) ;
% as a gaussian in lN_u. ;
%%%%%%%%;
if (lN_0>prctile(lN_u_,5) & lN_0<prctile(lN_u_,95));
if (verbose); disp(sprintf(' %% using monte-carlo')); end;
n_iteration=1024*8;
lN_ = zeros(n_iteration,1);
lP_ = zeros(n_iteration,1);
cap__ = zeros(n_label_A,n_label_B,n_iteration);
for niteration=1:n_iteration;
tmp_cap_ = sparse(num_A_,num_B_(randperm(n_B)),1,n_label_A,n_label_B);
tmp = sum(gammaln(1+tmp_cap_),'all');
lN_(niteration) = +tmp;
lP_(niteration) = tmp_lP - tmp;
cap__(:,:,niteration) = tmp_cap_;
end;%for niteration=1:n_iteration;
clear tmp_cap_; clear cap__;
n_u = numel(u_cap_ij_);
lN_u_ = lN_(u_cap_ij_);
lP_u_ = lP_(u_cap_ij_);
mu = mean(lN_u_); sg = std(lN_u_,1);
flag_plot=0;
if flag_plot;
n_h = 33;
hlN_ = mu + sg*4.5*linspace(-1,1,n_h);
h_ = hist(lN_u_,hlN_); h_ = h_/sum(h_)/mean(diff(hlN_));
g_ = 1/sqrt(2*pi) / sg * exp(-(hlN_-mu).^2/(2*sg^2));
subplot(1,2,1); plot(hlN_,g_,'r-',hlN_,h_,'k.'); xlabel('lN_u'); ylabel('p'); title('p');
subplot(1,2,2); plot(hlN_,log(g_),'r-',hlN_,log(h_),'k.'); ylim([min(log(g_)),max(log(g_))]); xlabel('lN_u'); ylabel('log(p)'); title('log(p)');
end;%if flag_plot;
z = (lN_0-mu)/sg;
lpv = z_to_p_0(z);
flag_method = 1;
 else;%end;%if (lN_0>prctile(lN_,5) & lN_0<prctile(lN_,95));
%%%%%%%%;
% Otherwise, approximate p-value with an integral. ;
%%%%%%%%;
if (verbose); disp(sprintf(' %% using laplace')); end;
grad_lP_0_ = -dgammaln(1+cap_0_);
%%%%%%%%;
lob_ = zeros(size(cap_0_));
ij_lob_ = find(cap_0_(:)==lob_(:)); n_lob = length(ij_lob_);
X_lob_ = zeros(n_lob,n_label_A*n_label_B);
for nlob=1:n_lob;
X_lob_(nlob,ij_lob_(nlob)) = -1;
end;%for nlob=1:n_lob;
y_lob_ = zeros(n_lob,1);
%%%%%%%%;
upb_ = min(repmat(n_label_A_,1,n_label_B),repmat(transpose(n_label_B_),n_label_A,1));
ij_upb_ = find(cap_0_(:)==upb_(:)); n_upb = length(ij_upb_);
X_upb_ = zeros(n_upb,n_label_A*n_label_B);
for nupb=1:n_upb;
X_upb_(nupb,ij_upb_(nupb)) = +1;
end;%for nupb=1:n_upb;
y_upb_ = zeros(n_upb,1);
%%%%%%%%;
%subplot(2,2,1); spy(reshape(sum(X_lob_,1),n_label_A,n_label_B)); title('X_lob','Interpreter','none'); subplot(2,2,2); spy(full(cap_0_)==lob_); title('lob');
%subplot(2,2,3); spy(reshape(sum(X_upb_,1),n_label_A,n_label_B)); title('X_upb','Interpreter','none'); subplot(2,2,4); spy(full(cap_0_)==upb_); title('upb');
%%%%%%%%;
X_rsum_ = zeros(n_label_B,n_label_A*n_label_B);
for nlabel_B=1:n_label_B;
tmp_ = zeros(n_label_A,n_label_B); tmp_(:,nlabel_B) = 1;
X_rsum_(nlabel_B,:) = reshape(tmp_,1,n_label_A*n_label_B);
end;%for nlabel_B=1:n_label_B;
y_rsum_ = zeros(n_label_B,1);
X_csum_ = zeros(n_label_A,n_label_A*n_label_B);
for nlabel_A=1:n_label_A;
tmp_ = zeros(n_label_A,n_label_B); tmp_(nlabel_A,:) = 1;
X_csum_(nlabel_A,:) = reshape(tmp_,1,n_label_A*n_label_B);
end;%for nlabel_A=1:n_label_A;
y_csum_ = zeros(n_label_A,1);
%%%%%%%%;
dC_ = reshape(quadprog(1.0*eye(n_label_A*n_label_B),grad_lP_0_,[X_upb_;X_lob_],[y_upb_;y_lob_],[X_rsum_;X_csum_],[y_rsum_;y_csum_],[],[],[],optimoptions('quadprog','Display','off')),n_label_A,n_label_B);
%dC_ = reshape(quadprog(1.0*eye(n_label_A*n_label_B),grad_lP_0_,[X_upb_;X_lob_],[y_upb_;y_lob_],[X_rsum_;X_csum_],[y_rsum_;y_csum_],[],[],[],optimoptions('quadprog','Display','iter-detailed')),n_label_A,n_label_B);
%dC_ = reshape(quadprog(1.0*eye(n_label_A*n_label_B),grad_lP_0_,[X_upb_;X_lob_],[y_upb_;y_lob_],[X_rsum_;X_csum_],[y_rsum_;y_csum_]),n_label_A,n_label_B);
dC_ = dC_/fnorm(dC_);
dlP_0 = sum(dC_.*grad_lP_0_,'all');
if (dlP_0>=0 | ~isfinite(dlP_0));
lpv = lP_0;
end;%if (dlP_0>=0 | ~isfinite(dlP_0));
if (dlP_0<0);
n_diam_dC = n_label_A*n_label_B - (n_label_A + n_label_B - 1);
l_diam_dC = mean(log(upb_(:)))*n_diam_dC;
lpv = lP_0 - log(-dlP_0) + l_diam_dC;
lpv = max(lP_0,lpv);
end;%if (dlP_0<0);
flag_method = 2;
end;%if (lN_0>prctile(lN_,5) & lN_0<prctile(lN_,95));
end;%if (lP_0<0);
if (verbose); disp(sprintf(' %% [finished label_to_label_enrichment_1]')); end;
