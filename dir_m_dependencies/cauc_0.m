function [cauc_avg_T,cauc_min_T,auc_T] = cauc_0(v_ctrl,v_case,y_ctrl,y_case,s_ctrl,s_case);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
% ;
% function [cauc_avg_T,cauc_min_T,auc_T] = cauc_0(v_ctrl,v_case,y_ctrl,y_case,s_ctrl,s_case);
% ;
% This function gets the corrected auc (corrected area under the curve) of the ;
% roc curve (receiver-operating-characteristic curve) for data v_ctrl and v_case, ;
% where v_case is expected to typically take on higher values than v_ctrl. ;
% ;
% Input: ;
% ; 
% v_ctrl: double array of length n_ctrl. Variables associated with each ctrl-patient. ;
% v_case: double array of length n_case. Variables associated with each case-patient. ;
% y_ctrl: double array of size n_ctrl-x-n_covariates. Continuous-Covariates for ctrl-patients (dimension n_covariates). ;
% y_case: double array of size n_case-x-n_covariates. Continuous-Covariates for case-patients (dimension n_covariates). ;
% s_ctrl: integer array of length n_ctrl. Categorical-Covariates for ctrl-patients (e.g., study number). ;
% s_case: integer array of length n_case. Categorical-Covariates for case-patients (e.g., study number). ;
% ;
% Output: ;
% ;
% cauc_avg_T: double. average cauc across covariate categories. ;
% cauc_min_T: double. minimum cauc across covariate categories. ;
% auc_T: double. typical auc (uncorrected). ;
% ;
% Note: Generally, we step through covariate-categories within the cases and controls. ; 
% For each covariate category that is missing (in either the cases or controls), ;
% all v-values (within cases or controls, respectively) are used for comparison. ;
% ;
% test by running with no arguments: ;
% i.e., >> cauc_0();
% ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;

if (nargin<2);
disp(sprintf(' %% Here we run a simple example illustrating the corrected auc.'));
disp(sprintf(' %% '));
disp(sprintf(' %% We will construct a toy data-set including 40 cases and 60 controls,'));
disp(sprintf(' %% representing 100 people in total.'));
disp(sprintf(' %% The cases will represent volleyball players,'));
disp(sprintf(' %% The controls will represent non-volleyball players.'));
disp(sprintf(' %% '));
disp(sprintf(' %% The dependent-variable "v" will represent the height of the people.'));
disp(sprintf(' %% Generally speaking, the volleyball players will be taller,'));
disp(sprintf(' %% but for this data-set the volleyball players are (on average)'));
disp(sprintf(' %% shorter than the controls.'));
disp(sprintf(' %% The reason for this is that the volleyball players in this'));
disp(sprintf(' %% data-set are mostly young, whereas the controls are mostly old.'));
disp(sprintf(' %% '));
disp(sprintf(' %% To correct for this bias we will use age as a continuous-covariate.'));
disp(sprintf(' %% '));
n_case = 40; n_ctrl = 60;
v_case = zeros(n_case,1); y_case = zeros(n_case,1);
v_ctrl = zeros(n_ctrl,1); y_ctrl = zeros(n_ctrl,1);
v_case(1:35) = 5.0+rand(35,1); y_case(1:35) = 12+randn(35,1);
v_case(36:40) = 7.0+rand(5,1); y_case(36:40) = 24+randn(5,1);
v_ctrl(1:10) = 4.5+rand(10,1); y_ctrl(1:10) = 12+randn(10,1);
v_ctrl(11:60) = 6.5+rand(50,1); y_ctrl(11:60) = 24+randn(50,1);
figure(1);clf; hold on;
plot(v_case,y_case,'ro','MarkerSize',15);
plot(v_ctrl,y_ctrl,'bx','MarkerSize',15);
xlabel('height');
ylabel('age');
legend('case','ctrl','Location','SouthEast');
s_case = round(rand(size(v_case)));
s_ctrl = round(rand(size(v_ctrl)));
[cauc_avg,cauc_min,auc] = cauc_0(v_ctrl,v_case,y_ctrl,y_case,s_ctrl,s_case);
disp(sprintf(' %% Note that the (uncorrected) auc = %0.2f,',auc));
disp(sprintf(' %% Whereas the (corrected) cauc = %0.2f (min %0.2f).',cauc_avg,cauc_min));
disp('returning');return;
end;%if (nargin<2);

ni=3;
if (nargin<ni); y_ctrl = []; end; ni=ni+1;
if (nargin<ni); y_case = []; end; ni=ni+1;
if (nargin<ni); s_ctrl = ones(size(v_ctrl)); end; ni=ni+1;
if (nargin<ni); s_case = ones(size(v_case)); end; ni=ni+1;

if ( (numel(v_ctrl)==0) | (numel(v_case)==0) );
cauc_avg_T = 0.5;
cauc_min_T = 0.5;
auc_T = 0.5;
return;
end;%if ( (numel(v_ctrl)==0) | (numel(v_case)==0) );

cat_case = unique(s_case); cat_ctrl = unique(s_ctrl);
if     (length(cat_case)==1 & length(cat_ctrl)==1); cat_ij = cat_case;
elseif (length(cat_case)> 1 & length(cat_ctrl)==1); cat_ij = cat_case;
elseif (length(cat_case)==1 & length(cat_ctrl)> 1); cat_ij = cat_ctrl;
elseif (length(cat_case)> 1 & length(cat_ctrl)> 1); cat_ij = union(cat_case,cat_ctrl);
end;% if;
cat_ij = reshape(cat_ij,1,length(cat_ij));
ns_T = 0; ntot_T = 0; cauc_avg_T = 0; cauc_min_T=1;
for ns=cat_ij;
%disp(sprintf('ns %d',ns));
dij = find(s_case==ns); if isempty(dij); dij = 1:length(v_case); end;
xij = find(s_ctrl==ns); if isempty(xij); xij = 1:length(v_ctrl); end;
if (length(dij)>0 & length(xij)>0);
ns_T = ns_T+1;
ncase_(ns_T) = length(dij);
nctrl_(ns_T) = length(xij);
ntot_(ns_T) = length(dij)+length(xij);
ntot_T = ntot_T + ntot_(ns_T);
if (~isempty(y_case) & ~isempty(y_ctrl)); 
cauc_(ns_T) = cauc_sub_0(v_ctrl(xij),v_case(dij),y_ctrl(xij,:),y_case(dij,:)); 
end;%if (~isempty(y_case) & ~isempty(y_ctrl)); 
if (isempty(y_case) | isempty(y_ctrl)); 
cauc_(ns_T) = auc_0(v_ctrl(xij),v_case(dij)); 
end;%if (isempty(y_case) | isempty(y_ctrl)); 
cauc_avg_T = cauc_avg_T + ntot_(ns_T)*cauc_(ns_T);
if (abs(cauc_(ns_T)-0.5)<abs(cauc_min_T-0.5)); cauc_min_T = cauc_(ns_T); end;
end;%if
end;%for ns=cat_min:cat_max;
cauc_avg_T = cauc_avg_T/ntot_T;
if nargout>2; auc_T = auc_0(v_ctrl,v_case); end;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;

function [cauc] = cauc_sub_0(v_ctrl,v_case,y_ctrl,y_case);
% calculates AUC with respect to variable v, corrected for covariates y;
% ;
% The inputs are: ;
% v_case: the v-values for the cases -- of length ND; 
% v_ctrl: the v-values for the ctrls -- of length NX;
% y_case: the y-values for the cases -- of size ND-x-NY;
% y_ctrl: the y-values for the ctrls -- of size NX-x-NY;
%
% The outputs are: ;
% cauc: The area under the roc curve, corrected for y ; 
% 
% Warning! This simple code does not deal with ties in covariate space. ;
% (i.e., only one of the nearest neighbors is considered) ;

ND = length(v_case);NX = length(v_ctrl);
W_X = knnsearch(y_ctrl,y_case);W_D = knnsearch(y_case,y_ctrl);
tmp_case = reshape(v_case,ND,1); tmp_ctrl = reshape(v_ctrl(W_X),ND,1);
case_contrib = 1.0*(tmp_case>tmp_ctrl) + 0.5*(tmp_case==tmp_ctrl);
tmp_case = reshape(v_case(W_D),NX,1); tmp_ctrl = reshape(v_ctrl,NX,1);
ctrl_contrib = 1.0*(tmp_case>tmp_ctrl) + 0.5*(tmp_case==tmp_ctrl);
cauc = (sum(case_contrib)+sum(ctrl_contrib))/(ND+NX);
