function [p_threshold,param_out_,log_likelihood_ratio,label_,label_auc] = so2g_mle_fminsearch(d_,param_0in_,flag_plot,fminsearch_options);
% Uses fminsearch to calculate the sum of 2 gaussians ;
% which is has the maximum likelihood given the data d_. ;
% The sum of 2 gaussians is written as: ;
% rho(x) = (1/(1+exp(-l)))*p_A(x) + (exp(-l)/(1+exp(-l)))*p_B(x) ;
% where p_C(x) = 1/sqrt(2*pi)/s_C * exp(-(x-m_C)^2/(2*s_C^2)) ;
% and C = A,B. ;
% Note that gradient descent makes use of: ;
% dp/dm = p(x) * ( -(x-m)/s^2 ) ;
% dp/ds = p(x) * ( -1/s + (x-m)^2/s^3 ) ;
%%%%%%%%;
% also returns the log likelihood ratio, ;
% which is the log of the ratio between: ;
% p(data | 2 gaussians) ;
% and ;
% p(data | 1 gaussian). ;
%%%%%%%%;
% also returns the labels: ;
% 'A' ;
% 'B' ;
%%%%%%%%;
% and the label_auc (A vs B). ;
%{

  rng(1);
  n_point = 1781;
  E1_pos_ = randn(n_point,2);
  tmp_mu = 2.25;
  tmp_p_ = randperm(n_point);
  tmp_ij_ = tmp_p_(1:floor(n_point/2));
  E1_pos_(tmp_ij_,:) = E1_pos_(tmp_ij_,:) + repmat([tmp_mu/2,0],length(tmp_ij_),1);
  tmp_ij_ = setdiff(1:n_point,tmp_ij_);
  E1_pos_(tmp_ij_,:) = E1_pos_(tmp_ij_,:) - repmat([tmp_mu/2,0],length(tmp_ij_),1); 
  opts_isosplit5 = struct('K_init',200,'isocut_threshold',1.0);
  E1_isosplit5_label_ = transpose(isosplit5(transpose(E1_pos_),opts_isosplit5));
  n_gamma_z = 64; gamma_z_ = linspace(0,pi,n_gamma_z+1); gamma_z_ = gamma_z_(1:end-1);
  E1_llr_ = zeros(n_gamma_z,1);
  E1_so2g_label__ = cell(n_gamma_z,1);
  for ngamma_z=1:n_gamma_z;
  gamma_z = gamma_z_(ngamma_z);
  tmp_nu_ = [cos(gamma_z);sin(gamma_z)];
  tmp_E1_d_ = E1_pos_(:,1)*tmp_nu_(1) + E1_pos_(:,2)*tmp_nu_(2);
  tmp_param_0in_(1) = prctile(tmp_E1_d_,25);
  tmp_param_0in_(2) = std(tmp_E1_d_)/2;
  tmp_param_0in_(3) = prctile(tmp_E1_d_,75);
  tmp_param_0in_(4) = std(tmp_E1_d_)/2;
  tmp_param_0in_(5) = 0.0;
  [tmp_p_threshold,tmp_param_out_,E1_llr_(ngamma_z)] = so2g_mle_fminsearch(tmp_E1_d_,tmp_param_0in_,0);
  E1_so2g_label__{ngamma_z} = ones(n_u,1);
  E1_so2g_label__{ngamma_z}(find(tmp_E1_d_>tmp_p_threshold)) = 2;
  end;%for ngamma_z=1:n_gamma_z;
  [~,E1_ngz] = max(E1_llr_); E1_so2g_label_ = E1_so2g_label__{E1_ngz};
  %%%%%%%%;
  colormap(colormap_beach());
  subplot(1,2,1); scatter(E1_pos_(:,1),E1_pos_(:,2),25,E1_isosplit5_label_); axis vis3d; title(sprintf('E1 isosplit'),'Interpreter','none');
  subplot(1,2,2); scatter(E1_pos_(:,1),E1_pos_(:,2),25,E1_so2g_label_); axis vis3d; title(sprintf('E1 so2g'),'Interpreter','none');
  figbig;

  %}

if nargin<1;
n_N = 1024*2;
%d_ = [ -1.5+randn(1*n_N/4,1) ; +1.5+randn(3*n_N/4,1) ]; %<-- two adjacent gaussians. ;
d_ = [ +0.5+2*randn(3*n_N/4,1) ; -0.5+0.5*randn(1*n_N/4,1) ]; %<-- one gaussian within another. ;
[p_threshold,param_out_] = so2g_mle_fminsearch(d_);
so2g_mle_fminsearch(d_,param_out_,2);
disp('returning');return;
end;%if nargin<2;

verbose_flag=0;
if verbose_flag; disp(sprintf(' %% [entering so2g_mle_fminsearch] length %d, nargin %d',numel(d_),nargin)); end;

length_cutoff = 32;

if nargin>=2;
m_A = param_0in_(1);
s_A = param_0in_(2);
m_B = param_0in_(3);
s_B = param_0in_(4);
l = param_0in_(5);
end;%if nargin>=2;
if nargin<2;
if numel(d_)<length_cutoff;
m_A = prctile(d_,25);
s_A = std(d_)/2;
m_B = prctile(d_,75);
s_B = std(d_)/2;
l = 0.0;
end;%if numel(d_)<length_cutoff;
if numel(d_)>=length_cutoff;
tmp_p_ = randperm(numel(d_)); tmp_p_ = tmp_p_(1:ceil(end/2));
[~,param_0in_] = so2g_mle_fminsearch(d_(tmp_p_));
m_A = param_0in_(1);
s_A = param_0in_(2);
m_B = param_0in_(3);
s_B = param_0in_(4);
l = param_0in_(5);
end;%if numel(d_)>=length_cutoff;
end;%if nargin<2;
if nargin<3; flag_plot=0; end;
if nargin<4; 
%fminsearch_options = optimset('MaxFunEvals',1e6,'MaxIter',1e6,'TolFun',1e-6,'display','off');
%fminsearch_options = optimset('MaxFunEvals',1e3,'MaxIter',1e3,'TolFun',1e-4,'display','off');
fminsearch_options = optimset('MaxFunEvals',1e2,'MaxIter',1e2,'TolFun',1e-3,'display','off');
end;%if nargin<4; 

if flag_plot<2;
[y_,~,~,tmp_out] = fminsearch(@(y)rhs(y,d_),[m_A;s_A;m_B;s_B;l],fminsearch_options);
if verbose_flag; disp(sprintf(' %% finished out.iterations %d out.funcCount %d',tmp_out.iterations,tmp_out.funcCount)); end;
m_A = y_(1);
s_A = y_(2);
m_B = y_(3);
s_B = y_(4);
l = y_(5);
end;%if flag_plot<2;

p_threshold = fsolve(@(x) s_A*s_B*(lA(l)*p(x,m_A,s_A) - lB(l)*p(x,m_B,s_B)) , mean(d_),optimset('TolFun',1e-6,'display','off'));
param_out_ = [m_A;s_A;m_B;s_B;l];
log_likelihood_ratio = sum(lrho(d_,m_A,s_A,m_B,s_B,l)) - sum(lp(d_,mean(d_),std(d_,1)));
label_ = zeros(size(d_,1),1);
lp_A_ = log(lA(l)) + lp(d_,m_A,s_A);
lp_B_ = log(lB(l)) + lp(d_,m_B,s_B);
label_(find(lp_B_< lp_A_)) = 'A';
label_(find(lp_A_< lp_B_)) = 'B';
label_(find(lp_A_==lp_B_)) = 'A';
label_auc = auc_0(d_(find(label_=='A')),d_(find(label_=='B')));

%disp(sprintf(' %0.6f %0.6f',lA(l)*p(p_threshold,m_A,s_A) , lB(l)*p(p_threshold,m_B,s_B)));
%flag_plot=1;
if flag_plot;
%clf;
tmp_x_ = linspace(min(d_),max(d_),32);
tmp_y_ = linspace(min(d_),max(d_),1024);
tmp_h_ = hist(d_,tmp_x_); tmp_h_ = tmp_h_/sum(tmp_h_)/mean(diff(tmp_x_));
hold on; 
stairs(tmp_x_-0.5*mean(diff(tmp_x_)),tmp_h_,'k-');
plot(tmp_y_,rho(tmp_y_,m_A,s_A,m_B,s_B,l),'g-');
plot(tmp_y_,lA(l).*p(tmp_y_,m_A,s_A),'r-');
plot(tmp_y_,lB(l).*p(tmp_y_,m_B,s_B),'b-');
plot(p_threshold*[1,1],[0,rho(p_threshold,m_A,s_A,m_B,s_B,l)],'g-');
plot(d_(find(label_=='A')),0,'rs');
plot(d_(find(label_=='B')),0,'bo');
hold off;
xlim([min(d_),max(d_)]);
xlabel('value'); ylabel('#');
title(sprintf('histogram: m_A %0.2f s_A %0.2f m_B %0.2f s_B %0.2f l %0.2f',m_A,s_A,m_B,s_B,l));
%figbig;
end;%if flag_plot;

%%%%%%%%;

function [y] = rhs(y_,d_);
m_A = y_(1);
s_A = y_(2);
m_B = y_(3);
s_B = y_(4);
l = y_(5);
y = -sum(lrho(d_,m_A,s_A,m_B,s_B,l));

function output = p(x,m,s); output = 1/sqrt(2*pi)./s .* exp(-(x-m).^2./(2*s.^2)) ;
function output = lp(x,m,s); output = log(p(x,m,s));
function output = dpdm(x,m,s); output = p(x,m,s) .* ( +(x-m)./s.^2 ) ;
function output = dpds(x,m,s); output = p(x,m,s) .* ( -1./s + (x-m).^2 ./ s.^3 ) ;
function output = lA(l); output = 1./(1+exp(-l)) ; 
function output = lB(l); output = exp(-l)./(1+exp(-l)) ;
function output = dlAdl(l); output = +lA(l).*lB(l) ; 
function output = dlBdl(l); output = -lA(l).*lB(l) ;
function output = rho(x,m_A,s_A,m_B,s_B,l); output = lA(l).*p(x,m_A,s_A) + lB(l).*p(x,m_B,s_B) ;
function output = lrho(x,m_A,s_A,m_B,s_B,l); output = log(rho(x,m_A,s_A,m_B,s_B,l)) ;
function output = drhodl(x,m_A,s_A,m_B,s_B,l); output = dlAdl(l).*p(x,m_A,s_A) + dlBdl(l).*p(x,m_B,s_B) ;
function output = drhodmA(x,m_A,s_A,m_B,s_B,l); output = lA(l).*dpdm(x,m_A,s_A) ;
function output = drhodsA(x,m_A,s_A,m_B,s_B,l); output = lA(l).*dpds(x,m_A,s_A) ;
function output = drhodmB(x,m_A,s_A,m_B,s_B,l); output = lB(l).*dpdm(x,m_B,s_B) ;
function output = drhodsB(x,m_A,s_A,m_B,s_B,l); output = lB(l).*dpds(x,m_B,s_B) ;
function output = dlrhodl(x,m_A,s_A,m_B,s_B,l); output = drhodl(x,m_A,s_A,m_B,s_B,l)./rho(x,m_A,s_A,m_B,s_B,l) ;
function output = dlrhodmA(x,m_A,s_A,m_B,s_B,l); output = drhodmA(x,m_A,s_A,m_B,s_B,l)./rho(x,m_A,s_A,m_B,s_B,l) ;
function output = dlrhodsA(x,m_A,s_A,m_B,s_B,l); output = drhodsA(x,m_A,s_A,m_B,s_B,l)./rho(x,m_A,s_A,m_B,s_B,l) ;
function output = dlrhodmB(x,m_A,s_A,m_B,s_B,l); output = drhodmB(x,m_A,s_A,m_B,s_B,l)./rho(x,m_A,s_A,m_B,s_B,l) ;
function output = dlrhodsB(x,m_A,s_A,m_B,s_B,l); output = drhodsB(x,m_A,s_A,m_B,s_B,l)./rho(x,m_A,s_A,m_B,s_B,l) ;
