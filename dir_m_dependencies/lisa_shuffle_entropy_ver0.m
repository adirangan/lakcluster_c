function [I_study_,I_sector_] = lisa_shuffle_entropy_ver0() ;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
% choose directory names. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
dir_code = sprintf('/data/rangan/dir_bcc/dir_lakcluster_c'); 
dir_trunk = sprintf('/data/rangan/dir_bcc/dir_PGC_20180304');
path(path,sprintf('%s/dir_m',dir_code)); 
cl_num = 3; string_prefix = sprintf('PGC_cl%d_maf01',cl_num);
[study_trunk_,study_name_,n_study] = lisa_define_study_ver0(cl_num);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
% select parameters used during shuffles (i.e., T_shuffle). ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
Icat = n_study; 
mds_shuffle_used_ = [1:2]; mds_shuffle_repl = 1; 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
% select T_entropy used during calculation of entropy. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
mds_entropy_used_ = [1:2]; mds_entropy_repl = 2; 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
% select number of shuffles to generate. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
n_shuffle = 64;
dir__in = sprintf('%s/dir_%s',dir_trunk,string_prefix);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
% calculate shuffle entropy. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
% load mds and fam file. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
load(sprintf('%s/%s_T_m%dr%d_full_n.mat',dir__in,string_prefix,length(mds_entropy_used_),mds_entropy_repl));
load(sprintf('%s/mds.mat',dir_trunk));
fid = fopen(sprintf('%s/%s_fam.ext',dir__in,string_prefix)); fam_ = textscan(fid,'%s %s %s %s %d %d %s','headerlines',0); fclose(fid);
n_patient_F = length(fam_{1}); fam_name_ = cell(n_patient_F,1); for np=1:n_patient_F; fam_name_{np} = sprintf('%s%s%s',fam_{1}{np},'&',fam_{2}{np}); end;%for np=1:n_patient_F;
[~,ifam_,imds_] = intersect(fam_name_,mds_name_,'stable'); if (length(ifam_)<n_patient_F); disp('Warning! fam_name_ not a subset of mds_name_'); end; mds_sort_ = mds_(imds_,:);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
% check to make sure that the mr_A_full lines up with the mr_A_%0.2d ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
mr_A_ = cell(n_study,1);
mr_Z_ = cell(n_study,1);
for ns=1:n_study;
tmpchar = sprintf('%s/%s_mr_A_%0.2d.b16',dir__in,string_prefix,ns);
[~,nrows,ncols] = tutorial_binary_getsize(tmpchar);
mr_A_{ns} = (tutorial_binary_uncompress(tmpchar,1:nrows,1:ncols)>0);
tmpchar = sprintf('%s/%s_mr_Z_%0.2d.b16',dir__in,string_prefix,ns);
[~,nrows,ncols] = tutorial_binary_getsize(tmpchar);
mr_Z_{ns} = (tutorial_binary_uncompress(tmpchar,1:nrows,1:ncols)>0);
end;%for ns=1:n_study;
tmpchar = sprintf('%s/%s_mr_A_full.b16',dir__in,string_prefix);
[~,nrows,ncols] = tutorial_binary_getsize(tmpchar);
mr_A_full = (tutorial_binary_uncompress(tmpchar,1:nrows,1:ncols)>0);
tmpchar = sprintf('%s/%s_mr_Z_full.b16',dir__in,string_prefix);
[~,nrows,ncols] = tutorial_binary_getsize(tmpchar);
mr_Z_full = (tutorial_binary_uncompress(tmpchar,1:nrows,1:ncols)>0);
mr_A_tmp = []; mr_Z_tmp = [];
for ns=1:n_study;
mr_A_tmp = [mr_A_tmp;mr_A_{ns}];
mr_Z_tmp = [mr_Z_tmp;mr_Z_{ns}];
end;% for ns=1:n_study;
disp(sprintf(' %% mr_A error %0.16f',norm(mr_A_tmp-mr_A_full)));
disp(sprintf(' %% mr_Z error %0.16f',norm(mr_Z_tmp-mr_Z_full)));

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
% determine which studies correspond to which patients. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
study_path_ = cell(n_study,1);
study_index_ = zeros(n_patient_F,1);
for ns=1:n_study;
study_path_{ns} = sprintf('~/%s/%s.fam',study_trunk_{ns},study_name_{ns});
study_index_(find(strcmp(fam_{7},study_path_{ns}))) = ns;
end;%for ns=1:n_study;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
% reading original row-masks for A and Z ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
d_inpre = sprintf('%s/%s',dir__in,string_prefix); 
mr_A_ori_ = cell(Icat,1);
mr_Z_ori_ = cell(Icat,1);
A_n_rind_ = cell(Icat,1);
Z_n_rind_ = cell(Icat,1);
for ns=1:Icat;
if (Icat==1); tmpchar = sprintf('%s_mr_A_full.b16',d_inpre); else; tmpchar = sprintf('%s_mr_A_%0.2d.b16',d_inpre,ns); end;
[bitj,nrows,ncols] = tutorial_binary_getsize(tmpchar); 
mr_A_ori_{ns} = (tutorial_binary_uncompress(tmpchar,1:nrows,1:ncols)>0);
A_n_rind_{ns} = find(mr_A_ori_{ns});
if (Icat==1); tmpchar = sprintf('%s_mr_Z_full.b16',d_inpre); else; tmpchar = sprintf('%s_mr_Z_%0.2d.b16',d_inpre,ns); end;
[bitj,nrows,ncols] = tutorial_binary_getsize(tmpchar); 
mr_Z_ori_{ns} = (tutorial_binary_uncompress(tmpchar,1:nrows,1:ncols)>0);
Z_n_rind_{ns} = find(mr_Z_ori_{ns});
end;%for ns=1:Icat;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
% determining which case-control status corresponds to which patients. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
A_ori_index_ = zeros(n_patient_F,1);
Z_ori_index_ = zeros(n_patient_F,1);
tmp_index = 0;
for ns=1:Icat;
tmp_length = size(mr_A_ori_{ns},1);
A_ori_index_(tmp_index + (1:tmp_length)) = mr_A_ori_{ns};
Z_ori_index_(tmp_index + (1:tmp_length)) = mr_Z_ori_{ns};
tmp_index = tmp_index + tmp_length;
end;%for ns=1:Icat;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
% displaying original case-control distribution. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
M_n_rows_ = zeros(Icat,1);
A_n_rows_ = zeros(Icat,1);
Z_n_rows_ = zeros(Icat,1);
for ns=1:Icat;
M_n_rows_(ns) = length(mr_A_ori_{ns});
A_n_rows_(ns) = sum(mr_A_ori_{ns});
Z_n_rows_(ns) = sum(mr_Z_ori_{ns});
end;%for ns=1:Icat;
disp(sprintf(' %% Icat %d; total vs cases vs controls',Icat));
disp(num2str([M_n_rows_ , A_n_rows_ , Z_n_rows_]));

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
% extracting T_shuffle_n_ for shuffles ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
if (mds_shuffle_repl<1 | length(mds_shuffle_used_)~=2);
flag_T_shuffle = 0;
T_shuffle_n_ = cell(Icat,1);
T_shuffle_n_crop_ = cell(Icat,1);
T_shuffle_n_crop_cols = 1+length(mds_shuffle_used_);
for nb=0:Icat-1;
if (Icat==1); tmpchar = sprintf('%s_T_full_n.b16',d_inpre); else; tmpchar = sprintf('%s_T_%0.2d_n.b16',d_inpre,1+nb); end;
[bitj,nrows,ncols] = tutorial_binary_getsize(tmpchar); disp(sprintf(' %% reading %s = (%d,%d)',tmpchar,nrows,ncols));
T_shuffle_n_{1+nb} = tutorial_binary_uncompress(tmpchar,1:nrows,1:ncols); 
T_shuffle_n_crop_{1+nb} = T_shuffle_n_{1+nb}(:,[1,(1+(mds_shuffle_used_))]); 
end;%for nb=0:Icat-1;
T_shuffle_n_crop_cind = 1:T_shuffle_n_crop_cols;
T_shuffle_n_ = T_shuffle_n_crop_; T_shuffle_n_cols = T_shuffle_n_crop_cols; T_shuffle_n_cind = T_shuffle_n_crop_cind;
end;%if (mds_shuffle_repl<1 | length(mds_shuffle_used_)~=2);
% copying T_shuffle_n_ from T_shuffle_m2rx_n in case where length(mds_shuffle_used_)==2 and mds_shuffle_repl>0;
if (mds_shuffle_repl>=1 & length(mds_shuffle_used_)==2);
flag_T_shuffle = 1;
mds_str = sprintf('m%dr%d',length(mds_shuffle_used_),mds_shuffle_repl);
mds_kappa_squared = textread(sprintf('%s_T_%s_kappa.txt',d_inpre,mds_str));
T_shuffle_n_ = cell(Icat,1);
T_shuffle_n_cols = 1+length(mds_shuffle_used_)*mds_shuffle_repl;
for ns=1:Icat;
if (Icat==1); tmpchar = sprintf('%s_T_%s_full_n.b16',d_inpre,mds_str); else; tmpchar = sprintf('%s_T_%s_%0.2d_n.b16',d_inpre,mds_str,ns); end;
[bitj,nrows,ncols] = tutorial_binary_getsize(tmpchar); disp(sprintf(' %% reading %s = (%d,%d)',tmpchar,nrows,ncols));
T_shuffle_n_{ns} = tutorial_binary_uncompress(tmpchar,1:nrows,1:ncols); 
end;%for ns=1:Icat;
T_shuffle_n_cind = 1:T_shuffle_n_cols;
end;%if (mds_shuffle_repl>= | length(mds_shuffle_used_)==2);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
% extracting T_entropy_n_ for calculation of entropy ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
if (mds_entropy_repl<1 | length(mds_entropy_used_)~=2);
flag_T_entropy = 0;
T_entropy_n_ = cell(Icat,1);
T_entropy_n_crop_ = cell(Icat,1);
T_entropy_n_crop_cols = 1+length(mds_entropy_used_);
for nb=0:Icat-1;
if (Icat==1); tmpchar = sprintf('%s_T_full_n.b16',d_inpre); else; tmpchar = sprintf('%s_T_%0.2d_n.b16',d_inpre,1+nb); end;
[bitj,nrows,ncols] = tutorial_binary_getsize(tmpchar); disp(sprintf(' %% reading %s = (%d,%d)',tmpchar,nrows,ncols));
T_entropy_n_{1+nb} = tutorial_binary_uncompress(tmpchar,1:nrows,1:ncols); 
T_entropy_n_crop_{1+nb} = T_entropy_n_{1+nb}(:,[1,(1+(mds_entropy_used_))]); 
end;%for nb=0:Icat-1;
T_entropy_n_crop_cind = 1:T_entropy_n_crop_cols;
T_entropy_n_ = T_entropy_n_crop_; T_entropy_n_cols = T_entropy_n_crop_cols; T_entropy_n_cind = T_entropy_n_crop_cind;
end;%if (mds_entropy_repl<1 | length(mds_entropy_used_)~=2);
% copying T_n_ from T_m2rx_n in case where length(mds_entropy_used_)==2 and mds_entropy_repl>0;
if (mds_entropy_repl>=1 & length(mds_entropy_used_)==2);
flag_T_entropy = 1;
mds_str = sprintf('m%dr%d',length(mds_entropy_used_),mds_entropy_repl);
mds_kappa_squared = textread(sprintf('%s_T_%s_kappa.txt',d_inpre,mds_str));
T_entropy_n_ = cell(Icat,1);
T_entropy_n_cols = 1+length(mds_entropy_used_)*mds_entropy_repl;
for ns=1:Icat;
if (Icat==1); tmpchar = sprintf('%s_T_%s_full_n.b16',d_inpre,mds_str); else; tmpchar = sprintf('%s_T_%s_%0.2d_n.b16',d_inpre,mds_str,ns); end;
[bitj,nrows,ncols] = tutorial_binary_getsize(tmpchar); disp(sprintf(' %% reading %s = (%d,%d)',tmpchar,nrows,ncols));
T_entropy_n_{ns} = tutorial_binary_uncompress(tmpchar,1:nrows,1:ncols); 
end;%for ns=1:Icat;
T_entropy_n_cind = 1:T_entropy_n_cols;
end;%if (mds_entropy_repl>= | length(mds_entropy_used_)==2);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
% determining which sector_shuffle corresponds to which patients. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
n_sector_shuffle = 2^(T_shuffle_n_cols-1); %first dimension of T_shuffle_n_ is a dummy. ;
sector_shuffle_index_ = zeros(n_patient_F,1);
tmp_index = 0;
for ns=1:Icat;
T_shuffle_tmp = T_shuffle_n_{ns}(:,2:end);
sector_shuffle_index_(tmp_index + (1:M_n_rows_(ns))) = (T_shuffle_tmp>0)*transpose(2.^[0:T_shuffle_n_cols-2]);
tmp_index = tmp_index + M_n_rows_(ns);
end;%for ns=1:Icat;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
% determining which sector_entropy corresponds to which patients. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
n_sector_entropy = 2^(T_entropy_n_cols-1); %first dimension of T_entropy_n_ is a dummy. ;
sector_entropy_index_ = zeros(n_patient_F,1);
tmp_index = 0;
for ns=1:Icat;
T_entropy_tmp = T_entropy_n_{ns}(:,2:end);
sector_entropy_index_(tmp_index + (1:M_n_rows_(ns))) = (T_entropy_tmp>0)*transpose(2.^[0:T_entropy_n_cols-2]);
tmp_index = tmp_index + M_n_rows_(ns);
end;%for ns=1:Icat;

I_study_ = zeros(n_study,n_shuffle);
I_sector_ = zeros(n_sector_entropy,n_shuffle);
nshuffle = 0;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
% entering outer loop; calculating several permutations. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;

for nshuffle = 1:n_shuffle;
disp(sprintf(' %% nshuffle %d/%d',nshuffle,n_shuffle));

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
% generating shuffled masks. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
M_n_cols = 1; A_n_cind = 1; %dummy values for consistency. ;
if (flag_T_shuffle==0); [mr_A_prm_,mr_Z_prm_] = xxxcluster_uADZSZDA_shuffle_ver2(nshuffle,M_n_rows_,M_n_cols,A_n_rind_,A_n_cind,Z_n_rind_,T_shuffle_n_crop_cols,T_shuffle_n_crop_,T_shuffle_n_crop_cind); end;
if (flag_T_shuffle==1); [mr_A_prm_,mr_Z_prm_] = xxxcluster_uADZSZDA_shuffle_ver2(nshuffle,M_n_rows_,M_n_cols,A_n_rind_,A_n_cind,Z_n_rind_,T_shuffle_n_cols,T_shuffle_n_,T_shuffle_n_cind); end;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
% determining which case-control status corresponds to which patients. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
A_prm_index_ = zeros(n_patient_F,1);
Z_prm_index_ = zeros(n_patient_F,1);
tmp_index = 0;
for ns=1:Icat;
tmp_length = size(mr_A_prm_{ns},1);
A_prm_index_(tmp_index + (1:tmp_length)) = mr_A_prm_{ns};
Z_prm_index_(tmp_index + (1:tmp_length)) = mr_Z_prm_{ns};
tmp_index = tmp_index + tmp_length;
end;%for ns=1:Icat;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
% check to see if shuffle respected study and sector_shuffle. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
if (Icat>1 & n_sector_shuffle>1);
n_A_ori_ = zeros(n_study,n_sector_shuffle); n_Z_ori_ = zeros(n_study,n_sector_shuffle);
n_A_prm_ = zeros(n_study,n_sector_shuffle); n_Z_prm_ = zeros(n_study,n_sector_shuffle);
for nstudy=1:n_study;
for nsector=1:n_sector_shuffle;
n_A_ori_(nstudy,nsector) = length(find(study_index_==nstudy & sector_shuffle_index_==(nsector-1) & A_ori_index_));
n_Z_ori_(nstudy,nsector) = length(find(study_index_==nstudy & sector_shuffle_index_==(nsector-1) & Z_ori_index_));
n_A_prm_(nstudy,nsector) = length(find(study_index_==nstudy & sector_shuffle_index_==(nsector-1) & A_prm_index_));
n_Z_prm_(nstudy,nsector) = length(find(study_index_==nstudy & sector_shuffle_index_==(nsector-1) & Z_prm_index_));
end;%for nsector=1:n_sector_shuffle;
end;%for nstudy=1:n_study;
if (norm(n_A_ori_-n_A_prm_,'fro')>0); disp(sprintf(' %% Warning! permutation mismatch for A')); end;
if (norm(n_Z_ori_-n_Z_prm_,'fro')>0); disp(sprintf(' %% Warning! permutation mismatch for Z')); end;
end;%if (Icat>1 & n_sector_shuffle>1);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
% calculate entropy for each study. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
for nstudy=1:n_study;
tmp_n = length(find(study_index_==nstudy));
tmp_n_A_ori = length(find(study_index_==nstudy & A_ori_index_));
tmp_n_Z_ori = length(find(study_index_==nstudy & Z_ori_index_));
if (tmp_n~=tmp_n_A_ori+tmp_n_Z_ori); disp(sprintf(' %% Warning! A_ori and Z_ori do not add up in study %d',nstudy)); end;
tmp_n_A_prm = length(find(study_index_==nstudy & A_prm_index_));
tmp_n_Z_prm = length(find(study_index_==nstudy & Z_prm_index_));
if (tmp_n~=tmp_n_A_prm+tmp_n_Z_prm); disp(sprintf(' %% Warning! A_prm and Z_prm do not add up in study %d',nstudy)); end;
tmp_n_A_ori_A_prm = length(find(study_index_==nstudy & A_ori_index_ & A_prm_index_));
tmp_n_A_ori_Z_prm = length(find(study_index_==nstudy & A_ori_index_ & Z_prm_index_));
tmp_n_Z_ori_A_prm = length(find(study_index_==nstudy & Z_ori_index_ & A_prm_index_));
tmp_n_Z_ori_Z_prm = length(find(study_index_==nstudy & Z_ori_index_ & Z_prm_index_));
tmp_p = tmp_n_A_ori/tmp_n; tmp_q = tmp_n_Z_ori/tmp_n;
tmp_pp = tmp_n_A_ori_A_prm/tmp_n;
tmp_pq = tmp_n_A_ori_Z_prm/tmp_n;
tmp_qp = tmp_n_Z_ori_A_prm/tmp_n;
tmp_qq = tmp_n_Z_ori_Z_prm/tmp_n;
tmp_I = 0;
if (tmp_p>0 & tmp_q>0);
if (tmp_pp>0); tmp_I = tmp_I + tmp_pp*log(tmp_pp/(tmp_p*tmp_p)); end;
if (tmp_pq>0); tmp_I = tmp_I + tmp_pq*log(tmp_pq/(tmp_p*tmp_q)); end;
if (tmp_qp>0); tmp_I = tmp_I + tmp_qp*log(tmp_qp/(tmp_q*tmp_p)); end;
if (tmp_qq>0); tmp_I = tmp_I + tmp_qq*log(tmp_qq/(tmp_q*tmp_q)); end;
 else;
tmp_I = 0;
end;%if (tmp_p>0 & tmp_q>0);
I_study_(nstudy,nshuffle) = tmp_I;
end;%for nstudy=1:n_study;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
% calculate entropy for each sector. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
for nsector=1:n_sector_entropy;
tmp_n = length(find(sector_entropy_index_==(nsector-1)));
tmp_n_A_ori = length(find(sector_entropy_index_==(nsector-1) & A_ori_index_));
tmp_n_Z_ori = length(find(sector_entropy_index_==(nsector-1) & Z_ori_index_));
if (tmp_n~=tmp_n_A_ori+tmp_n_Z_ori); disp(sprintf(' %% Warning! A_ori and Z_ori do not add up in sector_entropy %d',nsector)); end;
tmp_n_A_prm = length(find(sector_entropy_index_==(nsector-1) & A_prm_index_));
tmp_n_Z_prm = length(find(sector_entropy_index_==(nsector-1) & Z_prm_index_));
if (tmp_n~=tmp_n_A_prm+tmp_n_Z_prm); disp(sprintf(' %% Warning! A_prm and Z_prm do not add up in sector_entropy %d',nsector)); end;
tmp_n_A_ori_A_prm = length(find(sector_entropy_index_==(nsector-1) & A_ori_index_ & A_prm_index_));
tmp_n_A_ori_Z_prm = length(find(sector_entropy_index_==(nsector-1) & A_ori_index_ & Z_prm_index_));
tmp_n_Z_ori_A_prm = length(find(sector_entropy_index_==(nsector-1) & Z_ori_index_ & A_prm_index_));
tmp_n_Z_ori_Z_prm = length(find(sector_entropy_index_==(nsector-1) & Z_ori_index_ & Z_prm_index_));
tmp_p = tmp_n_A_ori/tmp_n; tmp_q = tmp_n_Z_ori/tmp_n;
tmp_pp = tmp_n_A_ori_A_prm/tmp_n;
tmp_pq = tmp_n_A_ori_Z_prm/tmp_n;
tmp_qp = tmp_n_Z_ori_A_prm/tmp_n;
tmp_qq = tmp_n_Z_ori_Z_prm/tmp_n;
tmp_I = 0;
if (tmp_p>0 & tmp_q>0);
if (tmp_pp>0); tmp_I = tmp_I + tmp_pp*log(tmp_pp/(tmp_p*tmp_p)); end;
if (tmp_pq>0); tmp_I = tmp_I + tmp_pq*log(tmp_pq/(tmp_p*tmp_q)); end;
if (tmp_qp>0); tmp_I = tmp_I + tmp_qp*log(tmp_qp/(tmp_q*tmp_p)); end;
if (tmp_qq>0); tmp_I = tmp_I + tmp_qq*log(tmp_qq/(tmp_q*tmp_q)); end;
 else;
tmp_I = 0;
end;%if (tmp_p>0 & tmp_q>0);
I_sector_(nsector,nshuffle) = tmp_I;
end;%for nsector=1:n_sector_entropy;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
% finishing outer loop. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;

end;%for nshuffle = 1:n_shuffle;

subplot(2,3,1);
imagesc(I_study_); colorbar; xlabel('nshuffle'); ylabel('study'); title('I_study_','Interpreter','none');
subplot(2,3,2);
imagesc(log10(I_study_),[-6,0]); colorbar; xlabel('nshuffle'); ylabel('study'); title('log10(I_study_)','Interpreter','none');
subplot(2,3,[3]);
cra = colormap('jet'); ncra = size(cra,1);
hold on;
for nstudy=1:n_study;
nc = max(1,min(ncra,floor(ncra*nstudy/n_study)));
tmp_ij = find(study_index_==(nstudy-1));
plot(T_m2rz_full_(tmp_ij,1),T_m2rz_full_(tmp_ij,2),'.','MarkerSize',5,'Color',cra(nc,:));
end;%for nstudy=1:n_study;
hold off;
axis square; 
title('mds colored by study');
subplot(2,3,4);
tmp_ij = find(sum(I_sector_,2)~=0);
imagesc(I_sector_(tmp_ij,:)); colorbar; xlabel('nshuffle'); ylabel('sector'); title('I_sector_','Interpreter','none');
subplot(2,3,5);
tmp_ij = find(sum(I_sector_,2)~=0);
imagesc(log10(I_sector_(tmp_ij,:)),[-6,0]); colorbar; xlabel('nshuffle'); ylabel('sector'); title('log10(I_sector_)','Interpreter','none');
subplot(2,3,[6]);
cra = colormap('jet'); ncra = size(cra,1);
hold on;
for nsector=1:n_sector_entropy;
nc = max(1,min(ncra,floor(ncra*nsector/n_sector_entropy)));
tmp_ij = find(sector_entropy_index_==(nsector-1));
plot(T_m2rz_full_(tmp_ij,1),T_m2rz_full_(tmp_ij,2),'.','MarkerSize',5,'Color',cra(nc,:));
end;%for nsector=1:n_sector_entropy;
hold off;
axis square; 
title('mds colored by sector');

set(gcf,'Position',1+[0,0,1024*2,1024]);
