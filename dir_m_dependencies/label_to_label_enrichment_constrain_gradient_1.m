function [ ...
 dcap_ ...
,grad_lN_ ...
,cap_t_ ... 
] = ...
label_to_label_enrichment_constrain_gradient_1( ...
 n_label_A ...
,n_label_A_ ...
,n_label_B ...
,n_label_B_ ...
,cap_ ...
,X_rsum_ ...
,y_rsum_ ...
,X_csum_ ...
,y_csum_ ...
,dt ...
,ctol ...
);
%%%%%%%%;
if isempty(X_rsum_);
X_rsum_ = zeros(n_label_B,n_label_A*n_label_B);
for nlabel_B=1:n_label_B;
tmp_ = zeros(n_label_A,n_label_B); tmp_(:,nlabel_B) = 1;
X_rsum_(nlabel_B,:) = reshape(tmp_,1,n_label_A*n_label_B);
end;%for nlabel_B=1:n_label_B;
X_rsum_ = sparse(X_rsum_);
end;%if isempty(X_rsum_);
if isempty(y_rsum_);
y_rsum_ = zeros(n_label_B,1);
end;%if isempty(y_rsum_);
%%%%%%%%;
if isempty(X_csum_);
X_csum_ = zeros(n_label_A,n_label_A*n_label_B);
for nlabel_A=1:n_label_A;
tmp_ = zeros(n_label_A,n_label_B); tmp_(nlabel_A,:) = 1;
X_csum_(nlabel_A,:) = reshape(tmp_,1,n_label_A*n_label_B);
end;%for nlabel_A=1:n_label_A;
X_csum_ = sparse(X_csum_);
end;%if isempty(X_csum_);
if isempty(y_csum_);
y_csum_ = zeros(n_label_A,1);
end;%if isempty(y_csum_);
%%%%%%%%;
if isempty(dt); dt=1e-1; end;
if isempty(ctol); ctol = 1e-6; end;
%%%%%%%%;
upperbound_ = min(repmat(n_label_A_,1,n_label_B),repmat(transpose(n_label_B_),n_label_A,1));
ij_upperbound_ = find(cap_(:)==upperbound_(:)); n_upperbound = length(ij_upperbound_);
X_upperbound_ = zeros(n_upperbound,n_label_A*n_label_B);
for nupperbound=1:n_upperbound;
X_upperbound_(nupperbound,ij_upperbound_(nupperbound)) = -1;
end;%for nupperbound=1:n_upperbound;
X_upperbound_ = sparse(X_upperbound_);
y_upperbound_ = zeros(n_upperbound,1);
%%%%%%%%;
lowerbound_ = zeros(size(cap_));
ij_lowerbound_ = find(cap_(:)==lowerbound_(:)); n_lowerbound = length(ij_lowerbound_);
X_lowerbound_ = zeros(n_lowerbound,n_label_A*n_label_B);
for nlowerbound=1:n_lowerbound;
X_lowerbound_(nlowerbound,ij_lowerbound_(nlowerbound)) = +1;
end;%for nlowerbound=1:n_lowerbound;
X_lowerbound_ = sparse(X_lowerbound_);
y_lowerbound_ = zeros(n_lowerbound,1);
%%%%%%%%;
I_ = 1.0*sparse(1:n_label_A*n_label_B,1:n_label_A*n_label_B,1,n_label_A*n_label_B,n_label_A*n_label_B);
tmp_options = optimoptions('quadprog','Display','off','ConstraintTolerance',ctol);
%%%%%%%%;
%subplot(2,2,1); spy(reshape(sum(X_lowerbound_,1),n_label_A,n_label_B)); title('X_lowerbound','Interpreter','none'); subplot(2,2,2); spy(full(cap_)==lowerbound_); title('lowerbound');
%subplot(2,2,3); spy(reshape(sum(X_upperbound_,1),n_label_A,n_label_B)); title('X_upperbound','Interpreter','none'); subplot(2,2,4); spy(full(cap_)==upperbound_); title('upperbound');
%%%%%%%%;
grad_lN_ = +dgammaln(1+cap_); grad_lP_ = -dgammaln(1+cap_);
qcap_ = quadprog( ...
 I_ ...
,grad_lN_(:) ...
,[X_upperbound_;X_lowerbound_] ...
,[y_upperbound_;y_lowerbound_] ...
,[X_rsum_;X_csum_] ...
,[y_rsum_;y_csum_] ...
,[] ...
,[] ...
,[] ...
,tmp_options ...
);
dcap_ = reshape(qcap_,[n_label_A,n_label_B]);
dcap_(find(abs(dcap_)<=ctol))=0; %<-- set all constrained elements exactly to 0. ;
ucap_ = dcap_/max(ctol,fnorm(dcap_)); %<-- convert to unit vector. ;
dtucap_ = dt*ucap_*dot(ucap_(:),grad_lN_(:)); %<-- try and take a step with a magnitude similar to dt*gradient. ;
cap_t_ = cap_ + dtucap_;
cap_t_ = label_to_label_enrichment_cap_proj_1(sum(cap_,2),sum(cap_,1),cap_t_,ctol);
cap_t_(find(cap_t_<ctol))=0; %<-- set all constrained elements exactly to 0. ;

