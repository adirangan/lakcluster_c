function [lP_0,cap_,cup_] = label_to_label_enrichment_lP0(label_A_,label_B_);
% Calculates enrichment p-value. ;
% Assumes numeric labels, although labels do not need to be sequential. ;
% lP_0 = probability of achieving intersections. ;
% cap_ = set of intersections. ;
% cup_ = set of unions. ;
%%%%%%%%;
verbose=0;
if (verbose); disp(sprintf(' %% [entering label_to_label_enrichment_lP0]')); end;
lP_0 = 0;
%%%%%%%%;
n_A = numel(label_A_);
u_label_A_ = unique(label_A_);
n_label_A = length(u_label_A_);
n_label_A_ = zeros(n_label_A,1);
for nlabel_A = 1:n_label_A;
ij_A_{nlabel_A} = find(label_A_ == u_label_A_(nlabel_A));
n_label_A_(nlabel_A) = numel(ij_A_{nlabel_A});
end;%for nlabel_A=1:n_label_A;
%%%%%%%%;
n_B = numel(label_B_);
u_label_B_ = unique(label_B_);
n_label_B = length(u_label_B_);
n_label_B_ = zeros(n_label_B,1);
for nlabel_B = 1:n_label_B;
ij_B_{nlabel_B} = find(label_B_ == u_label_B_(nlabel_B));
n_label_B_(nlabel_B) = numel(ij_B_{nlabel_B});
end;%for nlabel_B=1:n_label_B;
%%%%%%%%;
if (n_A~=n_B); disp(sprintf(' %% Warning, n_A %d n_B %d in label_to_label_enrichment',n_A,n_B)); end;
assert(n_A==n_B);
n_X = n_A;
%%%%%%%%;
cap_ = zeros(n_label_A,n_label_B);
cup_ = zeros(n_label_A,n_label_B);
for nlabel_A=1:n_label_A;
for nlabel_B=1:n_label_B;
cap_(nlabel_A,nlabel_B) = numel(intersect(ij_A_{nlabel_A},ij_B_{nlabel_B}));
cup_(nlabel_A,nlabel_B) = numel(union(ij_A_{nlabel_A},ij_B_{nlabel_B}));
end;%for nlabel_B=1:n_label_B;
end;%for nlabel_A=1:n_label_A;
%%%%%%%%;
% Given a list of specific sets from A, ;
% as well as the cardinality of the sets in B, ;
% the number of ways of finding the precise intersections listed in cap_ is: ;
% lN = sum(gammaln(1+n_label_A_)) - sum(gammaln(1+cap_(:))). ;
% Similarly, the probability of observing cap_ is: ;
% lP = sum(gammaln(1+n_label_A_)) - sum(gammaln(1+cap_(:))) + sum(gammaln(1+n_label_B_)) - gammaln(1+n_X). ;
%%%%%%%%;
num_A_ = zeros(n_A,1);
for nlabel_A=1:n_label_A;
num_A_(ij_A_{nlabel_A}) = nlabel_A;
end;%for nlabel_A=1:n_label_A;
num_B_ = zeros(n_B,1);
for nlabel_B=1:n_label_B;
num_B_(ij_B_{nlabel_B}) = nlabel_B;
end;%for nlabel_B=1:n_label_B;
lP_base = sum(gammaln(1+n_label_A_)) + sum(gammaln(1+n_label_B_)) - gammaln(1+n_X);
cap_0_ = sparse(num_A_,num_B_,1,n_label_A,n_label_B);
tmp_0 = sum(gammaln(1+cap_0_),'all');
lN_0 = +tmp_0;
lP_0 = lP_base - tmp_0;
if (verbose); disp(sprintf(' %% [finished label_to_label_enrichment_lP0]')); end;
