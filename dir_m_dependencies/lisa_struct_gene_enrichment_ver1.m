clear; setup;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
% First we load an ontology;
% n_pathway an integer storing number of pathways. ;
% pathway_name_ a cell array: pathway_name_{npathway} = name of pathway. ;
% pathway_size_ an integer array: pathway_size_(npathway) = number of genes in pathway. ;
% pathway_EZid__ a cell array: pathway_EZid__{npathway} = integer array of size pathway_size_(npathway) storing the EZids for that pathway. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
ontology = ontology_struct_make_ver0('/data/rangan/dir_bcc/dir_seek_072916/data/human/go_bp_iea.txt');
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
% Now we limit the ontology to neuron-specific enrichments. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
tmp_nsg_ = find( cellfun('length',strfind(ontology.pathway_name_,'neuro')) | cellfun('length',strfind(ontology.pathway_name_,'synap')) | cellfun('length',strfind(ontology.pathway_name_,'axon')) ) ;
n_pathway_nsg = length(tmp_nsg_);
ontology_nsg = struct(...
		      'verbose',0 ...
		      ,'fname_ontology',ontology.fname_ontology...
		      ,'n_line',2*n_pathway_nsg...
		      ,'n_pathway',n_pathway_nsg...
		      );
ontology_nsg.pathway_name_ = cell(n_pathway_nsg,1);
ontology_nsg.pathway_EZid__ = cell(n_pathway_nsg,1);
ontology_nsg.pathway_size_ = zeros(n_pathway_nsg,1);
for npathway_nsg=1:n_pathway_nsg;
npathway = tmp_nsg_(npathway_nsg);
ontology_nsg.pathway_name_{npathway_nsg} = ontology.pathway_name_{npathway};
ontology_nsg.pathway_EZid__{npathway_nsg} = ontology.pathway_EZid__{npathway};
ontology_nsg.pathway_size_(npathway_nsg) = ontology.pathway_size_(npathway);
end;%for npathway_nsg=1:n_pathway_nsg;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
% Now we load an annotation file. ;
% ru_ = rs_sort_ a cell array of snp rsids. We assume that this is unique. ;
% n_ru = n_rs_sort an integer: n_ru = length(ru_) = n_rs_sort = length(rs_sort_). ;
% EZ__ a cell-array associating snps with genes: EZ__{nsnp} gives the list of (string) EZids associated with the snp with (string) rsid listed in rs_sort_{nsnp}. ;
% ln_ an integer arry: ln_(nsnp) is an integer storing the length of EZ__{nsnp}. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
annot = annot_struct_make_ver0('/data/rangan/dir_bcc/dir_PGC_20190328/dir_misc/bip_all_bim_uniq_38_annotat_35_10.genes.annot');
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
% Now extract the unique EZids from the annotation file. ;
% eo__ is a cell array: eo__{nru} contains the EZids associated with snp__id ru_(nru) ; 
% eo_ is an array of (nonunique) EZids created from eo__. ;
% eu_ is an array of unique EZids in eo_. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
annot = annot_struct_eoeu_ver0(annot);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
% Now determine which snps are associated with each pathway. ;
% po__ is a cell array: po__{npathway} contains the EZids associated with pathway_name_{npathway}. ;
% po_ is an array of (nonunique) EZids created from po__. ;
% pu_ is an array of unique EZids in po_;
% qu_ is the intersection of eu_ (from the annotation) and pu_ (from the ontology_nsg). ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
ontology_nsg = ontology_struct_popuqu_ver0(ontology_nsg,annot);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
% Now we load the results from a biclustering run. ;
% The runs we chose are from: ;
dir_trunk = sprintf('/data/rangan/dir_bcc/dir_PGC_20190328');
dir_code = sprintf('/data/rangan/dir_bcc/dir_lakcluster_c_dev');
flag_dex_vs_lak = 'dex'; %<-- differentially expressed clustering. ;
cl_num = 4; %<-- train on platform 4. ;
flag_reverse = 0; %<-- forward bicluster (i.e., case-specific). ;
B_MLT = 34; n_mds = 20; mr_string = '';mc_string = ''; %<-- accurate to 2^(-34), 20 total mds components (but only 2 used). ; No special mc_string. ;
n_maf = 5; n_cov = 2; %<-- minor-allele-frequency cutoff 25-50, 2 covariates (mds-components) used, repeated twice. ;
n_scramble = 0; n_shuffle = 0; %<-- no previous bicluster extracted/scrambled first, no random shuffling. ;
gamma = [0.004]; %<-- gamma is the fraction eliminated per iteration. 000 implies a single patient eliminated per iteration. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
lisa = lisa_struct_make_ver0(mr_string,mc_string,cl_num,flag_dex_vs_lak,gamma,B_MLT,n_mds,flag_reverse,n_maf,n_cov,n_scramble,n_shuffle) ;
lisa = lisa_struct_prefix_ver0(lisa,dir_code,dir_trunk); 
lisa.nshuffle = 0;  lisa = lisa_struct_names_ver0(lisa); 
lisa = lisa_struct_xdrop_ver0(lisa); lisa = lisa_struct_mdsfam_ver0(lisa); 
lisa = lisa_struct_bim_ver0(lisa); %<-- this is large and takes a while to load. ;
lisa = lisa_struct_mx_ver0(lisa); lisa = lisa_struct_studyindex_ver0(lisa); lisa = lisa_struct_trace_ver0(lisa);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
% so_ contains the names of the snps listed in cu_. ;
% su_ contains the unique snps listed in so_. ;
% tu_ is the minimal set of snp-names which is in the intersection of both ru_ and so_. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
lisa = lisa_struct_sosutu_ver0(lisa,annot);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
% link pathways with snps in cu_ by taking the union over all snp-sets for each gene.; 
% cu_to_cu__ is a cell array which holds the snp-indices (as entries of cu_) associated with the snps in each pathway. ; 
% i.e., lisa.bim__id_(cu_(cu_to_cu__{npathway})) will hold the (string) rsids associated with pathway_name_{npathway}. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
lisa = lisa_struct_cu_to_cu_ver0(lisa,annot,ontology_nsg);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
% cu_by_eu_xref__ is a sparse matrix with rows indexing cu_, columns indexing the unique EZids, ;
% and sparse entries indicating which entries of cu_ are associated with which genes. ;
% cu_by_eu_xref_XX__ is a cell array: cu_by_eu_xref_XX__{npcercentile} is a sparse matrix with rows indexing cu_, columns indexing the unique EZids, ;
% and sparse entries indicating which entry of cu_ is associated with the XX-percentile for each gene. ;
% Note that the actual rsid taken from so_{find(cu_by_eu_xref_XX__{npercentile}(:,ng_EZ))} will not necessarily correspond to the gene indexed by eu_(ng_EZ). ;
% This is because the indices of find(cu_by_eu_xref_XX__{npercentile}(:,ng_EZ)) are designed to be percentiles referencing the distribution of indices within cu_ associated with eu_(ng_EZ). ;
% Thus, find(cu_by_eu_xref_XX__{percentile==00}(:,ng_EZ)) and find(cu_by_eu_xref_XX__{percentile==100}(:,ng_EZ)) will correspond to the first and last entries of cu_ associated with eu_(ng_EZ), ;
% but the intermediate find(cu_by_eu_xref_XX__{percentile==50}(:,ng_EZ)) may not. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
percentile_ = [0,25,50,75,100]; n_percentile = length(percentile_);
lisa = lisa_struct_cu_by_eu_xref_ver0(lisa,annot,ontology_nsg,percentile_);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
% Now link pathways with snps in cu_ by taking only one of the snps from each snp-set for each gene.; 
% The representative snp chosen for each gene will change depending on which percentile (amongst possible representatives) we choose. ;
% Note that, if multiple genes have the same representative, that snp will be counted multiple times. ;
% The total number of representative-snps should equal the total number of genes. ;
% cu_to_po_XX__ = cell(n_pathway,1); %<-- this will hold the snp-indices (as entries of cu_) associated with EZids in each pathway. ; 
% More specifically: lisa.bim__id_(cu_(find(cu_to_po_XX__{npathway}))) will hold the (string) rsids associated with first XX-percentile occurrences of the genes in pathway pathway_name_{npathway}. ;
% Note that we expect lisa.bim__id_(cu_(find(cu_to_po_01__{npathway}))) to hold the first rsid associated with pathway_name_{npathway}. ;
% Similarly, we expect lisa.bim__id_(cu_(find(cu_to_po_99__{npathway}))) to hold the last rsid associated with pathway_name_{npathway}. ;
% However, an intermediate percentile such as lisa.bim__id_(cu_(find(cu_to_po_25__{npathway}))) may not actually correspond to an rsid associated with pathway_name_{npathway}, ;
% simply because this 25th percentile location (along cu_) may actually lie in between two indices which are both in the pathway. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
lisa = lisa_struct_cu_to_po_ver0(lisa,annot,ontology_nsg);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
% Now calculate enrichment for all pathways. ;
% This uses a simple gaussian approximation. ;
% Below, k_XX__{npathway,npercentile}(nc) lists the length of the intersection between ;
% iteration nc (from lisa.cdrop_a_) and the pathway pathway_name_{npathway}, ;
% where the snp-threshold for each EZid is determined using the snp-index associated with the lisa.percentile_(npercentile) percentile. ;
% The values of K, M, N, m and n are similar. ;
% K is the total size of the pathway (constant across iteration and percentile). ;
% N is the total size of the sample (i.e., number of snps retained at the current iteration, which is constant across percentile and pathway). ;
% M = N-K. ;
% n is the length of the current sample (constant across pathway and iteration). ;
% m = n-k. ;
% k_XX__ = cell(n_pathway,n_percentile); % <-- length of intersection between current iteration and pathway. ;
% K_XX__ = zeros(n_pathway,n_percentile); % <-- total size of pathway. ; 
% M_XX__ = zeros(n_pathway,n_percentile); % <-- N-K. ;
% m_XX__ = cell(n_pathway,n_percentile); % <-- n-k. ;
% z_XX__ = cell(n_pathway,n_percentile); % <-- simple z-score associated with representation: assumes mean is n*P, and std is sqrt(n*P*(1-P)), where P = K/N . ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
lisa = lisa_struct_km_ver0(lisa,annot,ontology_nsg);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
% plot z-score for neuron-specific enrichments. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
lisa_struct_nsg_ver0(lisa,annot,ontology_nsg);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
% Now we can look at a similar set of gene-enrichments ;
% produced by a random permutation of cdrop_a_. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
n_shuffle = 128;
y_XX___ = cell(n_shuffle+1,1); y_XX___{1} = lisa.z_XX__;
lpu_XX___ = cell(n_shuffle+1,1); lpu_XX___{1} = lisa.log_pval_up_XX__;
lpd_XX___ = cell(n_shuffle+1,1); lpd_XX___{1} = lisa.log_pval_dn_XX__;
for nshuffle=1:n_shuffle;
tmp_lisa = lisa;
%tmp_fname = sprintf('%s/out_xdrop_a_s%.4d.txt',tmp_lisa.dir_out_trace,nshuffle); tmp_out_xdrop_a_ = textread(tmp_fname);
tmp_p_ = randperm(length(lisa.rdrop_a_)); tmp_lisa.rdrop_a_ = lisa.rdrop_a_(tmp_p_);
tmp_p_ = randperm(length(lisa.cdrop_a_)); tmp_lisa.cdrop_a_ = lisa.cdrop_a_(tmp_p_);
tmp_lisa = lisa_struct_sosutu_ver0(tmp_lisa,annot);
tmp_lisa = lisa_struct_cu_to_cu_ver0(tmp_lisa,annot,ontology_nsg);
tmp_lisa = lisa_struct_cu_by_eu_xref_ver0(tmp_lisa,annot,ontology_nsg,[0,25,50,75,100]);
tmp_lisa = lisa_struct_cu_to_po_ver0(tmp_lisa,annot,ontology_nsg);
tmp_lisa = lisa_struct_km_ver0(tmp_lisa,annot,ontology_nsg);
%lisa_struct_nsg_ver0(tmp_lisa,annot,ontology_nsg);
y_XX___{1+nshuffle} = tmp_lisa.z_XX__;
lpu_XX___{1+nshuffle} = tmp_lisa.log_pval_up_XX__;
lpd_XX___{1+nshuffle} = tmp_lisa.log_pval_dn_XX__;
end;%for nshuffle=1:n_shuffle;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;

%%%%%%%%;
% now saving. ;
%%%%%%%%;
save('/data/rangan/dir_bcc/dir_PGC_20190328/dir_misc/tmp_r0_20190616.mat');
%%%%%%%%;

for npathway_base=1:4:ontology_nsg.n_pathway-3;
clf;
for npb=1:4;
npathway = npathway_base+npb-1;
for npercentile=1:n_percentile;
subplot(4,n_percentile,npercentile+(npb-1)*n_percentile);
hold on;
for nshuffle=n_shuffle:-1:0;%for nshuffle=n_shuffle:-1:0;
if nshuffle==0; c_ = [1,0,0]; tmp_l = 2; end;
if nshuffle> 0; c_ = [0,0,1]; tmp_l = 0.5; end;
plot(y_XX___{1+nshuffle}{npathway,npercentile},'-','Color',c_,'LineWidth',tmp_l);
end;%for nshuffle=n_shuffle:-1:0;
xlim([1,lisa.n_iteration]);
title(sprintf('%s %.2d%%',ontology_nsg.pathway_name_{npathway}(1:min(24,end)),percentile_(npercentile)),'Interpreter','none');
end;%for npercentile=1:n_percentile;
end;%for npb=1:4;
set(gcf,'Position',1+[0,0,1024*2,1024]);
drawnow();
pause();
end;%for npathway_base=1:4:ontology_nsg.n_pathway,-3;

Q_XX__ = zeros(n_shuffle+1,n_pathway_nsg,n_percentile,lisa.n_iteration);
for npercentile=1:n_percentile;
for npathway_nsg=1:n_pathway_nsg;
tmp_y_XX__ = zeros(lisa.n_iteration,n_shuffle+1);
for nshuffle=0:n_shuffle;
tmp_y_XX__(:,1+nshuffle) = y_XX___{1+nshuffle}{npathway_nsg,npercentile};
end;%for nshuffle=0:n_shuffle;
for niteration=1:lisa.n_iteration;
[~,tmp_ij_] = sort(tmp_y_XX__(niteration,:)); [~,tmp_ij_] = sort(tmp_ij_);
Q_XX__(:,npathway_nsg,npercentile,niteration) = tmp_ij_;
end;%for niteration=1:lisa.n_iteration;
end;%for npathway_nsg=1:n_pathway_nsg;
end;%for npercentile=1:n_percentile;

for niteration = 175:25:525; 
%for niteration = round(150:12.5:325); 
npercentile = find(percentile_==75);
[~,tmp_ij_] = sort(Q_XX__(1+0,:,npercentile,niteration));
tmp_pathway_name_ = cell(n_pathway_nsg,1);
for npathway_nsg=1:n_pathway_nsg;
tmp_pathway_name = ontology_nsg.pathway_name_{tmp_ij_(npathway_nsg)}(1:min(32,end));
tmp_pathway_name(strfind(tmp_pathway_name,'_'))=' ';
tmp_pathway_name_{npathway_nsg} = tmp_pathway_name;
end;%for npathway_nsg=1:n_pathway_nsg;
%%%%%%%%;
figure();clf;
subplot(1,1,1);hold on; 
for nshuffle=1:n_shuffle;
[~,tmp_ij2_] = sort(Q_XX__(1+nshuffle,:,npercentile,niteration));
stairs(Q_XX__(1+nshuffle,tmp_ij2_,npercentile,niteration),'-','Color',0.85*[1,1,1],'LineWidth',0.5);
end;%for nshuffle=1:n_shuffle;
stairs(Q_XX__(1,tmp_ij_,npercentile,niteration),'r-','LineWidth',2);
plot([1,n_pathway_nsg],[1,1+n_shuffle],'k-','LineWidth',0.5);
plot([1,n_pathway_nsg],0.5*[1+1+n_shuffle]*[1,1],'k-','LineWidth',0.5);
hold off;
title(sprintf('Q ni%d %.2d%%',niteration,percentile_(npercentile)));
set(gca,'XTick',1:n_pathway_nsg,'XTickLabel',tmp_pathway_name_); xtickangle(90);
xlim([1,n_pathway_nsg]);ylim([1,1+n_shuffle]);
set(gcf,'Position',1+[0,0,1024*2,1024]);
drawnow();
end;%for niteration = 175:25:525; 

for niteration = 175:25:525; 
npercentile=find(percentile_==75);
figure();clf;
%%%%%%%%;
[~,tmp_ij_] = sort(Q_XX__(1+0,:,npercentile,niteration));
tmp_pathway_name_ = cell(n_pathway_nsg,1);
for npathway_nsg=1:n_pathway_nsg;
tmp_pathway_name = ontology_nsg.pathway_name_{tmp_ij_(npathway_nsg)}(1:min(32,end));
tmp_pathway_name(strfind(tmp_pathway_name,'_'))=' ';
tmp_pathway_name_{npathway_nsg} = tmp_pathway_name;
end;%for npathway_nsg=1:n_pathway_nsg;
%%%%%%%%;
tmp_z_ = zeros(1+n_shuffle,n_pathway_nsg);
tmp_p_ = zeros(1+n_shuffle,n_pathway_nsg);
for npathway_nsg=1:n_pathway_nsg;
for nshuffle=n_shuffle:-1:0;
tmp_z_(1+nshuffle,npathway_nsg) = y_XX___{1+nshuffle}{tmp_ij_(npathway_nsg),npercentile}(niteration);
tmp_p_(1+nshuffle,npathway_nsg) = -lpu_XX___{1+nshuffle}{tmp_ij_(npathway_nsg),npercentile}(niteration);
end;%for nshuffle=n_shuffle:-1:0;
end;%for npathway_nsg=1:n_pathway_nsg;
%%%%%%%%;
hold on;
plot(1:npathway_nsg,transpose(tmp_z_(2:end,:)),'g.','MarkerSize',10);
plot(1:npathway_nsg,transpose(tmp_z_(1,:)),'r.','MarkerSize',25);
%plot(1:npathway_nsg,ones(1,npathway_nsg)*-log(0.05),'k--','LineWidth',0.5);
%plot(1:npathway_nsg,ones(1,npathway_nsg)*-log(0.01),'k:','LineWidth',0.5);
hold off;
title(sprintf('Q ni%d %.2d%%',niteration,percentile_(npercentile)));
set(gca,'XTick',1:n_pathway_nsg,'XTickLabel',tmp_pathway_name_); xtickangle(90);
xlim([1,n_pathway_nsg]); 
%ylim([0,max(-log(0.001),1.1*max(tmp_z_(1,:)))]);
set(gcf,'Position',1+[0,0,1024*2,1024]);
end;%for niteration = 175:25:525; 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
% comparison with label-shuffled traces. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;

%{

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
% Now we can look at a similar set of gene-enrichments ;
% produced by a label-shuffled version of cdrop_a_ ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
n_shuffle = 128;
z_XX___ = cell(n_shuffle+1,1); z_XX___{1} = lisa.z_XX__;
lpu_XX___ = cell(n_shuffle+1,1); lpu_XX___{1} = lisa.log_pval_up_XX__;
lpd_XX___ = cell(n_shuffle+1,1); lpd_XX___{1} = lisa.log_pval_dn_XX__;
for nshuffle=1:n_shuffle;
tmp_lisa = lisa;
tmp_fname = sprintf('%s/out_xdrop_a_s%.4d.txt',tmp_lisa.dir_out_trace,nshuffle); tmp_out_xdrop_a_ = textread(tmp_fname);
tmp_rdrop_a_ = tmp_out_xdrop_a_(find(tmp_out_xdrop_a_(:,1)>-1),1)+1; tmp_lisa.rdrop_a_ = tmp_rdrop_a_;
tmp_cdrop_a_ = tmp_out_xdrop_a_(find(tmp_out_xdrop_a_(:,2)>-1),2)+1; tmp_lisa.cdrop_a_ = tmp_cdrop_a_;
tmp_lisa = lisa_struct_sosutu_ver0(tmp_lisa,annot);
tmp_lisa = lisa_struct_cu_to_cu_ver0(tmp_lisa,annot,ontology_nsg);
tmp_lisa = lisa_struct_cu_by_eu_xref_ver0(tmp_lisa,annot,ontology_nsg,[0,25,50,75,100]);
tmp_lisa = lisa_struct_cu_to_po_ver0(tmp_lisa,annot,ontology_nsg);
tmp_lisa = lisa_struct_km_ver0(tmp_lisa,annot,ontology_nsg);
%lisa_struct_nsg_ver0(tmp_lisa,annot,ontology_nsg);
z_XX___{1+nshuffle} = tmp_lisa.z_XX__;
lpu_XX___{1+nshuffle} = tmp_lisa.log_pval_up_XX__;
lpd_XX___{1+nshuffle} = tmp_lisa.log_pval_dn_XX__;
end;%for nshuffle=1:n_shuffle;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;

%%%%%%%%
% now saving. ;
%%%%%%%%
save('/data/rangan/dir_bcc/dir_PGC_20190328/dir_misc/tmp_r0b_20190617.mat');
%%%%%%%%;


for npathway_base=1:4:ontology_nsg.n_pathway-3;
clf;
for npb=1:4;
npathway = npathway_base+npb-1;
for npercentile=1:n_percentile;
subplot(4,n_percentile,npercentile+(npb-1)*n_percentile);
hold on;
for nshuffle=n_shuffle:-1:0;%for nshuffle=n_shuffle:-1:0;
if nshuffle==0; c_ = [1,0,0]; tmp_l = 2; end;
if nshuffle> 0; c_ = [0,0,1]; tmp_l = 0.5; end;
plot(z_XX___{1+nshuffle}{npathway,npercentile},'-','Color',c_,'LineWidth',tmp_l);
end;%for nshuffle=n_shuffle:-1:0;
xlim([1,lisa.n_iteration]);
title(sprintf('%s %.2d%%',ontology_nsg.pathway_name_{npathway}(1:min(24,end)),percentile_(npercentile)),'Interpreter','none');
end;%for npercentile=1:n_percentile;
end;%for npb=1:4;
set(gcf,'Position',1+[0,0,1024*2,1024]);
drawnow();
pause();
end;%for npathway_base=1:4:ontology_nsg.n_pathway,-3;

P_XX__ = zeros(n_shuffle+1,n_pathway_nsg,n_percentile,lisa.n_iteration);
for npercentile=1:n_percentile;
for npathway_nsg=1:n_pathway_nsg;
tmp_z_XX__ = zeros(lisa.n_iteration,n_shuffle+1);
for nshuffle=0:n_shuffle;
tmp_z_XX__(:,1+nshuffle) = z_XX___{1+nshuffle}{npathway_nsg,npercentile};
end;%for nshuffle=0:n_shuffle;
for niteration=1:lisa.n_iteration;
[~,tmp_ij_] = sort(tmp_z_XX__(niteration,:)); [~,tmp_ij_] = sort(tmp_ij_);
P_XX__(:,npathway_nsg,npercentile,niteration) = tmp_ij_;
end;%for niteration=1:lisa.n_iteration;
end;%for npathway_nsg=1:n_pathway_nsg;
end;%for npercentile=1:n_percentile;

figure();clf;
niteration = 175; npercentile = find(percentile_==100);
[~,tmp_ij_] = sort(P_XX__(1,:,npercentile,niteration));
tmp_pathway_name_ = cell(n_pathway_nsg,1);
for npathway_nsg=1:n_pathway_nsg;
tmp_pathway_name = ontology_nsg.pathway_name_{tmp_ij_(npathway_nsg)}(1:min(32,end));
tmp_pathway_name(strfind(tmp_pathway_name,'_'))=' ';
tmp_pathway_name_{npathway_nsg} = tmp_pathway_name;
end;%for npathway_nsg=1:n_pathway_nsg;
%%%%%%%%;
subplot(1,1,1);hold on; 
for nshuffle=1:n_shuffle;
[~,tmp_ij2_] = sort(P_XX__(1+nshuffle,:,npercentile,niteration));
stairs(P_XX__(1+nshuffle,tmp_ij2_,npercentile,niteration),'-','Color',0.85*[1,1,1],'LineWidth',0.5);
end;%for nshuffle=1:n_shuffle;
stairs(P_XX__(1,tmp_ij_,npercentile,niteration),'r-','LineWidth',2);
plot([1,n_pathway_nsg],[1,1+n_shuffle],'k-','LineWidth',0.5);
plot([1,n_pathway_nsg],0.5*[1+1+n_shuffle]*[1,1],'k-','LineWidth',0.5);
hold off;
title(sprintf('P ni%d %.2d%%',niteration,percentile_(npercentile)));
set(gca,'XTick',1:n_pathway_nsg,'XTickLabel',tmp_pathway_name_); xtickangle(90);
xlim([1,n_pathway_nsg]);ylim([1,1+n_shuffle]);
set(gcf,'Position',1+[0,0,1024*2,1024]);

 %}
