function xxxcluster_PGC_uADZSZDA_ver12(dir_code,dir_trunk,string_prefix,maf_lo_threshold,maf_hi_threshold,flag_dex_vs_lak,flag_reverse,Icat,n_mds,mds_used_,mds_repl,gamma,B_MLT,Ireq,n_scramble,scramble_out_xdrop_,scramble_rseed_,nshuffle,flag_rerun,pbs_walltime,slurm_walltime,slurm_nnodes,slurm_tpn,slurm_memdecl,row_factor,col_factor,flag_verbose)
% set up to allow pbs_walltime as input ; using lakcluster_ver18 ; no replication ; reverse-search ;
% run with: xxxcluster_PGC_uADZSZDA_ver12_dr.m;
% allowing for scrambling and shuffling. ; 
% Note that currently the shuffling is done *before* the scrambling, which is not correct. ;
% Ideally the scrambling should be done first, and *then* the shuffling should occur. ;
% We will fix this later, operating under the assumption that we never shuffle scrambled data-sets. ;

na=1;
if (nargin<na); dir_code = pwd; end; na=na+1;
if (nargin<na); dir_trunk = pwd; end; na=na+1;
if (nargin<na); string_prefix = 'clx'; end; na=na+1;
if (nargin<na); maf_lo_threshold = 0; end; na=na+1;
if (nargin<na); maf_hi_threshold = 1.0; end; na=na+1;
if (nargin<na); flag_dex_vs_lak = 'dex'; end; na=na+1;
if (nargin<na); flag_reverse = 0; end; na=na+1;
if (nargin<na); Icat = 1; end; na=na+1;
if (nargin<na); n_mds = 20; end; na=na+1;
if (nargin<na); mds_used_ = [1:2]; end; na=na+1;
if (nargin<na); mds_repl = 1; end; na=na+1;
if (nargin<na); gamma = 0.002; end; na=na+1;
if (nargin<na); B_MLT = 8; end; na=na+1;
if (nargin<na); Ireq = 0; end; na=na+1;
if (nargin<na); n_scramble = 0; end; na=na+1;
if (nargin<na); scramble_out_xdrop_ = {}; end; na=na+1;
if (nargin<na); scramble_rseed_ = []; end; na=na+1;
if (nargin<na); nshuffle = 0; end; na=na+1;
if (nargin<na); flag_rerun = 1; end; na=na+1;
if (nargin<na); pbs_walltime = 13; end; na=na+1;
if (nargin<na); slurm_walltime = 13; end; na=na+1;
if (nargin<na); slurm_nnodes = 1; end; na=na+1;
if (nargin<na); slurm_tpn = 15; end; na=na+1;
if (nargin<na); slurm_memdecl = 32; end; na=na+1;
if (nargin<na); row_factor = 1.0; end; na=na+1;
if (nargin<na); col_factor = 1.0; end; na=na+1;
if (nargin<na); flag_verbose = 0; end; na=na+1;

GLOBAL_memory_gb = slurm_memdecl;

if (nshuffle>0 & n_scramble>0); disp(sprintf(' %% Warning! n_scramble %d nshuffle %d in xxxcluster_PGC_uADZSZDA_ver12. Not yet implemented appropriately!',n_scramble,nshuffle)); end;

bitj = 16;
QR_strategy = 'YnWt condense';
QC_strategy = 'YnWt store one';
if (Icat==1); Ireq = 0; end;

string_name_s0000 = sprintf('%s_%s',string_prefix,xxxcluster_PGC_uADZSZDA_xfix_ver12(flag_dex_vs_lak,maf_lo_threshold,maf_hi_threshold,flag_reverse,n_mds,mds_used_,mds_repl,gamma,B_MLT,Ireq,n_scramble,0));
name_suffix = sprintf('%s','analyze');
disp(sprintf(' string_name_s0000: %s',string_name_s0000));
dir__in = sprintf('%s/dir_%s',dir_trunk,string_prefix);
dir_tmp = sprintf('%s_%s',dir__in,name_suffix); if ~exist(dir_tmp,'dir'); mkdir(dir_tmp); end;
dir_out_s0000 = sprintf('%s_%s/dir_%s',dir__in,name_suffix,string_name_s0000); if ~exist(dir_out_s0000,'dir'); mkdir(dir_out_s0000); end;
dir_out_trace = sprintf('%s/dir_trace',dir_out_s0000); if ~exist(dir_out_trace,'dir'); mkdir(dir_out_trace); end;
string_timing_s0000 = sprintf('%s/timing.m',dir_out_s0000);
flag_timing = 0;
if (exist(string_timing_s0000,'file')); run(string_timing_s0000); elrt_s0000 = elrt; flag_timing = 1; end;

string_name = sprintf('%s_%s',string_prefix,xxxcluster_PGC_uADZSZDA_xfix_ver12(flag_dex_vs_lak,maf_lo_threshold,maf_hi_threshold,flag_reverse,n_mds,mds_used_,mds_repl,gamma,B_MLT,Ireq,n_scramble,nshuffle));
name_suffix = sprintf('%s','analyze');
disp(sprintf(' string_name: %s',string_name));
dir__in = sprintf('%s/dir_%s',dir_trunk,string_prefix);
dir_tmp = sprintf('%s_%s',dir__in,name_suffix); if ~exist(dir_tmp,'dir'); mkdir(dir_tmp); end;
dir_out = sprintf('%s_%s/dir_%s',dir__in,name_suffix,string_name); if ~exist(dir_out,'dir'); mkdir(dir_out); end;
flag_found = 0; 
string_timing = sprintf('%s/timing.m',dir_out);
string_trace = sprintf('%s/out_trace_s%0.4d.txt',dir_out_trace,nshuffle);
if (~flag_rerun & (exist(string_timing,'file') | exist(string_trace,'file'))); 
if (exist(string_timing,'file')); disp(sprintf(' %% found %s, not rerunning.',string_timing)); end;
if (exist(string_trace,'file')) disp(sprintf(' %% found %s, not rerunning.',string_trace)); end;
flag_found = 1; 
end; %if (~flag_rerun & (exist(string_timing,'file') | exist(string_trace,'file'))); 
if (flag_rerun | (~exist(string_timing,'file') & ~exist(string_trace,'file')));
disp(sprintf(' %% could not find either: \n%s\nor\n%s\nrerunning.',string_timing,string_trace)); 
flag_found = 0; 
end;%if (flag_rerun | (~exist(string_timing,'file') & ~exist(string_trace,'file')));

if ~flag_found

d_inpre = sprintf('%s/%s',dir__in,string_prefix); 
d_oupre = sprintf('%s/%s',dir_out,string_name);

Y_n_cols=0;

% reading original row-masks for A and Z ;
mr_A_ori_ = cell(Icat,1);
mr_Z_ori_ = cell(Icat,1);
A_n_rind_ = cell(Icat,1);
Z_n_rind_ = cell(Icat,1);
for nb=0:Icat-1;
if (Icat==1); tmpchar = sprintf('%s_mr_A_full.b16',d_inpre); else; tmpchar = sprintf('%s_mr_A_%0.2d.b16',d_inpre,1+nb); end;
[bitj,nrows,ncols] = tutorial_binary_getsize(tmpchar); 
mr_A_ori_{1+nb} = (tutorial_binary_uncompress(tmpchar,1:nrows,1:ncols)>0);
A_n_rind_{1+nb} = find(mr_A_ori_{1+nb});
if (Icat==1); tmpchar = sprintf('%s_mr_Z_full.b16',d_inpre); else; tmpchar = sprintf('%s_mr_Z_%0.2d.b16',d_inpre,1+nb); end;
[bitj,nrows,ncols] = tutorial_binary_getsize(tmpchar); 
mr_Z_ori_{1+nb} = (tutorial_binary_uncompress(tmpchar,1:nrows,1:ncols)>0);
Z_n_rind_{1+nb} = find(mr_Z_ori_{1+nb});
end;%for nb=0:Icat-1;

% reading original col-masks for A ;
tmpchar = sprintf('%s_mc_A.b16',d_inpre);[bitj,nrows,ncols] = tutorial_binary_getsize(tmpchar); 
mc_A = (tutorial_binary_uncompress(tmpchar,1:nrows,1:ncols)>0);
A_n_cind = find(mc_A);

M_n_rows_ = zeros(Icat,1);
A_n_rows_ = zeros(Icat,1);
Z_n_rows_ = zeros(Icat,1);
for nb=0:Icat-1;
M_n_rows_(1+nb) = length(mr_A_ori_{1+nb});
A_n_rows_(1+nb) = sum(mr_A_ori_{1+nb});
Z_n_rows_(1+nb) = sum(mr_Z_ori_{1+nb});
end;%for nb=0:Icat-1;
M_n_cols = length(mc_A);
disp(sprintf(' %% Icat %d; total vs cases vs controls',Icat));
disp(num2str([M_n_rows_ , A_n_rows_ , Z_n_rows_]));

flag_T = 0;

% compressing T_n_ in case where length(mds_used_)~=2 or mds_repl<1;
if (mds_repl<1 | length(mds_used_)~=2);
flag_T = 0;
T_n_ = cell(Icat,1);
T_n_crop_ = cell(Icat,1);
T_t_crop_ = cell(Icat,1);
T_n_crop_cols = 1+length(mds_used_);
for nb=0:Icat-1;
if (Icat==1); tmpchar = sprintf('%s_T_full_n.b16',d_inpre); else; tmpchar = sprintf('%s_T_%0.2d_n.b16',d_inpre,1+nb); end;
[bitj,nrows,ncols] = tutorial_binary_getsize(tmpchar); disp(sprintf(' %% reading %s = (%d,%d)',tmpchar,nrows,ncols));
T_n_{1+nb} = tutorial_binary_uncompress(tmpchar,1:nrows,1:ncols); 
T_n_crop_{1+nb} = T_n_{1+nb}(:,[1,(1+(mds_used_))]); 
T_t_crop_{1+nb} = transpose(T_n_crop_{1+nb});
if (Icat==1); tmpchar = sprintf('%s_T_crop_full_n.b16',d_oupre); else; tmpchar = sprintf('%s_T_crop_%0.2d_n.b16',d_oupre,1+nb); end;
disp(sprintf(' %% writing %s = (%d,%d)',tmpchar,size(T_n_crop_{1+nb})));
tutorial_binary_compress(bitj,T_n_crop_{1+nb}>0,tmpchar);
if (Icat==1); tmpchar = sprintf('%s_T_crop_full_t.b16',d_oupre); else; tmpchar = sprintf('%s_T_crop_%0.2d_t.b16',d_oupre,1+nb); end;
disp(sprintf(' %% writing %s = (%d,%d)',tmpchar,size(T_t_crop_{1+nb})));
tutorial_binary_compress(bitj,T_t_crop_{1+nb}>0,tmpchar);
end;%for nb=0:Icat-1;
mc_T_crop = ones(T_n_crop_cols,1);
tmpchar = sprintf('%s_mc_T_crop.b16',d_oupre); 
disp(sprintf(' %% writing %s = (%d,%d)',tmpchar,size(mc_T_crop))); tutorial_binary_compress(bitj,mc_T_crop(:)>0,tmpchar);
disp(sprintf('mc_T_crop:'));disp(num2str(transpose(mc_T_crop)));
T_n_crop_cind = 1:T_n_crop_cols;
end;%if (mds_repl<1 | length(mds_used_)~=2);

% copying T_n_ from T_m2rx_n in case where length(mds_used_)==2 and mds_repl>0;
if (mds_repl>=1 & length(mds_used_)==2);
flag_T = 1;
mds_str = sprintf('m%dr%d',length(mds_used_),mds_repl);
mds_kappa_squared = textread(sprintf('%s_T_%s_kappa.txt',d_inpre,mds_str));
T_n_ = cell(Icat,1);
T_t_ = cell(Icat,1);
T_n_cols = 1+length(mds_used_)*mds_repl;
for nb=0:Icat-1;
if (Icat==1); tmpchar = sprintf('%s_T_%s_full_n.b16',d_inpre,mds_str); else; tmpchar = sprintf('%s_T_%s_%0.2d_n.b16',d_inpre,mds_str,1+nb); end;
[bitj,nrows,ncols] = tutorial_binary_getsize(tmpchar); disp(sprintf(' %% reading %s = (%d,%d)',tmpchar,nrows,ncols));
T_n_{1+nb} = tutorial_binary_uncompress(tmpchar,1:nrows,1:ncols); 
T_t_{1+nb} = transpose(T_n_{1+nb});
%if (Icat==1); tmpchar = sprintf('%s_T_%s_full_n.b16',d_oupre,mds_str); else; tmpchar = sprintf('%s_T_%s_%0.2d_n.b16',d_oupre,mds_str,1+nb); end;
%disp(sprintf(' %% writing %s = (%d,%d)',tmpchar,size(T_n_{1+nb})));
%tutorial_binary_compress(bitj,T_n_{1+nb}>0,tmpchar);
%if (Icat==1); tmpchar = sprintf('%s_T_%s_full_t.b16',d_oupre,mds_str); else; tmpchar = sprintf('%s_T_%s_%0.2d_t.b16',d_oupre,mds_str,1+nb); end;
%disp(sprintf(' %% writing %s = (%d,%d)',tmpchar,size(T_t_{1+nb})));
%tutorial_binary_compress(bitj,T_t_{1+nb}>0,tmpchar);
end;%for nb=0:Icat-1;
mc_T = ones(T_n_cols,1);
tmpchar = sprintf('%s_mc_T_%s.b16',d_oupre,mds_str); 
disp(sprintf(' %% writing %s = (%d,%d)',tmpchar,size(mc_T))); tutorial_binary_compress(bitj,mc_T(:)>0,tmpchar);
disp(sprintf('mc_T:'));disp(num2str(transpose(mc_T)));
T_n_cind = 1:T_n_cols;
end;%if (mds_repl>= | length(mds_used_)==2);

% checking consistency ;
if (flag_T==0); flag_error = xxxcluster_uADZSZDA_check_ver1(M_n_rows_,M_n_cols,A_n_rind_,A_n_cind,Z_n_rind_,T_n_crop_cols,T_n_crop_,T_n_crop_cind); end;
if (flag_T==1); flag_error = xxxcluster_uADZSZDA_check_ver1(M_n_rows_,M_n_cols,A_n_rind_,A_n_cind,Z_n_rind_,T_n_cols,T_n_,T_n_cind); end;
if (flag_error); disp(sprintf(' %% Warning! incorrect dimensions in xxxcluster_PGC_uADZSZDA_ver12')); return; end;

% performing covariate-respecting shuffle ;
if (flag_T==0); [mr_A_prm_,mr_Z_prm_] = xxxcluster_uADZSZDA_shuffle_ver2(nshuffle,M_n_rows_,M_n_cols,A_n_rind_,A_n_cind,Z_n_rind_,T_n_crop_cols,T_n_crop_,T_n_crop_cind); end;
if (flag_T==1); [mr_A_prm_,mr_Z_prm_] = xxxcluster_uADZSZDA_shuffle_ver2(nshuffle,M_n_rows_,M_n_cols,A_n_rind_,A_n_cind,Z_n_rind_,T_n_cols,T_n_,T_n_cind); end;

% writing row-masks ;
A_n_rows_used=0;
Z_n_rows_used=0;
mr_A_use_ = mr_A_ori_; mr_Z_use_ = mr_Z_ori_;
if (nshuffle>0); mr_A_use_ = mr_A_prm_; mr_Z_use_ = mr_Z_prm_; end;%if (nshuffle>0); 
for nb=0:Icat-1;
if (row_factor<1); mr_A_use_{1+nb} = mr_A_use_{1+nb}.*(rand(size(mr_A_use_{1+nb}))<row_factor); mr_Z_use_{1+nb} = mr_Z_use_{1+nb}.*(rand(size(mr_Z_use_{1+nb}))<row_factor); end;%if (row_factor<1);
disp(sprintf('nb %.2d : mr_A_ori_ npats %.5d ncase %.4d, mr_A_use_ npats %.5d ncase %.4d, overlap %.4d',nb,length(mr_A_ori_{1+nb}),sum(mr_A_ori_{1+nb}),length(mr_A_use_{1+nb}),sum(mr_A_use_{1+nb}),sum(mr_A_ori_{1+nb}.*mr_A_use_{1+nb})));
disp(sprintf('nb %.2d : mr_Z_ori_ npats %.5d nctrl %.4d, mr_Z_use_ npats %.5d nctrl %.4d, overlap %.4d',nb,length(mr_Z_ori_{1+nb}),sum(mr_Z_ori_{1+nb}),length(mr_Z_use_{1+nb}),sum(mr_Z_use_{1+nb}),sum(mr_Z_ori_{1+nb}.*mr_Z_use_{1+nb})));
if (Icat==1); tmpchar = sprintf('%s_mr_A_full.b16',d_oupre); else; tmpchar = sprintf('%s_mr_A_%0.2d.b16',d_oupre,1+nb); end;
tutorial_binary_compress(bitj,mr_A_use_{1+nb}(:)>0,tmpchar);
if (Icat==1); tmpchar = sprintf('%s_mr_Z_full.b16',d_oupre); else; tmpchar = sprintf('%s_mr_Z_%0.2d.b16',d_oupre,1+nb); end;
tutorial_binary_compress(bitj,mr_Z_use_{1+nb}(:)>0,tmpchar);
A_n_rows_used = A_n_rows_used + sum(mr_A_use_{1+nb}(:)>0);
Z_n_rows_used = Z_n_rows_used + sum(mr_Z_use_{1+nb}(:)>0);
end;%for nb=0:Icat-1;

% writing col-mask ;
mc_A_use = ones(M_n_cols,1);
fname_bim = sprintf('%s/%s_bim.ext',dir__in,string_prefix);
mc_A_bim = xxxcluster_PGC_getbim_ver3(fname_bim,maf_lo_threshold,maf_hi_threshold);
mc_A_use = mc_A_use .* mc_A_bim;
disp(sprintf(' %% maf_lo_threshold %0.2f maf_hi_threshold %0.2f, retaining %d mc values, but setting %d mc values to 0',maf_lo_threshold,maf_hi_threshold,sum(mc_A_use),sum(~mc_A_use)));
if (col_factor<1);
mc_A_use = mc_A_use.*(rand(size(mc_A_use))<col_factor); 
disp(sprintf(' %% col_factor %0.2f, retaining %d mc values, but setting %d mc values to 0',col_factor,sum(mc_A_use),sum(~mc_A_use)));
end;%if (col_factor<1);
fname_mc_A = sprintf('%s_mc_A.b16',d_oupre);
disp(sprintf(' %% creating %s',fname_mc_A));
tmpchar_out = fname_mc_A;tutorial_binary_compress(bitj,mc_A_use(:)>0,tmpchar_out); 
disp(sprintf('mc_A nsnps %.9d/%.9d',sum(mc_A_use(:)>0),length(mc_A_use)));
A_n_cols_used = sum(mc_A_use(:)>0);

disp(sprintf(' %% A_n_rows_used %d Z_n_rows_used %d A_n_cols_used %d',A_n_rows_used,Z_n_rows_used,A_n_cols_used));

fname__in = sprintf('%s.in',d_oupre);
fp = fopen(fname__in,'w');
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
fprintf(fp,'GLOBAL_verbose= %d;\n',flag_verbose);
fprintf(fp,'GLOBAL_thread_count= 15;\n');
fprintf(fp,'GLOBAL_omp_type= 1;\n');
fprintf(fp,'GLOBAL_TEST_TYPE= %scluster_driver;\n',flag_dex_vs_lak);
if (strcmp(flag_dex_vs_lak,'lak'));
fprintf(fp,'GLOBAL_QR_strategy= %s;\n',QR_strategy);
fprintf(fp,'GLOBAL_QC_strategy= %s;\n',QC_strategy);
end;%if (strcmp(flag_dex_vs_lak,'lak'));
fprintf(fp,'GLOBAL_NBINS= %d;\n',Icat);
fprintf(fp,'GLOBAL_B_MLT= %d;\n',B_MLT);
fprintf(fp,'GLOBAL_gamma= %0.4f;\n',gamma);
fprintf(fp,'GLOBAL_Ireq= %d;\n',Ireq);
if (flag_T==1); fprintf(fp,'GLOBAL_kappa_squared= %0.16f;\n',mds_kappa_squared); end;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
if (nshuffle==0); A_name_string = '_A_'; end;%if (nshuffle==0);
%if (nshuffle>0); A_name_string = '_A_shuffle_'; end;%if (nshuffle>0);
if (nshuffle>0); A_name_string = '_A_'; end;%if (nshuffle>0);
xxxcluster_PGC_uADZSZDA_excerpt_0(fp,'GLOBAL_A_n_name_= ',Icat,d_inpre,A_name_string,'_n.b16');
xxxcluster_PGC_uADZSZDA_excerpt_0(fp,'GLOBAL_A_t_name_= ',Icat,d_inpre,A_name_string,'_t.b16');
xxxcluster_PGC_uADZSZDA_excerpt_1(fp,'GLOBAL_A_n_rows_= ',Icat,M_n_rows_);
fprintf(fp,'GLOBAL_A_n_cols= %d;\n',M_n_cols);
if (flag_reverse==1); xxxcluster_PGC_uADZSZDA_excerpt_0(fp,'GLOBAL_A_n_rind_= ',Icat,d_oupre,'_mr_Z_','.b16'); end;
if (flag_reverse==0); xxxcluster_PGC_uADZSZDA_excerpt_0(fp,'GLOBAL_A_n_rind_= ',Icat,d_oupre,'_mr_A_','.b16'); end;
fprintf(fp,'GLOBAL_A_n_cind= %s_mc_A.b16;\n',d_oupre);
xxxcluster_PGC_uADZSZDA_excerpt_0(fp,'GLOBAL_Z_n_name_= ',Icat,d_inpre,A_name_string,'_n.b16');
xxxcluster_PGC_uADZSZDA_excerpt_0(fp,'GLOBAL_Z_t_name_= ',Icat,d_inpre,A_name_string,'_t.b16');
xxxcluster_PGC_uADZSZDA_excerpt_1(fp,'GLOBAL_Z_n_rows_= ',Icat,M_n_rows_);
if (flag_reverse==1); xxxcluster_PGC_uADZSZDA_excerpt_0(fp,'GLOBAL_Z_n_rind_= ',Icat,d_oupre,'_mr_A_','.b16'); end;
if (flag_reverse==0); xxxcluster_PGC_uADZSZDA_excerpt_0(fp,'GLOBAL_Z_n_rind_= ',Icat,d_oupre,'_mr_Z_','.b16'); end;
fprintf(fp,'GLOBAL_Y_n_cols= %d;\n',Y_n_cols);
if (flag_T==0);
fprintf(fp,'GLOBAL_T_n_cols= %d;\n',T_n_crop_cols); 
xxxcluster_PGC_uADZSZDA_excerpt_0(fp,'GLOBAL_T_n_name_= ',Icat,d_oupre,'_T_crop_','_n.b16');
xxxcluster_PGC_uADZSZDA_excerpt_0(fp,'GLOBAL_T_t_name_= ',Icat,d_oupre,'_T_crop_','_t.b16');
fprintf(fp,'GLOBAL_T_n_cind= %s_mc_T_crop.b16;\n',d_oupre);
xxxcluster_PGC_uADZSZDA_excerpt_0(fp,'GLOBAL_S_n_name_= ',Icat,d_oupre,'_T_crop_','_n.b16');
xxxcluster_PGC_uADZSZDA_excerpt_0(fp,'GLOBAL_S_t_name_= ',Icat,d_oupre,'_T_crop_','_t.b16');
end;%if (flag_T==0);
if (flag_T==1);
fprintf(fp,'GLOBAL_T_n_cols= %d;\n',T_n_cols); 
xxxcluster_PGC_uADZSZDA_excerpt_0(fp,'GLOBAL_T_n_name_= ',Icat,d_inpre,sprintf('_T_%s_',mds_str),'_n.b16');
xxxcluster_PGC_uADZSZDA_excerpt_0(fp,'GLOBAL_T_t_name_= ',Icat,d_inpre,sprintf('_T_%s_',mds_str),'_t.b16');
fprintf(fp,'GLOBAL_T_n_cind= %s_mc_T_%s.b16;\n',d_oupre,mds_str);
xxxcluster_PGC_uADZSZDA_excerpt_0(fp,'GLOBAL_S_n_name_= ',Icat,d_inpre,sprintf('_T_%s_',mds_str),'_n.b16');
xxxcluster_PGC_uADZSZDA_excerpt_0(fp,'GLOBAL_S_t_name_= ',Icat,d_inpre,sprintf('_T_%s_',mds_str),'_t.b16');
end;%if (flag_T==1);
fprintf(fp,'GLOBAL_DIR_NAME= %s;\n',dir_out);
if (n_scramble>0);
fprintf(fp,'GLOBAL_scramble_num= %d;\n',n_scramble);
fprintf(fp,'GLOBAL_scramble_out_xdrop_= ');
for nscramble=1:n_scramble;
fprintf(fp,'%s',scramble_out_xdrop_{nscramble});
if (nscramble<n_scramble);fprintf(fp,'%s',','); end;
if (nscramble==n_scramble);fprintf(fp,'%s',';'); end;
end;%for nscramble=1:n_scramble;
fprintf(fp,'\n');
fprintf(fp,'GLOBAL_scramble_rseed_= ');
for nscramble=1:n_scramble;
fprintf(fp,'%d',scramble_rseed_(nscramble));
if (nscramble<n_scramble);fprintf(fp,'%s',','); end;
if (nscramble==n_scramble);fprintf(fp,'%s',';'); end;
end;%for nscramble=1:n_scramble;
fprintf(fp,'\n');
end;%if (n_scramble>0);
fprintf(fp,'END= 0;\n');
fprintf(fp,'%% generated by xxxcluster_PGC_uADZSZDA_ver12.m on %s;\n',date);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
fclose(fp);
type(fname__in);

flag_call=1*(pbs_walltime<=0 & slurm_walltime<=0);%flag_call = input(' call? 1=yes (default), 0=no:'); if isempty(flag_call); flag_call=1; end;
if flag_call;
disp(sprintf('%s/lakcluster_ver18 --GLOBAL_memory_gb %d < %s',dir_code,GLOBAL_memory_gb,fname__in));
system(sprintf('%s/lakcluster_ver18 --GLOBAL_memory_gb %d < %s',dir_code,GLOBAL_memory_gb,fname__in));
disp(sprintf(' %% cleaning up: '));
string_command = sprintf('scp -p %s/out_trace.txt %s/out_trace_s%0.4d.txt;',dir_out,dir_out_trace,nshuffle);
disp(sprintf('%s',string_command));
system(string_command);
if (nshuffle>0);
string_command = sprintf('rm -rf %s;',dir_out);
disp(sprintf('%s',string_command));
system(string_command);
end;%if (nshuffle>0);
end;%if flag_call;

flag_pbs=1*(pbs_walltime>0);
if flag_pbs;
fname_pbs = sprintf('%s.pbs',d_oupre);
pbs_fp = fopen(fname_pbs,'w');
fprintf(pbs_fp,'#PBS -S /bin/bash\n');
fprintf(pbs_fp,'#PBS -lnodes=1:ppn=15\n');
%fprintf(pbs_fp,'#PBS -lnodes=1:cpu2+cpu3\n');
pbs_walltime_use = pbs_walltime;
if (flag_timing); pbs_walltime_use = 1.5*elrt_s0000/3600; disp(sprintf(' %% pbs_walltime changed from %0.2f to %0.2f',pbs_walltime,pbs_walltime_use)); end;
pbs_walltime_h = floor(pbs_walltime_use); pbs_walltime_m = min(59,ceil(60*(pbs_walltime_use - pbs_walltime_h))); 
sprintf(' %% pbs_walltime=%d:%.2d:59',pbs_walltime_h,pbs_walltime_m);
fprintf(pbs_fp,'#PBS -lwalltime=%d:%.2d:59\n',pbs_walltime_h,pbs_walltime_m);
fprintf(pbs_fp,'#PBS -e %s_pbs_error.log\n',d_oupre);
fprintf(pbs_fp,'#PBS -o %s_pbs_output.log\n',d_oupre);
fprintf(pbs_fp,'%s/lakcluster_ver18 --GLOBAL_memory_gb %d < %s\n',dir_code,GLOBAL_memory_gb,fname__in);
%%%%%%%%%%%%%%%%;
string_command = sprintf('scp -p %s/out_trace.txt %s/out_trace_s%0.4d.txt;',dir_out,dir_out_trace,nshuffle);
fprintf(pbs_fp,'%s\n',string_command);
if (nshuffle>0);
string_command = sprintf('rm -rf %s;',dir_out);
fprintf(pbs_fp,'%s\n',string_command);
end;%if (nshuffle>0);
%%%%%%%%%%%%%%%%;
fclose(pbs_fp);
type(fname_pbs);
string_command = sprintf('qsub %s;',fname_pbs);
fp = fopen(sprintf('%s/log.txt',dir_trunk),'a'); fprintf(fp,'%s # %s\n',string_command,datestr(now)); fclose(fp);
disp(sprintf('%s',string_command));
%system(sprintf('%s\n',string_command));
end;%if flag_pbs;

flag_slurm = 1*(slurm_walltime>0);
if flag_slurm;
slurm_fname = sprintf('%s.slurm',d_oupre);
slurm_fp = fopen(slurm_fname,'w');
fprintf(slurm_fp,'#!/bin/sh \n');
fprintf(slurm_fp,'#\n');
fprintf(slurm_fp,'#SBATCH --verbose\n');
fprintf(slurm_fp,'#SBATCH --job-name=%s\n',fname__in);
fprintf(slurm_fp,'#SBATCH --output=%s_output.log\n',d_oupre);
fprintf(slurm_fp,'#SBATCH --error=%s_error.log\n',d_oupre);
slurm_walltime_use = slurm_walltime;
if (flag_timing); slurm_walltime_use = 1.5*elrt_s0000/3600; disp(sprintf(' %% slurm_walltime changed from %0.2f to %0.2f',slurm_walltime,slurm_walltime_use)); end;
slurm_walltime_h = floor(slurm_walltime_use); slurm_walltime_m = min(59,ceil(60*(slurm_walltime_use - slurm_walltime_h)));
sprintf(' %% slurm_walltime=%d:%.2d:59',slurm_walltime_h,slurm_walltime_m);
fprintf(slurm_fp,'#SBATCH --time=%d:%.2d:59\n',slurm_walltime_h,slurm_walltime_m);
fprintf(slurm_fp,'#SBATCH --nodes=%d --ntasks-per-node=%d\n',slurm_nnodes,slurm_tpn);
fprintf(slurm_fp,'#SBATCH --mem=%dGB\n',slurm_memdecl);
fprintf(slurm_fp,'\n');
fprintf(slurm_fp,'/bin/hostname\n');
fprintf(slurm_fp,'/bin/pwd\n');
fprintf(slurm_fp,'module load matlab/2017b\n');
fprintf(slurm_fp,'%s/lakcluster_ver18 --GLOBAL_memory_gb %d < %s\n',dir_code,GLOBAL_memory_gb,fname__in);
%%%%%%%%%%%%%%%%;
string_command = sprintf('scp -p %s/out_trace.txt %s/out_trace_s%0.4d.txt;',dir_out,dir_out_trace,nshuffle);
fprintf(slurm_fp,'%s\n',string_command);
if (nshuffle>0);
string_command = sprintf('rm -rf %s;',dir_out);
fprintf(slurm_fp,'%s\n',string_command);
end;%if (nshuffle>0);
%%%%%%%%%%%%%%%%;
fclose(slurm_fp);
type(slurm_fname);
string_command = sprintf('sbatch %s;',slurm_fname);
fp = fopen(sprintf('%s/log.txt',dir_trunk),'a'); fprintf(fp,'%s # %s\n',string_command,datestr(now)); fclose(fp);
disp(sprintf('%s',string_command));
%system(sprintf('%s\n',string_command));
end;%if flag_slurm;

end;%if ~flag_found;

