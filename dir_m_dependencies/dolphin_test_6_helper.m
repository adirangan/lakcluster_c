[a_est_,A_est__,BB_est__,CC_est__,L_est_,niteration_est,a_est__,A_est___,BB_est___,CC_est___] = dolphin_estimate_aABC_2(aid_,age_,dat__,parameter);
if (flag_verbose>1); disp(sprintf(' %% L_est_: ')); disp(L_est_); end;
%{
[~,tmp_index_min] = min(L_est_(1:1+niteration_est)); tmp_index_min = tmp_index_min - 1;
a_est_ = a_est__{1+tmp_index_min};
A_est__ = A_est___{1+tmp_index_min};
BB_est__ = BB_est___{1+tmp_index_min};
CC_est__ = CC_est___{1+tmp_index_min};
L_est = L_est_(1+tmp_index_min);
%}
L_est = min(L_est_);
corr_a = corr(a_est_(:),amplitude*a_tru_(:));
corr_A = corr(A_est__(:),amplitude*A_tru__(:));
corr_BB = corr(BB_est__(:),(amplitude/snr)^2*BB_tru__(:));
corr_CC = corr(CC_est__(:),(amplitude/snr)^2*CC_tru__(:));

%%%%%%%%;
% Now repeat for shuffled permutations. ;
% For these shuffled permutation we retain the same drift and normalized data. ;
%%%%%%%%;
n_shuffle = parameter.n_shuffle;
a_null__ = cell(n_shuffle,1);
A_null___ = cell(n_shuffle,1);
BB_null___ = cell(n_shuffle,1);
CC_null___ = cell(n_shuffle,1);
for nshuffle=0:n_shuffle-1;
dat_prm__ = dolphin_permute_0(aid_,age_,dat__,nshuffle);
[a_prm_,A_prm__,BB_prm__,CC_prm__,L_prm_,niteration_prm,a_prm__,A_prm___,BB_prm___,CC_prm___] = dolphin_estimate_aABC_2(aid_,age_,dat_prm__,parameter);
%[~,tmp_index_min] = min(L_prm_(1:1+niteration_prm)); tmp_index_min = tmp_index_min-1;
%a_null__{1+nshuffle} = a_prm__{1+tmp_index_min};
%A_null___{1+nshuffle} = A_prm___{1+tmp_index_min};
%BB_null___{1+nshuffle} = BB_prm___{1+tmp_index_min};
%CC_null___{1+nshuffle} = CC_prm___{1+tmp_index_min};
%L_null_{1+nshuffle} = L_prm_(1+tmp_index_min);
a_null__{1+nshuffle} = a_prm_;
A_null___{1+nshuffle} = A_prm__;
BB_null___{1+nshuffle} = BB_prm__;
CC_null___{1+nshuffle} = CC_prm__;
L_null_{1+nshuffle} = min(L_prm_);
end;%for nshuffle=0:n_shuffle-1;
%%%%%%%%;

%%%%%%%%;
% collect null distribution. ;
%%%%%%%%;
a_null_avg_ = zeros(n_var,1);
A_null_avg__ = zeros(n_var,n_var);
BB_null_avg__ = zeros(n_var,n_var);
CC_null_avg__ = zeros(n_var,n_var);
L_null_avg = 0;
a_null_std_ = zeros(n_var,1);
A_null_std__ = zeros(n_var,n_var);
BB_null_std__ = zeros(n_var,n_var);
CC_null_std__ = zeros(n_var,n_var);
L_null_std = 0;
%%%%%%%%;
for nshuffle=0:n_shuffle-1;
a_null_avg_ = a_null_avg_ + a_null__{1+nshuffle};
A_null_avg__ = A_null_avg__ + A_null___{1+nshuffle};
BB_null_avg__ = BB_null_avg__ + BB_null___{1+nshuffle};
CC_null_avg__ = CC_null_avg__ + CC_null___{1+nshuffle};
L_null_avg = L_null_avg + L_null_{1+nshuffle};
a_null_std_ = a_null_std_ + a_null__{1+nshuffle}.^2;
A_null_std__ = A_null_std__ + A_null___{1+nshuffle}.^2;
BB_null_std__ = BB_null_std__ + BB_null___{1+nshuffle}.^2;
CC_null_std__ = CC_null_std__ + CC_null___{1+nshuffle}.^2;
L_null_std = L_null_std + L_null_{1+nshuffle}.^2;
end;%for nshuffle=0:n_shuffle-1;
%%%%%%%%;
a_null_avg_ = a_null_avg_ / n_shuffle;
A_null_avg__ = A_null_avg__ / n_shuffle;
BB_null_avg__ = BB_null_avg__ / n_shuffle;
CC_null_avg__ = CC_null_avg__ / n_shuffle;
L_null_avg = L_null_avg / n_shuffle;
a_null_std_ = sqrt(a_null_std_/n_shuffle - a_null_avg_.^2);
A_null_std__ = sqrt(A_null_std__/n_shuffle - A_null_avg__.^2);
BB_null_std__ = sqrt(BB_null_std__/n_shuffle - BB_null_avg__.^2);
CC_null_std__ = sqrt(CC_null_std__/n_shuffle - CC_null_avg__.^2);
L_null_std = sqrt(L_null_std/n_shuffle - L_null_avg.^2);
%%%%%%%%;
a_Z_ = real((a_est_ - a_null_avg_)./a_null_std_);
A_Z__ = real((A_est__ - A_null_avg__)./A_null_std__);
BB_Z__ = real((BB_est__ - BB_null_avg__)./BB_null_std__);
CC_Z__ = real((CC_est__ - CC_null_avg__)./CC_null_std__);
L_Z = real((L_est - L_null_avg)./L_null_std);
a_nlp_ = -z_to_p_twosided_0(a_Z_);
A_nlp__ = -z_to_p_twosided_0(A_Z__);
BB_nlp__ = -z_to_p_twosided_0(BB_Z__);
CC_nlp__ = -z_to_p_twosided_0(CC_Z__);
L_nlp = -z_to_p_twosided_0(L_Z);

tru_ = struct('type','tru');
tru_.a_tru_ = a_tru_;
tru_.A_tru__ = A_tru__;
tru_.BB_tru__ = BB_tru__;
tru_.CC_tru__ = CC_tru__;

est_ = struct('type','est');
est_.parameter = parameter;
est_.niteration_est = niteration_est;
est_.a_est_ = a_est_;
est_.b_est_ = b_est_;
est_.A_est__ = A_est__;
est_.BB_est__ = BB_est__;
est_.CC_est__ = CC_est__;
est_.L_est = L_est;
est_.corr_a = corr_a;
est_.corr_A = corr_A;
est_.corr_BB = corr_BB;
est_.corr_CC_= corr_CC;

null_ = struct('type','null');
null_.n_shuffle = n_shuffle;
null_.a_null__ = a_null__;
null_.A_null___ = A_null___;
null_.BB_null___ = BB_null___;
null_.CC_null___ = CC_null___;
null_.L_null_ = L_null_;
null_.a_null_avg_ = a_null_avg_;
null_.A_null_avg__ = A_null_avg__;
null_.BB_null_avg__ = BB_null_avg__;
null_.CC_null_avg__ = CC_null_avg__;
null_.L_null_avg = L_null_avg;
null_.a_null_std_ = a_null_std_;
null_.A_null_std__ = A_null_std__;
null_.BB_null_std__ = BB_null_std__;
null_.CC_null_std__ = CC_null_std__;
null_.L_null_std = L_null_std;
null_.a_Z_ = a_Z_;
null_.A_Z__ = A_Z__;
null_.BB_Z__ = BB_Z__;
null_.CC_Z__ = CC_Z__;
null_.L_Z = L_Z;
null_.a_nlp_ = a_nlp_;
null_.A_nlp__ = A_nlp__;
null_.BB_nlp__ = BB_nlp__;
null_.CC_nlp__ = CC_nlp__;
null_.L_nlp = L_nlp;
