function lisa = lisa_struct_sosutu_ver0(lisa,annot);

ru_ = annot.ru_;
cu_ = lisa.cdrop_a_ ; %<-- temporary variable storing the column indices in the order ejected. ;

%%%%%%%%;
% Now examining unique snp-rsids. ;
% Note that, while most snps in cdrop_a are listed three times, ;
% a few are listed only 2 times. ;
% This is because we exclude allelic-combinations with a frequency ;
% lower than maf_cutoff^2 (in this case 0.25^2 = 0.0625). ;
%%%%%%%%;
flag_test=1;
if flag_test;
tmp_rs_drop_a_ = lisa.bim__id_(cu_);
[~,tmp0_,tmp1_] = unique(tmp_rs_drop_a_);
tmp2_ = sort(tmp1_);
tmp3_ = diff(tmp2_);
tmp4_ = diff(find(diff(tmp3_)>0)); disp(sprintf(' %% %d snps listed 3 times, %d snps listed only twice, %d snps listed only once.',length(find(tmp4_==3)),length(find(tmp4_==2)),length(find(tmp4_==1))));
if flag_test>1;
tmp_example = 1+min(find(tmp4_==2));
disp(sprintf(' %% tmp_rs_drop_a_(find(tmp1_==tmp_example)):')); disp(tmp_rs_drop_a_(find(tmp1_==tmp_example)));
disp(sprintf(' %% lisa.bim_alt_(cu_(find(tmp1_==tmp_example))): allele type '));
disp(lisa.bim_alt_(cu_(find(tmp1_==tmp_example))));
disp(sprintf(' %% lisa.bim_frq_(cu_(find(tmp1_==tmp_example))): allele frequency '));
disp(lisa.bim_frq_(cu_(find(tmp1_==tmp_example))));
disp(sprintf(' %% lisa.bim_maf_(cu_(find(tmp1_==tmp_example))): snp frequency '));
disp(lisa.bim_maf_(cu_(find(tmp1_==tmp_example))));
disp(sprintf(' %% lisa.bim_maf_(cu_(find(tmp1_==tmp_example)))^2: min(snp_frequency^2,(1-snp_frequency)^2) '));
disp(min(lisa.bim_maf_(cu_(find(tmp1_==tmp_example))).^2,(1-lisa.bim_maf_(cu_(find(tmp1_==tmp_example)))).^2));
end;%if flag_test>1;
end;%flag_test=1;
%%%%%%%%;

%%%%%%%%;
% ru_ contains the (unique) names in annot. ;
% so_ contains the names of the snps listed in cu_. ;
% su_ contains the unique snps listed in so_. ;
% tu_ is the minimal set of snp-names which is in the intersection of both ru_ and so_. ;
% so_by_su_xref_ is a sparse matrix that can be used to cross-reference the entries of cu_ with the unique snp-names stored in su_. ;
% i.e., : given a list of unique indices su_(nsu_), ;
% we have nso_ = find(sum(so_by_su_xref_(:,nsu_),2)>0) returns the corresponding indices from within cu_. ;
% That is to say, unique(so_(nso_)) should match unique(su_(nsu_)). ;
%%%%%%%%;
so_ = lisa.bim__id_(cu_); %<-- snp__id for each snp in bim_. ;
[su_,so_to_su_,su_to_so_] = unique(so_);
so_by_su_xref_ = sparse(1:length(so_),su_to_so_,1,length(so_),length(su_));
flag_test=0;
if flag_test;
nsu_ = randperm(length(su_)); nsu_ = nsu_(1:floor(end/3));
nso_ = find(sum(so_by_su_xref_(:,nsu_),2)>0);
assert(length(intersect(unique(so_(nso_)),unique(su_(nsu_))))==length(nsu_));
end;%if flag_test;
[tu_,su_to_tu_,ru_to_tu_] = intersect(su_,ru_,'stable');
tu_by_ru_xref_ = sparse(1:length(ru_to_tu_),ru_to_tu_,1,length(ru_to_tu_),length(ru_)); %<-- this can be used to cross-reference indices referencing snps in ru_ with those referencing entries in ru_to_tu_. ;
flag_test=1;
if flag_test;
n_found = 0;
for nru=1:length(ru_);
ntu = find(tu_by_ru_xref_(:,nru));
if (~isempty(ntu));
assert(ru_to_tu_(ntu)==nru);
n_found = n_found+1;
end;%if (~isempty(ntu));
end;%for nru=1:length(ru_);
disp(sprintf(' %% testing tu_by_ru_xref_; n_found %d/%d',n_found,length(tu_)));
end;%if flag_test;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;

lisa.so_ = so_;
lisa.su_ = su_;
lisa.so_to_su_ = so_to_su_;
lisa.su_to_so_ = su_to_so_;
lisa.so_by_su_xref_ = so_by_su_xref_;
lisa.tu_ = tu_;
lisa.su_to_tu_ = su_to_tu_;
lisa.ru_to_tu_ = ru_to_tu_;
lisa.tu_by_ru_xref_ = tu_by_ru_xref_;

