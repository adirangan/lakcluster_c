% testing a loader for table data ;
clear;
setup;
dir_trunk = sprintf('/data/rangan/dir_bcc/dir_jamison');
dir_data = sprintf('%s/data_summary_20190730',dir_trunk);
flag_load=0;
if flag_load;
str_table_name = sprintf('%s/20161026_covariate_table.format.txt',dir_data);
disp(sprintf(' %% reading %s',str_table_name));
C_ = readtable(str_table_name);
disp(sprintf(' %% saving %s',str_table_name));
save(sprintf('%s/20161026_covariate_table.format.mat',dir_data),'C_');
str_table_name = sprintf('%s/EXON.Gx_50421.Cx_50.brain_table_merge_output.CPM.NotCtrl.NotEmpty.txt',dir_data);
disp(sprintf(' %% reading %s',str_table_name));
E_ = readtable(str_table_name);
disp(sprintf(' %% writing %s',str_table_name));
save(sprintf('%s/EXON.Gx_50421.Cx_50.brain_table_merge_output.CPM.NotCtrl.NotEmpty.mat',dir_data),'E_');
str_table_name = sprintf('%s/INTRON_INTERGENIC.Gx_25998.Cx_50.brain_table_merge_output.CPM.NotCtrl.NotEmpty.txt',dir_data);
disp(sprintf(' %% reading %s',str_table_name));
I_ = readtable(str_table_name);
disp(sprintf(' %% writing %s',str_table_name));
save(sprintf('%s/INTRON_INTERGENIC.Gx_25998.Cx_50.brain_table_merge_output.CPM.NotCtrl.NotEmpty.mat',dir_data),'I_');
end;%if flag_load;
load(sprintf('%s/EXON.Gx_50421.Cx_50.brain_table_merge_output.CPM.NotCtrl.NotEmpty.mat',dir_data),'E_');
load(sprintf('%s/INTRON_INTERGENIC.Gx_25998.Cx_50.brain_table_merge_output.CPM.NotCtrl.NotEmpty.mat',dir_data),'I_');
load(sprintf('%s/20161026_covariate_table.format.mat',dir_data),'C_');

Label_ID_ = unique(C_.Cluster_ID_20161007);
n_Label_ID = length(Label_ID_);
n_Label_ID_ = zeros(n_Label_ID,1);
for nLabel_ID = 1:n_Label_ID;
n_Label_ID_(nLabel_ID) = length(find(strcmp(C_.Cluster_ID_20161007,Label_ID_(nLabel_ID))));
end;%for nLabel_ID = 1:n_Label_ID;
flag_plot=1;
if flag_plot;
bar(1:n_Label_ID,n_Label_ID_);
set(gca,'XTick',1:n_Label_ID,'XTickLabel',Label_ID_); xtickangle(90);
xlabel('cluster label');
ylabel('number');
title('histogram of cluster label counts');
set(gcf,'Position',1+[0,0,1024*2,1024]);
fname_base = sprintf('%s/dir_jpg/label_count_C',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
end;%if flag_plot;

C_ID_ = C_{:,1}; 
%%%%%%%%;
E_ID_ = E_{:,1};
[~,~,C_to_E_ID_] = intersect(E_ID_,C_ID_,'stable');
C_by_E_xref_ = sparse(C_to_E_ID_,1:length(E_ID_),1,length(C_ID_),length(E_ID_));
E_by_C_xref_ = sparse(1:length(E_ID_),C_to_E_ID_,1,length(E_ID_),length(C_ID_));
flag_time=0;
if flag_time;
n_i = 1024;
% find 2 is much faster than find 1;
tic; for ni=1:n_i; find(C_by_E_xref_(:,max(1,min(length(E_ID_),floor(length(E_ID_)*rand()))))); end;%for ni=1:n_i; 
disp(sprintf(' %% C_by_E_xref_ find 2: %f',toc));
tic; for ni=1:n_i; find(C_by_E_xref_(max(1,min(length(C_ID_),floor(length(C_ID_)*rand()))),:)); end;%for ni=1:n_i; 
disp(sprintf(' %% C_by_E_xref_ find 1: %f',toc));
tic; for ni=1:n_i; find(E_by_C_xref_(:,max(1,min(length(C_ID_),floor(length(C_ID_)*rand()))))); end;%for ni=1:n_i; 
disp(sprintf(' %% E_by_C_xref_ find 2: %f',toc));
tic; for ni=1:n_i; find(E_by_C_xref_(max(1,min(length(E_ID_),floor(length(E_ID_)*rand()))),:)); end;%for ni=1:n_i; 
disp(sprintf(' %% E_by_C_xref_ find 1: %f',toc));
end;%if flag_time;
E_to_C_ID_ = zeros(length(E_ID_),1);
for nE_ID=1:length(E_ID_);
E_to_C_ID_(nE_ID) = find(C_by_E_xref_(:,nE_ID));
end;%for nE_ID=1:length(E_ID_);
flag_test = 0;
if flag_test;
disp(sprintf(' %% testing E_to_C_ID_'));
n_i = 1024;
for ni=1:n_i;
nE_ID = max(1,min(length(E_ID_),floor(length(E_ID_)*rand())));
nC_ID = E_to_C_ID_(nE_ID);
assert(strcmp(C_ID_(nC_ID),E_ID_(nE_ID)));
end;%for ni=1:n_i;
disp(sprintf(' %% finished testing E_to_C_ID_'));
end;%if flag_test;
%%%%%%%%;
I_ID_ = I_{:,1};
[~,~,C_to_I_ID_] = intersect(I_ID_,C_ID_,'stable');
C_by_I_xref_ = sparse(C_to_I_ID_,1:length(I_ID_),1,length(C_ID_),length(I_ID_));
I_by_C_xref_ = sparse(1:length(I_ID_),C_to_I_ID_,1,length(I_ID_),length(C_ID_));
flag_time=0;
if flag_time;
n_i = 1024;
% find 2 is much faster than find 1;
tic; for ni=1:n_i; find(C_by_I_xref_(:,max(1,min(length(I_ID_),floor(length(I_ID_)*rand()))))); end;%for ni=1:n_i; 
disp(sprintf(' %% C_by_I_xref_ find 2: %f',toc));
tic; for ni=1:n_i; find(C_by_I_xref_(max(1,min(length(C_ID_),floor(length(C_ID_)*rand()))),:)); end;%for ni=1:n_i; 
disp(sprintf(' %% C_by_I_xref_ find 1: %f',toc));
tic; for ni=1:n_i; find(I_by_C_xref_(:,max(1,min(length(C_ID_),floor(length(C_ID_)*rand()))))); end;%for ni=1:n_i; 
disp(sprintf(' %% I_by_C_xref_ find 2: %f',toc));
tic; for ni=1:n_i; find(I_by_C_xref_(max(1,min(length(I_ID_),floor(length(I_ID_)*rand()))),:)); end;%for ni=1:n_i; 
disp(sprintf(' %% I_by_C_xref_ find 1: %f',toc));
end;%if flag_time;
I_to_C_ID_ = zeros(length(I_ID_),1);
for nI_ID=1:length(I_ID_);
I_to_C_ID_(nI_ID) = find(C_by_I_xref_(:,nI_ID));
end;%for nI_ID=1:length(I_ID_);
flag_test = 0;
if flag_test;
disp(sprintf(' %% testing I_to_C_ID_'));
n_i = 1024;
for ni=1:n_i;
nI_ID = max(1,min(length(I_ID_),floor(length(I_ID_)*rand())));
nC_ID = I_to_C_ID_(nI_ID);
assert(strcmp(C_ID_(nC_ID),I_ID_(nI_ID)));
end;%for ni=1:n_i;
disp(sprintf(' %% finished testing I_to_C_ID_'));
end;%if flag_test;
%%%%%%%%;

Label_ID_ = unique(C_.Cluster_ID_20161007(I_to_C_ID_));
n_Label_ID = length(Label_ID_);
n_Label_ID_ = zeros(n_Label_ID,1);
for nLabel_ID = 1:n_Label_ID;
n_Label_ID_(nLabel_ID) = length(find(strcmp(C_.Cluster_ID_20161007(I_to_C_ID_),Label_ID_(nLabel_ID))));
end;%for nLabel_ID = 1:n_Label_ID;
flag_plot=1;
if flag_plot;
bar(1:n_Label_ID,n_Label_ID_);
set(gca,'XTick',1:n_Label_ID,'XTickLabel',Label_ID_); xtickangle(90);
xlabel('cluster label');
ylabel('number');
title('histogram of cluster label counts');
set(gcf,'Position',1+[0,0,1024*2,1024]);
fname_base = sprintf('%s/dir_jpg/label_count_I',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
end;%if flag_plot;

I_col_val_ = 51:size(I_,2)-1;
I_val_ = decostand_total_0(I_{:,I_col_val_},'col');
n_GENE = size(I_val_,2);
n_sample = size(I_val_,1);
I_rank_ = I_val_;
for ng=1:n_GENE;
tmp_ = I_rank_(:,ng);
[~,tmp_ij_] = sort(tmp_,'ascend'); [~,tmp_ij_] = sort(tmp_ij_,'ascend');
I_rank_(:,ng) = tmp_ij_;
end;%for ng=1:n_GENE;

C_col_val_ = setdiff(24:size(C_,2),28); n_C_col_val = length(C_col_val_); n_COV = n_C_col_val;
C_val_ = zeros(length(I_to_C_ID_),n_COV);
C_VariableName_ = cell(n_C_col_val,1);
%for nc=1:n_C_col_val;
%C_col_val = C_col_val_(nc);
%tmp_C_val_ = C_(I_to_C_ID_,C_col_val); 
%disp(sprintf(' %% nc %d C_col_val %d class %s',nc,C_col_val,class(tmp_C_val_{1,1})));
%end;%for nc=1:n_C_col_val;
for nc=1:n_C_col_val;
C_col_val = C_col_val_(nc);
C_VariableName_{nc} = C_.Properties.VariableNames{C_col_val};
tmp_C_val_ = C_(I_to_C_ID_,C_col_val); 
if strcmp(class(tmp_C_val_{1,1}),'double'); C_val_(:,nc) = tmp_C_val_{1:end,1};
elseif strcmp(class(tmp_C_val_{1,1}),'cell'); C_val_(:,nc) = cellfun(@str2num,tmp_C_val_{1:end,1}); 
else disp(sprintf(' %% nc %d C_col_val %d class %s',nc,C_col_val,class(tmp_C_val_{1,1}))); end;
end;%for nc=1:n_C_col_val;
C_rank_ = C_val_;
for nc=1:n_COV;
tmp_ = C_rank_(:,nc);
[~,tmp_ij_] = sort(tmp_,'ascend'); [~,tmp_ij_] = sort(tmp_ij_,'ascend');
C_rank_(:,nc) = tmp_ij_;
end;%for nc=1:n_COV;

flag_test=1;
if flag_test;
flag_same=1; for ni=1:length(I_ID_); flag_same=flag_same*strcmp(I_ID_{ni},C_ID_{I_to_C_ID_(ni)}); end;
disp(sprintf(' %% testing I_ID_{:} vs C_ID_{I_to_C_ID_(:)}: flag_same %d',flag_same));
end;%if flag_test;

%%%%%%%%;
% Now measure correlation across samples of genes and covariates. ;
%%%%%%%%;
tmp_rank_avg = mean(1:nI_ID); tmp_rank_std = std(1:nI_ID,1);
XX_rank_ = transpose((C_rank_ - tmp_rank_avg)/tmp_rank_std)*((I_rank_ - tmp_rank_avg)/tmp_rank_std) / nI_ID;
[tmp_U_,tmp_S_,tmp_V_] = svds(XX_rank_,1); [~,XX_rank_U_ij_] = sort(tmp_U_,'descend'); [~,XX_rank_V_ij_] = sort(tmp_V_,'descend');
XX_rank_ori_ = XX_rank_(XX_rank_U_ij_,XX_rank_V_ij_);
clear XX_rank_ tmp_U_ tmp_S_ tmp_V_ ;
flag_disp=1;
if flag_disp;
colormap(colormap_beach()); 
imagesc(transpose(XX_rank_ori_),[-1,+1]); 
set(gca,'XTick',1:n_COV,'XTickLabel',C_VariableName_(XX_rank_U_ij_),'TickLabelInterpreter','none'); xtickangle(90);
set(gca,'FontSize',7);
xlabel('covariates'); ylabel('genes'); title('Correlation between Genes and Covariates');
set(gcf,'Position',1+[0,0,1024*2,1024]);
colorbar;
fname_base = sprintf('%s/dir_jpg/gene_covariate_correlation_ori',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
end;%if flag_disp;
n_iteration = 32;
XX_rank_avg_ = zeros(n_COV,n_GENE);
XX_rank_std_ = zeros(n_COV,n_GENE);
for niteration=1:n_iteration;
if (mod(niteration,10)==0); disp(sprintf(' %% niteration %d/%d',niteration,n_iteration)); end;
[tmp_Q_,~] = qr(randn(nI_ID));
tmp_XX_rank_ = transpose((C_rank_ - tmp_rank_avg)/tmp_rank_std)*tmp_Q_*((I_rank_ - tmp_rank_avg)/tmp_rank_std) / nI_ID;
[tmp_U_,tmp_S_,tmp_V_] = svds(tmp_XX_rank_,1); [~,tmp_XX_rank_U_ij_] = sort(tmp_U_,'descend'); [~,tmp_XX_rank_V_ij_] = sort(tmp_V_,'descend');
XX_rank_avg_ = XX_rank_avg_ + tmp_XX_rank_(tmp_XX_rank_U_ij_,tmp_XX_rank_V_ij_);
XX_rank_std_ = XX_rank_std_ + tmp_XX_rank_(tmp_XX_rank_U_ij_,tmp_XX_rank_V_ij_).^2;
clear tmp_XX_rank_ tmp_U_ tmp_S_ tmp_V_ tmp_XX_rank_U_ij_ tmp_XX_rank_V_ij_ ;
end;%for niteration=1:n_iteration;
XX_rank_avg_ = XX_rank_avg_/n_iteration;
XX_rank_std_ = sqrt(XX_rank_std_/n_iteration - XX_rank_avg_.^2);
XX_rank_Z_ = ( XX_rank_ori_ - XX_rank_avg_ ) ./ XX_rank_std_ ;
%XX_rank_p_ = 0.5 * erfc( XX_rank_Z_ / sqrt(2) ) ;
XX_rank_p_ = 1.0 * erfc( abs(XX_rank_Z_) / sqrt(2) ) ; %<-- two sided. ;
flag_disp=1;
if flag_disp;
colormap(colormap_beach()); 
imagesc(transpose(-log10(XX_rank_p_)),[0,+15]); 
set(gca,'XTick',1:n_COV,'XTickLabel',C_VariableName_(XX_rank_U_ij_),'TickLabelInterpreter','none'); xtickangle(90);
set(gca,'FontSize',7);
xlabel('covariates'); ylabel('genes'); title('log10(p-value) of Correlation between Genes and Covariates');
set(gcf,'Position',1+[0,0,1024*2,1024]);
colorbar;
fname_base = sprintf('%s/dir_jpg/gene_covariate_correlation_p',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
end;%if flag_disp;

I_Label_ = C_.Cluster_ID_20161007(I_to_C_ID_);
Label_ID_ = unique(I_Label_); n_Label_ID = length(Label_ID_);
I_aucX__ = zeros(n_Label_ID,n_Label_ID,n_GENE);
C_aucX__ = zeros(n_Label_ID,n_Label_ID,n_COV);
I_rank_avg_ = zeros(n_Label_ID,n_GENE);
C_rank_avg_ = zeros(n_Label_ID,n_COV);
%%%%%%%%;
for nA = 1:n_Label_ID;
disp(sprintf(' %% Rank average for Label %d (%s):',nA,Label_ID_{nA}));
tmp_Label_A_ij_ = find(strcmp(I_Label_,Label_ID_{nA})); tmp_n_A = length(tmp_Label_A_ij_);
I_rank_avg_(nA,:) = mean(I_rank_(tmp_Label_A_ij_,:),1);
C_rank_avg_(nA,:) = mean(C_rank_(tmp_Label_A_ij_,:),1);
end;%for nA = 1:n_Label_ID;
%%%%%%%%;
for nA = 1:n_Label_ID;
for nB = nA+1:n_Label_ID;
disp(sprintf(' %% Comparing Label %d (%s) and %d (%s):',nA,Label_ID_{nA},nB,Label_ID_{nB}));
I_aucX__(nA,nB,:) = I_rank_avg_(nA,:) - I_rank_avg_(nB,:);
I_aucX__(nB,nA,:) = -I_aucX__(nA,nB,:);
C_aucX__(nA,nB,:) = C_rank_avg_(nA,:) - C_rank_avg_(nB,:);
C_aucX__(nB,nA,:) = -C_aucX__(nA,nB,:);
end;%for nB = nA+1:n_Label_ID;
end;%for nA = 1:n_Label_ID;

flag_test=0;
if flag_test;
%%%%%%%;
% Now we can test a pair of labels: ;
%%%%%%%%;
nA=21; nB=27;
disp(sprintf(' %% Comparing Label %d (%s) and %d (%s):',nA,Label_ID_{nA},nB,Label_ID_{nB}));
tmp_Label_A_ij_ = find(strcmp(I_Label_,Label_ID_{nA})); tmp_n_A = length(tmp_Label_A_ij_);
tmp_Label_B_ij_ = find(strcmp(I_Label_,Label_ID_{nB})); tmp_n_B = length(tmp_Label_B_ij_);
%%%%%%%%;
% Now sort genes by aucX and plot heatmap: ;
%%%%%%%%;
[~,tmp_I_ij_] = sort(I_aucX__(nA,nB,:));
tmp_AB_ = [I_val_(tmp_Label_A_ij_,tmp_I_ij_) ; I_val_(tmp_Label_B_ij_,tmp_I_ij_)];
imagesc(decostand_total_0(tmp_AB_,'row'));
%%%%%%%%;
% Now sort covariates by p-value and plot heatmap: ;
%%%%%%%%;
[~,tmp_C_ij_] = sort(C_aucX__(nA,nB,:));
tmp_AB_ = [C_val_(tmp_Label_A_ij_,tmp_C_ij_) ; C_val_(tmp_Label_B_ij_,tmp_C_ij_)];
imagesc(decostand_total_0(tmp_AB_,'row'));
end;%if flag_test;

%%%%%%%%;
% For each gene and covariate, we can record the sorted-list of Label-pairs from I_aucX__ and C_aucX__. ;
% We can compare this to the distribution of sorted-lists obtained in a (Label-Label) permutation-test. ;
% Similarly, for each Label-pair, we can record the sorted-list of genes and covariates from I_aucX__ and C_aucX__. ;
% Again, we can compare this to the distribution of sorted-lists obtained in a (Label-Label) permutation-test. ;
%%%%%%%%;
AB_I_sort_list_ori__ = zeros(n_Label_ID,n_Label_ID,n_GENE);
AB_C_sort_list_ori__ = zeros(n_Label_ID,n_Label_ID,n_COV);
I_AB_sort_list_ori__ = zeros(n_Label_ID.^2,n_GENE);
C_AB_sort_list_ori__ = zeros(n_Label_ID.^2,n_COV);
AB_I_sort_list_ij__ = zeros(n_Label_ID,n_Label_ID,n_GENE);
AB_C_sort_list_ij__ = zeros(n_Label_ID,n_Label_ID,n_COV);
I_AB_sort_list_ij__ = zeros(n_Label_ID.^2,n_GENE);
C_AB_sort_list_ij__ = zeros(n_Label_ID.^2,n_COV);
n_iteration = 64;
AB_I_sort_list_avg__ = zeros(n_Label_ID,n_Label_ID,n_GENE);
AB_C_sort_list_avg__ = zeros(n_Label_ID,n_Label_ID,n_COV);
I_AB_sort_list_avg__ = zeros(n_Label_ID.^2,n_GENE);
C_AB_sort_list_avg__ = zeros(n_Label_ID.^2,n_COV);
AB_I_sort_list_std__ = zeros(n_Label_ID,n_Label_ID,n_GENE);
AB_C_sort_list_std__ = zeros(n_Label_ID,n_Label_ID,n_COV);
I_AB_sort_list_std__ = zeros(n_Label_ID.^2,n_GENE);
C_AB_sort_list_std__ = zeros(n_Label_ID.^2,n_COV);
%%%%%%%%;
AB_I_sort_list_p__ = zeros(n_Label_ID,n_Label_ID,n_GENE);
AB_C_sort_list_p__ = zeros(n_Label_ID,n_Label_ID,n_COV);
I_AB_sort_list_p__ = zeros(n_Label_ID.^2,n_GENE);
C_AB_sort_list_p__ = zeros(n_Label_ID.^2,n_COV);
%%%%%%%%;
I_Label_ = C_.Cluster_ID_20161007(I_to_C_ID_);
Label_ID_ = unique(I_Label_); n_Label_ID = length(Label_ID_);
rng(1);
for niteration=0:n_iteration;
if (mod(niteration,1)==0); disp(sprintf(' %% niteration %d/%d',niteration,n_iteration)); end;
if (niteration==0); tmp_p_ = 1:nI_ID; else; tmp_p_ = randperm(nI_ID); end;
tmp_I_aucX__ = zeros(n_Label_ID,n_Label_ID,n_GENE);
tmp_C_aucX__ = zeros(n_Label_ID,n_Label_ID,n_COV);
tmp_I_rank_avg_ = zeros(n_Label_ID,n_GENE);
tmp_C_rank_avg_ = zeros(n_Label_ID,n_COV);
%%%%%%%%;
for nA = 1:n_Label_ID;
tmp_Label_A_ij_ = find(strcmp(I_Label_(tmp_p_),Label_ID_{nA})); tmp_n_A = length(tmp_Label_A_ij_);
tmp_I_rank_avg_(nA,:) = mean(I_rank_(tmp_Label_A_ij_,:),1);
tmp_C_rank_avg_(nA,:) = mean(C_rank_(tmp_Label_A_ij_,:),1);
end;%for nA = 1:n_Label_ID;
%%%%%%%%;
for nA = 1:n_Label_ID;
for nB = nA+1:n_Label_ID;
tmp_I_aucX__(nA,nB,:) = tmp_I_rank_avg_(nA,:) - tmp_I_rank_avg_(nB,:);
tmp_I_aucX__(nB,nA,:) = -tmp_I_aucX__(nA,nB,:);
tmp_C_aucX__(nA,nB,:) = tmp_C_rank_avg_(nA,:) - tmp_C_rank_avg_(nB,:);
tmp_C_aucX__(nB,nA,:) = -tmp_C_aucX__(nA,nB,:);
end;%for nB = nA+1:n_Label_ID;
end;%for nA = 1:n_Label_ID;
%%%%%%%%;
[tmp_AB_I_sort_list__,tmp_AB_I_sort_ij__] = sort(tmp_I_aucX__,3,'ascend');
[tmp_AB_C_sort_list__,tmp_AB_C_sort_ij__] = sort(tmp_C_aucX__,3,'ascend');
[tmp_I_AB_sort_list__,tmp_I_AB_sort_ij__] = sort(reshape(tmp_I_aucX__,n_Label_ID.^2,n_GENE),2,'ascend');
[tmp_C_AB_sort_list__,tmp_C_AB_sort_ij__] = sort(reshape(tmp_C_aucX__,n_Label_ID.^2,n_COV),2,'ascend');
%%%%%%%%;
if (niteration==0); 
AB_I_sort_list_ori__ = tmp_AB_I_sort_list__;
AB_C_sort_list_ori__ = tmp_AB_C_sort_list__;
I_AB_sort_list_ori__ = tmp_I_AB_sort_list__;
C_AB_sort_list_ori__ = tmp_C_AB_sort_list__;
AB_I_sort_list_ij__ = tmp_AB_I_sort_ij__;
AB_C_sort_list_ij__ = tmp_AB_C_sort_ij__;
I_AB_sort_list_ij__ = tmp_I_AB_sort_ij__;
C_AB_sort_list_ij__ = tmp_C_AB_sort_ij__;
end; %if (niteration==0);
if (niteration>0);
AB_I_sort_list_avg__ = AB_I_sort_list_avg__ + tmp_AB_I_sort_list__;
AB_C_sort_list_avg__ = AB_C_sort_list_avg__ + tmp_AB_C_sort_list__;
I_AB_sort_list_avg__ = I_AB_sort_list_avg__ + tmp_I_AB_sort_list__;
C_AB_sort_list_avg__ = C_AB_sort_list_avg__ + tmp_C_AB_sort_list__;
AB_I_sort_list_std__ = AB_I_sort_list_std__ + tmp_AB_I_sort_list__.^2;
AB_C_sort_list_std__ = AB_C_sort_list_std__ + tmp_AB_C_sort_list__.^2;
I_AB_sort_list_std__ = I_AB_sort_list_std__ + tmp_I_AB_sort_list__.^2;
C_AB_sort_list_std__ = C_AB_sort_list_std__ + tmp_C_AB_sort_list__.^2;
end;%if (niteration>0);
%%%%%%%%;
clear tmp_I_aucX__ tmp_C_aucX__ tmp_I_rank_avg_ tmp_C_rank_avg_ ;
clear tmp_Label_A_ij_ tmp_n_A tmp_I_rank_avg_ tmp_C_rank_avg_ ;
clear tmp_I_aucX__ tmp_C_aucX__ ;
clear tmp_AB_I_sort_list__ tmp_AB_C_sort_list__ tmp_I_AB_sort_list__ tmp_C_AB_sort_list__ ;
clear tmp_AB_I_sort_ij__ tmp_AB_C_sort_ij__ tmp_I_AB_sort_ij__ tmp_C_AB_sort_ij__ ;
end;%for niteration=0:n_iteration;
AB_I_sort_list_avg__ = AB_I_sort_list_avg__/n_iteration;
AB_C_sort_list_avg__ = AB_C_sort_list_avg__/n_iteration;
I_AB_sort_list_avg__ = I_AB_sort_list_avg__/n_iteration;
C_AB_sort_list_avg__ = C_AB_sort_list_avg__/n_iteration;
AB_I_sort_list_std__ = sqrt(AB_I_sort_list_std__/n_iteration - AB_I_sort_list_avg__.^2);
AB_C_sort_list_std__ = sqrt(AB_C_sort_list_std__/n_iteration - AB_C_sort_list_avg__.^2);
I_AB_sort_list_std__ = sqrt(I_AB_sort_list_std__/n_iteration - I_AB_sort_list_avg__.^2);
C_AB_sort_list_std__ = sqrt(C_AB_sort_list_std__/n_iteration - C_AB_sort_list_avg__.^2);
%%%%%%%%;
AB_I_sort_list_p__ = erfc( abs(AB_I_sort_list_ori__ - AB_I_sort_list_avg__)./AB_I_sort_list_std__ / sqrt(2) );
AB_C_sort_list_p__ = erfc( abs(AB_C_sort_list_ori__ - AB_C_sort_list_avg__)./AB_C_sort_list_std__ / sqrt(2) );
I_AB_sort_list_p__ = erfc( abs(I_AB_sort_list_ori__ - I_AB_sort_list_avg__)./I_AB_sort_list_std__ / sqrt(2) );
C_AB_sort_list_p__ = erfc( abs(C_AB_sort_list_ori__ - C_AB_sort_list_avg__)./C_AB_sort_list_std__ / sqrt(2) );

flag_test=1;
if flag_test;
%%%%%%%;
% Now we can test a pair of labels: ;
%%%%%%%%;
nA=21; nB=27;
disp(sprintf(' %% Comparing Label %d (%s) and %d (%s):',nA,Label_ID_{nA},nB,Label_ID_{nB}));
clf; hold on;
plot(squeeze(AB_C_sort_list_avg__(nA,nB,:)+2.0*AB_C_sort_list_std__(nA,nB,:)),'k','LineWidth',0.5);
plot(squeeze(AB_C_sort_list_avg__(nA,nB,:)+0.0*AB_C_sort_list_std__(nA,nB,:)),'k','LineWidth',1.0);
plot(squeeze(AB_C_sort_list_avg__(nA,nB,:)-2.0*AB_C_sort_list_std__(nA,nB,:)),'k','LineWidth',0.5);
plot(squeeze(AB_C_sort_list_ori__(nA,nB,:)),'r','LineWidth',2.0);
xlim([1,n_COV]); xlabel('covariate'); ylabel('rank difference (auc)'); title(sprintf('sorted auc of covariates influencing labels %s-vs-%s',Label_ID_{nA},Label_ID_{nB}));
set(gca,'XTick',1:n_COV,'XTickLabel',C_VariableName_(AB_C_sort_list_ij__(nA,nB,:)),'TickLabelInterpreter','none'); xtickangle(90);
set(gca,'FontSize',7);
set(gcf,'Position',1+[0,0,1024*2,1024]);
fname_base = sprintf('%s/dir_jpg/AB_C_sort_list_ori_%s_vs_%s',dir_trunk,Label_ID_{nA},Label_ID_{nB});
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
hold off;
%%%%%%%%;
clf; hold on;
plot(-log10(squeeze(AB_C_sort_list_p__(nA,nB,:))),'r','LineWidth',2.0);
xlim([1,n_COV]); xlabel('covariate'); ylim([0,15]); ylabel('-log10(p)'); title(sprintf('-log10(p-value) for sorted auc of covariates influencing labels %s-vs-%s',Label_ID_{nA},Label_ID_{nB}));
set(gca,'XTick',1:n_COV,'XTickLabel',C_VariableName_(AB_C_sort_list_ij__(nA,nB,:)),'TickLabelInterpreter','none'); xtickangle(90);
set(gca,'FontSize',7);
set(gcf,'Position',1+[0,0,1024*2,1024]);
fname_base = sprintf('%s/dir_jpg/AB_C_sort_list_p_%s_vs_%s',dir_trunk,Label_ID_{nA},Label_ID_{nB});
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
hold off;
%%%%%%%%;
end;%if flag_test;

flag_test=1;
if flag_test;
%%%%%%%;
% Now we can test a pair of labels: ;
%%%%%%%%;
%nA=find(strcmp(Label_ID_,'22')); nB=find(strcmp(Label_ID_,'11'));
nA=find(strcmp(Label_ID_,'19')); nB=find(strcmp(Label_ID_,'15'));
disp(sprintf(' %% Comparing Label %d (%s) and %d (%s):',nA,Label_ID_{nA},nB,Label_ID_{nB}));
clf; hold on;
plot(squeeze(AB_C_sort_list_avg__(nA,nB,:)+2.0*AB_C_sort_list_std__(nA,nB,:)),'k','LineWidth',0.5);
plot(squeeze(AB_C_sort_list_avg__(nA,nB,:)+0.0*AB_C_sort_list_std__(nA,nB,:)),'k','LineWidth',1.0);
plot(squeeze(AB_C_sort_list_avg__(nA,nB,:)-2.0*AB_C_sort_list_std__(nA,nB,:)),'k','LineWidth',0.5);
plot(squeeze(AB_C_sort_list_ori__(nA,nB,:)),'r','LineWidth',2.0);
xlim([1,n_COV]); xlabel('covariate'); ylabel('rank difference (auc)'); title(sprintf('sorted auc of covariates influencing labels %s-vs-%s',Label_ID_{nA},Label_ID_{nB}));
set(gca,'XTick',1:n_COV,'XTickLabel',C_VariableName_(AB_C_sort_list_ij__(nA,nB,:)),'TickLabelInterpreter','none'); xtickangle(90);
set(gca,'FontSize',7);
set(gcf,'Position',1+[0,0,1024*2,1024]);
fname_base = sprintf('%s/dir_jpg/AB_C_sort_list_ori_%s_vs_%s',dir_trunk,Label_ID_{nA},Label_ID_{nB});
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
hold off;
%%%%%%%%;
clf; hold on;
plot(-log10(squeeze(AB_C_sort_list_p__(nA,nB,:))),'r','LineWidth',2.0);
xlim([1,n_COV]); xlabel('covariate'); ylim([0,15]); ylabel('-log10(p)'); title(sprintf('-log10(p-value) for sorted auc of covariates influencing labels %s-vs-%s',Label_ID_{nA},Label_ID_{nB}));
set(gca,'XTick',1:n_COV,'XTickLabel',C_VariableName_(AB_C_sort_list_ij__(nA,nB,:)),'TickLabelInterpreter','none'); xtickangle(90);
set(gca,'FontSize',7);
set(gcf,'Position',1+[0,0,1024*2,1024]);
fname_base = sprintf('%s/dir_jpg/AB_C_sort_list_p_%s_vs_%s',dir_trunk,Label_ID_{nA},Label_ID_{nB});
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
hold off;
%%%%%%%%;
end;%if flag_test;

disp('returning'); return;



