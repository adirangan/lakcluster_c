function lisa = lisa_struct_cu_to_po_ver0(lisa,annot,ontology);

%%%%%%%%;
cu_ = lisa.cdrop_a_;
so_ = lisa.so_;
su_ = lisa.su_;
so_to_su_ = lisa.so_to_su_;
su_to_so_ = lisa.su_to_so_;
so_by_su_xref_ = lisa.so_by_su_xref_;
tu_ = lisa.tu_;
su_to_tu_ = lisa.su_to_tu_;
ru_to_tu_ = lisa.ru_to_tu_;
tu_by_ru_xref_ = lisa.tu_by_ru_xref_;
cu_to_cu__ = lisa.cu_to_cu__;
cu_to_cu_mc_ = lisa.cu_to_cu_mc_;
cu_mc_ = lisa.cu_mc_;
cu_by_eu_xref__ = lisa.cu_by_eu_xref__;
n_percentile = lisa.n_percentile;
percentile_ = lisa.percentile_;
cu_by_eu_xref_XX__ = lisa.cu_by_eu_xref_XX__;
%%%%%%%%;
n_ru = annot.n_ru;
ln_ = annot.ln_;
ru_ = annot.ru_;
eo__ = annot.eo__;
eu_max = annot.eu_max;
eo_ = annot.eo_;
ru_to_eo_ = annot.ru_to_eo_;
eu_ = annot.eu_;
eo_to_eu_ = annot.eo_to_eu_;
eu_to_eo_ = annot.eu_to_eo_;
ru_by_eu_xref_ = annot.ru_by_eu_xref_;
%%%%%%%%;
n_pathway = ontology.n_pathway;
pathway_name_ = ontology.pathway_name_;
pathway_size_ = ontology.pathway_size_;
po__ = ontology.po__;
po_ = ontology.po_;
pu_ = ontology.pu_;
po_to_pu_ = ontology.po_to_pu_;
pu_to_po_ = ontology.pu_to_po_;
qu_ = ontology.qu_;
eu_to_qu_ = ontology.eu_to_qu_;
pu_to_qu_ = ontology.pu_to_qu_;
eu_to_qu_xref_ = ontology.eu_to_qu_xref_;
pu_to_qu_xref_ = ontology.pu_to_qu_xref_;

%%%%%%%%%%%%%%%%;
% link pathways with snps in cu_ by taking only one of the snps from each snp-set for each gene.; 
% The representative snp chosen for each gene will change depending on which percentile (amongst possible representatives) we choose. ;
% Note that, if multiple genes have the same representative, that snp will be counted multiple times. ;
% The total number of representative-snps should equal the total number of genes. ;
%%%%%%%%%%%%%%%%;
% cu_to_po_XX__ = cell(n_pathway,n_percentile); %<-- this will hold the snp-indices (as entries of cu_) associated with EZids in each pathway. ; 
% More specifically: lisa.bim__id_(cu_(find(cu_to_po_XX__{npathway,npercentile}))) will hold the (string) rsids associated with first XX-percentile occurrences of the genes in pathway pathway_name_{npathway}. ;
% Note that we expect lisa.bim__id_(cu_(find(cu_to_po_XX__{npathway,percentile==00}))) to hold the first rsid associated with pathway_name_{npathway}. ;
% Similarly, we expect lisa.bim__id_(cu_(find(cu_to_po_XX__{npathway,percentile==100}))) to hold the last rsid associated with pathway_name_{npathway}. ;
% However, an intermediate percentile such as lisa.bim__id_(cu_(find(cu_to_po_XX__{npathway,percentile==25}))) may not actually correspond to an rsid associated with pathway_name_{npathway}, ;
% simply because this 25th percentile location (along cu_) may actually lie in between two indices which are both in the pathway. ;
cu_to_po_XX__ = cell(n_pathway,n_percentile);
for npathway=1:n_pathway;
tmp_pathway_name = pathway_name_{npathway};
tmp_po_ = po__{npathway};
tmp_pathway_size = pathway_size_(npathway);
disp(sprintf(' %% npathway %d/%d name %s size %d',npathway,n_pathway,tmp_pathway_name,tmp_pathway_size));
tmp0_ = find(pu_to_qu_xref_(tmp_po_)>0);
tmp0_ = pu_(pu_to_qu_xref_(tmp_po_(tmp0_))); %<-- now tmp0_ stores only the EZid within pu_. ;
tmp1_ = find(eu_to_qu_xref_(tmp0_)>0); %<-- now tmp1_ indicates which of the the EZid within pu_ are also within eu_. ;
tmp2_ = eu_to_qu_xref_(tmp0_(tmp1_)); %<-- now tmp2_ allows us to reference the EZid within pu_ that are also within eo_uni. ; That is, eu_(tmp2_) will list the actual EZids in this intersection. ;
tmp3_ = eu_(tmp2_); %<-- now tmp3_ stores only the EZid within eu_ and pu_. ;
for npercentile=1:n_percentile;
tmp4_cXX_ = (sum(cu_by_eu_xref_XX__{npercentile}(:,tmp2_),2));
cu_to_po_XX__{npathway,npercentile} = tmp4_cXX_;
end;%for npercentile=1:n_percentile;
end;%for npathway=1:n_pathway;
%%%%%%%%;
% a-posteriori check. ;
%%%%%%%%;
flag_check=0;
if flag_check;
npathway = 1+floor(n_pathway*rand());
disp(sprintf(' %% npathway %d name %s size %d',npathway,pathway_name_{npathway},pathway_size_(npathway)));
tmp_rs_01_ = unique(lisa.bim__id_(cu_(find(cu_to_po_XX__{npathway,1}))));
tmp_rs_99_ = unique(lisa.bim__id_(cu_(find(cu_to_po_XX__{npathway,end}))));
disp(sprintf(' %% snps %d (%d unique): ',sum(cu_to_po_XX__{npathway,1})),length(tmp_rs_01_));
for nl=1:length(tmp_rs_01_);
if (mod(nl,100)==0); disp(sprintf(' %% checking tmp_rs_01_(%d)',nl)); end;
tmp_ij_01_ = find(strcmp(ru_,tmp_rs_01_{nl})); assert(length(intersect(eo__{tmp_ij_01_},po__{npathway}))>0);
end;%for nl=1:length(tmp_rs_01_);
for nl=1:length(tmp_rs_99_);
if (mod(nl,100)==0); disp(sprintf(' %% checking tmp_rs_99_(%d)',nl)); end;
tmp_ij_99_ = find(strcmp(ru_,tmp_rs_99_{nl})); assert(length(intersect(eo__{tmp_ij_99_},po__{npathway}))>0);
end;%for nl=1:length(tmp_rs_99_);
end;%if flag_check;
%%%%%%%%;
% Create masks (of indices along cdrop_a) ;
%%%%%%%%;
po_XX_cu_mc__ = cell(n_percentile);
po_XX_size__ = zeros(n_pathway,n_percentile);
for npercentile=1:n_percentile;
po_XX_cu_mc__{npercentile} = sum(cu_by_eu_xref_XX__{npercentile},2);
for npathway=1:n_pathway;
po_XX_size__(npathway,npercentile) = sum(cu_to_po_XX__{npathway,npercentile});
end;%for npathway=1:n_pathway;
end;%for npercentile=1:n_percentile;

lisa.cu_to_po_XX__ = cu_to_po_XX__;
lisa.po_XX_cu_mc__ = po_XX_cu_mc__;
lisa.po_XX_size__ = po_XX_size__;


