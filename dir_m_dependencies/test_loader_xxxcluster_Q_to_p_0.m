function [Z_p_s0000,Z_p_s0000_] = test_loader_xxxcluster_Q_to_p_0(gamma,Q_sub_,n_iter_,r_rem_,c_rem_);

verbose=1;
if (verbose>0); disp(sprintf(' %% [entering test_loader_xxxcluster_Q_to_p_0]')); end;

n_shuffle = numel(Q_sub_)-1;
if (n_shuffle<=2); disp(sprintf(' %% Warning! too few shuffles for test_loader_xxxcluster_Q_to_p_0')); end;
n_iteration = length(n_iter_);
assert(n_iteration==length(r_rem_));
assert(n_iteration==length(c_rem_));
assert(n_iteration==size(Q_sub_{1},1));
assert(n_iteration==size(Q_sub_{1},2));
%%%%%%%%;
if (n_iteration<=1);
QR_p_s0000 = 1;
QR_p_s0000_ = 1;
end;%if (n_iteration<=1);
%%%%%%%%;
if (n_iteration>1);
%%%%%%%%;
Q_sub_avg_ = zeros(size(Q_sub_{1}));
Q_sub_std_ = zeros(size(Q_sub_{1}));
for nshuffle=1:n_shuffle;
Q_sub_avg_ = Q_sub_avg_ + Q_sub_{1+nshuffle};
Q_sub_std_ = Q_sub_std_ + Q_sub_{1+nshuffle}.^2;
end;%for nshuffle=1:n_shuffle;
Q_sub_avg_ = Q_sub_avg_/n_shuffle;
Q_sub_std_ = sqrt(Q_sub_std_/n_shuffle - Q_sub_avg_.^2);
Z_sub_ = cell(1+n_shuffle,1);
for nshuffle=0:n_shuffle;
Z_sub_{1+nshuffle}= (Q_sub_{1+nshuffle} - Q_sub_avg_)./Q_sub_std_;
end;%for nshuffle=0:n_shuffle;
%%%%%%%%;
iteration_alo = max(1,floor(n_iteration*gamma));
iteration_ahi = min(n_iteration-1,floor(n_iteration*(1-gamma)));
iteration_avg_ = 1:iteration_ahi; 
dr_ = diff(r_rem_); dc_ = diff(c_rem_); 
dr2_ = transpose(dr_(iteration_avg_))/sum(dr_(iteration_avg_)); 
dc2_ = dc_(iteration_avg_)/sum(dc_(iteration_avg_));
iteration_top_ = iteration_alo:iteration_ahi;
tr_avg_s0000 = dr2_*Z_sub_{1+0}(iteration_avg_,iteration_avg_)*dc2_; if (verbose>1); disp(tr_top_s0000); end;
tr_avg_ = zeros(n_shuffle,1);
for nshuffle=1:n_shuffle;
tr_avg_(nshuffle) = dr2_*Z_sub_{1+nshuffle}(iteration_avg_,iteration_avg_)*dc2_;
end;%for nshuffle=1:n_shuffle;
tr_avg_p_ = zeros(n_shuffle,1);
tr_top_s0000 = max(Z_sub_{1+0}(iteration_top_,iteration_top_),[],'all'); if (verbose>1); disp(tr_top_s0000); end;
tr_top_ = zeros(n_shuffle,1);
for nshuffle=1:n_shuffle;
tr_top_(nshuffle) = max(Z_sub_{1+nshuffle}(iteration_top_,iteration_top_),[],'all'); 
end;%for nshuffle=1:n_shuffle;
tr_top_p_ = zeros(n_shuffle,1);
p_ra_ = zeros(n_shuffle,1);
for np=(1:n_shuffle);
tr_top_p_(np) = (length(find(tr_top_>tr_top_(np))) + 0.5*length(find(tr_top_==tr_top_(np))))/n_shuffle;
tr_avg_p_(np) = (length(find(tr_avg_>tr_avg_(np))) + 0.5*length(find(tr_avg_==tr_avg_(np))))/n_shuffle;
tmp_tau = min([tr_top_p_(np),tr_avg_p_(np)]); tmp_tau = max(0.5/n_shuffle,tmp_tau);
ls_rm = find(tr_top_(:)>=prctile(tr_top_(:),100*(1-tmp_tau)));
ls_ra = find(tr_avg_(:)>=prctile(tr_avg_(:),100*(1-tmp_tau)));
p_ra_(np) = length(unionall({ls_rm,ls_ra}))/n_shuffle;
end;%for np=(1:n_shuffle);
tr_top_s0000_p = (length(find(tr_top_>tr_top_s0000)) + 0.5*length(find(tr_top_==tr_top_s0000)))/n_shuffle;
tr_avg_s0000_p = (length(find(tr_avg_>tr_avg_s0000)) + 0.5*length(find(tr_avg_==tr_avg_s0000)))/n_shuffle;
tmp_tau = min([tr_top_s0000_p,tr_avg_s0000_p]); tmp_tau = max(0.5/n_shuffle,tmp_tau);
ls_rm = find(tr_top_(:)>=prctile(tr_top_(:),100*(1-tmp_tau)));
ls_ra = find(tr_avg_(:)>=prctile(tr_avg_(:),100*(1-tmp_tau)));
Z_p_s0000 = length(unionall({ls_rm,ls_ra}))/n_shuffle;
if (verbose>0); disp(sprintf('Z_p_s0000 %0.6f',Z_p_s0000)); end;
%%%%%%%%;
Z_s0000_ = Z_sub_{1+0};
n_node = min(64,length(unique(Z_s0000_))); 
prctile_node_ = linspace(0,100,n_node);
Z_prctile_ = prctile(Z_s0000_(:),prctile_node_);
Z_p_s0000_prctile_ = zeros(n_node,1);
for ni=1:n_node;
tmp_upb = Z_prctile_(ni);
tmp_p = ZZ_to_p(gamma,n_iteration,r_rem_,c_rem_,min(tmp_upb,Z_s0000_),n_shuffle,tr_top_,tr_avg_);
Z_p_s0000_prctile_(ni) = tmp_p;
end;%for ni=1:n_node;
if (length(Z_prctile_<=1)); Z_p_s0000_ = Z_p_s0000_prctile_(1)*ones(size(Z_s0000_)); end;
if (length(Z_prctile_> 1)); Z_p_s0000_ = interp1(Z_prctile_,Z_p_s0000_prctile_,Z_s0000_); end;
%%%%%%%%;
flag_plot=(verbose>0);
if flag_plot;
subplot(1,2,1);
hold on;
l10plim=[0,2];
cmap = colormap('jet'); clen = size(cmap,1); %cmap = cmap(end:-1:1,:);
Msize1 = 25; Msize2 = 35;
for np=1:n_shuffle;
nc = max(1,min(clen,floor(clen*((-log10(p_ra_(np))-min(l10plim))/diff(l10plim)))));
plot(tr_top_(np),tr_avg_(np),'.','Color',cmap(nc,:),'MarkerSize',Msize1);
end;%for np=1:n_shuffle;
for no_flag=0:0;%for no_flag=0:NO-1;
plot(tr_top_s0000,tr_avg_s0000,'x','Color',[0,0,0],'MarkerSize',Msize2);
plot(tr_top_s0000,tr_avg_s0000,'o','Color',[0,0,0],'MarkerSize',Msize2);
end;%for no_flag=0:NO-1;
hold off;
%xlim([-1.50,+3.25]);ylim([-1.75,+2.75]);
if (verbose>1); disp(sprintf('xlim %0.2f %0.2f ylim %0.2f %0.2f',xlim(),ylim())); end;
xlabel('Z-score (top)'); ylabel('Z-score (avg)'); 
%title('scatterplot of distribution of top vs avg: bicluster (x) and permutations (dots)');
title(sprintf('scatterplot: p %0.6f',Z_p_s0000));
%set(gca,'Xtick',[],'Ytick',[]);
axis equal;
subplot(1,2,2);
yl_ = log(0.05) + [-3,+3];
colormap(colormap_beach());
imagesc(log(Z_p_s0000_),yl_); 
xlabel('column iteration'); ylabel('row iteration'); title('log(Z_p)','Interpreter','none');
colorbar;
figbig;
end;%if flag_plot;
%%%%%%%%;
end;%if (n_iteration>1);
%%%%%%%%;

if (verbose>0); disp(sprintf(' %% [finished test_loader_xxxcluster_Q_to_p_0]')); end;

function p_s0000 = ZZ_to_p(gamma,n_iteration,r_rem_,c_rem_,Z_s0000_,n_shuffle,tr_top_,tr_avg_);
iteration_alo = max(1,floor(n_iteration*gamma));
iteration_ahi = min(n_iteration-1,floor(n_iteration*(1-gamma)));
iteration_avg_ = 1:iteration_ahi; 
dr_ = diff(r_rem_); dc_ = diff(c_rem_); 
dr2_ = transpose(dr_(iteration_avg_))/sum(dr_(iteration_avg_)); 
dc2_ = dc_(iteration_avg_)/sum(dc_(iteration_avg_));
iteration_top_ = iteration_alo:iteration_ahi;
tr_avg_s0000 = dr2_*Z_s0000_(iteration_avg_,iteration_avg_)*dc2_;
tr_top_s0000 = max(Z_s0000_(iteration_top_,iteration_top_),[],'all');
tr_top_s0000_p = (length(find(tr_top_>tr_top_s0000)) + 0.5*length(find(tr_top_==tr_top_s0000)))/n_shuffle;
tr_avg_s0000_p = (length(find(tr_avg_>tr_avg_s0000)) + 0.5*length(find(tr_avg_==tr_avg_s0000)))/n_shuffle;
tmp_tau = min([tr_top_s0000_p,tr_avg_s0000_p]); tmp_tau = max(0.5/n_shuffle,tmp_tau);
ls_rm = find(tr_top_(:)>=prctile(tr_top_(:),100*(1-tmp_tau)));
ls_ra = find(tr_avg_(:)>=prctile(tr_avg_(:),100*(1-tmp_tau)));
p_s0000 = length(unionall({ls_rm,ls_ra}))/n_shuffle;

