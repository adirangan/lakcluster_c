function [out_xdrop_,trace_] = q3dcluster_nonbinary_AAAA_ver0(A_n_0in_,gamma);
% q3dcluster. ;
% Does not binarize. ;
%%%%%%%%;
% Assumes that A_n_ is of size M-by-N, where N = n_cluster^2 = n_p^2, ;
% and the various columns of A_n_ refer to the (unrolled) cluster pairs (np1,np2). ;
% Specifically, we assume that column nc corresponds to cluster-pair (np1,np2) via: ;
% 1 + (nc-1) = 1 + (np1-1) + (np2-1)*n_p. ;
%%%%%%%%;
% With this arrangement, the columns corresponding to (np1,:) are: ;
% nc_ = 1 + (np1-1) + [0:n_p-1]*n_p, ;
% and the columns corresponding to (:,np2) are: ;
% nc_ = 1 = [0:n_p-1] + (np2-1)*n_p. ;
%%%%%%%%;
% With these associations, cluster-scores (i.e., QP_) are formed ;
% by aggregating the columns associated with each cluster. ;
% This can be done by first forming the matrix PC_: ;
%{ 
  PC_ = zeros(n_p,n_c);
  for np=1:n_p;
  nc_ = 1 + (np-1) + [0:n_p-1]*n_p; PC_(np,nc_) = 1;
  nc_ = 1 + [0:n_p-1] + (np-1)*n_p; PC_(np,nc_) = 1;
  end;%for np=1:n_p;
  %}
% and then multiplying: QP_ = PC_*QC_. ;
%%%%%%%%;
% Clusters are removed one at a time. ;
% Any time cluster np is removed, we zero-out the columns of A_n_ ;
% corresponding to find(PC_(np,:)). ;
%%%%%%%%;

if nargin<2; gamma = 0.0; end;
verbose=1;
[n_r,n_c] = size(A_n_0in_);
n_p = round(sqrt(n_c)); assert(n_p^2==n_c);
PC_ = zeros(n_p,n_c);
for np=1:n_p;
nc_ = 1 + (np-1) + [0:n_p-1]*n_p; PC_(np,nc_) = 1;
nc_ = 1 + [0:n_p-1] + (np-1)*n_p; PC_(np,nc_) = 1;
end;%for np=1:n_p;
PC_ = sparse(PC_); %<-- copy will be destroyed. ;

%[rdrop_,cdrop_,lrij_,lcij_] = get_xdrop_(n_r,n_c,gamma);
[rdrop_,pdrop_,lrij_,lpij_] = get_q3drop_(n_r,n_p,gamma);

r_ij_ = 1:n_r; c_ij_ = 1:n_c;
p_ij_ = 1:n_p;
n_a = length(rdrop_);
A_n_ = A_n_0in_; %<-- copy will be destroyed. ;
A_n_2_ = A_n_.^2; %<-- copy will be destroyed. ;
A_n_A_t_ = A_n_*transpose(A_n_); %<-- copy will be destroyed. ;
e_r_n_ = ones(n_r,1); e_c_n_ = ones(n_c,1);
out_xdrop_ = zeros(n_r+n_c,2);
trace_ = zeros(n_a,6); %<-- [iteration , length(r_ij_) , length(c_ij_) , mean(QR_) , mean(QC_) , 1] ;
nx=0;
tic;
t_s = toc;
for na=1:n_a;
if (verbose);
if (mod(na,10)==0); 
t_a = toc; t_e = t_a*n_a/na; 
disp(sprintf(' %% na %d/%d, time %0.2fs, estimated %0.2fs (%0.2fh)',na,n_a,t_a,t_e,t_e/3600)); 
end;%if (mod(na,10)==0); 
end;%if (verbose);
QR_ = zeros(n_r,1); for nr=1:n_r; QR_(nr) = dot(A_n_A_t_(nr,:),A_n_A_t_(nr,:)); end;%for nr=1:n_r;
QR_ = QR_ - ( A_n_2_ * e_c_n_ ).^2 - ( (A_n_2_) * ( transpose(A_n_2_) * e_r_n_ ) ) + ( (A_n_2_.^2) * e_c_n_ ) ;
QC_ = zeros(n_c,1); for nc=1:n_c; QC_(nc) = transpose(A_n_(:,nc)) * A_n_A_t_ * A_n_(:,nc) ; end;%for nc=1:n_c;
QC_ = QC_ - ( transpose(A_n_2_) * e_r_n_ ).^2 - ( transpose(A_n_2_) * ( (A_n_2_) * e_c_n_ ) ) + ( transpose(A_n_2_.^2) * e_r_n_ ) ;
QP_ = PC_*QC_;
trace_(na,:) = [na , length(r_ij_) , length(c_ij_) , mean(QR_) , mean(QC_) , 1.0];
[~,tmp_r_ij_] = sort(QR_(r_ij_));
r_rmv_ = r_ij_(tmp_r_ij_(1:rdrop_(na)));
r_ret_ = r_ij_(tmp_r_ij_(rdrop_(na)+1:end));
%[~,tmp_c_ij_] = sort(QC_(c_ij_));
[~,tmp_p_ij_]= sort(QP_(p_ij_));
%c_rmv_ = c_ij_(tmp_c_ij_(1:cdrop_(na)));
%c_ret_ = c_ij_(tmp_c_ij_(cdrop_(na)+1:end));
p_rmv_ = p_ij_(tmp_p_ij_(1:pdrop_(na)));
p_ret_ = p_ij_(tmp_p_ij_(pdrop_(na)+1:end));
c_rmv_ = find(sum(PC_(p_rmv_,:),1));
c_ret_ = find(sum(PC_(p_ret_,:),1));
d_n_ = A_n_(r_rmv_,c_rmv_);
c_n_ = A_n_(r_ret_,c_rmv_);
b_n_ = A_n_(r_rmv_,c_ret_);
a_n_ = A_n_(r_ret_,c_ret_);
A_n_A_t_(r_rmv_,r_ret_) = 0; 
A_n_A_t_(r_ret_,r_rmv_) = 0;
A_n_A_t_(r_rmv_,r_rmv_) = 0;
A_n_A_t_(r_ret_,r_ret_) = A_n_A_t_(r_ret_,r_ret_) - ( c_n_ * transpose(c_n_) ) ; %<-- update correlation matrix. ;
A_n_2_(r_rmv_,:) = 0; %<-- first we remove rows. ;
A_n_2_(:,c_rmv_) = 0; %<-- then we remove columns. ;
A_n_(r_rmv_,:) = 0; %<-- first we remove rows. ;
A_n_(:,c_rmv_) = 0; %<-- then we remove columns. ;
PC_(p_rmv_,:) = 0;
PC_(:,c_rmv_) = 0;
r_ij_(tmp_r_ij_(1:rdrop_(na))) = [];
p_ij_(tmp_p_ij_(1:pdrop_(na))) = [];
out_xdrop_(nx + (1:rdrop_(na)),:) = [r_rmv_(:)-1 , -ones(rdrop_(na),1)]; nx = nx+rdrop_(na);
%out_xdrop_(nx + (1:cdrop_(na)),:) = [-ones(cdrop_(na),1) , c_rmv_(:)-1]; nx = nx+cdrop_(na);
out_xdrop_(nx + (1:numel(c_rmv_)),:) = [-ones(numel(c_rmv_),1) , c_rmv_(:)-1]; nx = nx+numel(c_rmv_);
end;%for na=1:n_a;
