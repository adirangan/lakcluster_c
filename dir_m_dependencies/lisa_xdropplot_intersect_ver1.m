function lisa_xdropplot_intersect_ver1(...
				       cl_num_1,flag_dex_vs_lak_1,gamma_1,B_MLT_1,n_mds_1,flag_reverse_1,n_maf_1,n_cov_1,n_scramble_1, ...
				       cl_num_2,flag_dex_vs_lak_2,gamma_2,B_MLT_2,n_mds_2,flag_reverse_2,n_maf_2,n_cov_2,n_scramble_2 ...
				       );

%{
  
  clear;
  %%%%%%%%%%%%%%%%;
  cl_num_1 = 4;
  flag_dex_vs_lak_1 = 'dex';
  gamma_1 = 0.004;
  B_MLT_1 = 34;
  n_mds_1 = 20;
  flag_reverse_1 = 0;
  n_maf_1 = 5;
  n_cov_1 = 2;
  n_scramble_1 = 0;
  %%%%%%%%%%%%%%%%;
  cl_num_2 = 4;
  flag_dex_vs_lak_2 = 'dex';
  gamma_2 = 0.004;
  B_MLT_2 = 34;
  n_mds_2 = 20;
  flag_reverse_2 = 0;
  n_maf_2 = 1;
  n_cov_2 = 2;
  n_scramble_2 = 1;
  %%%%%%%%%%%%%%%%;

  clear;
  %%%%%%%%%%%%%%%%;
  cl_num_1 = 3;
  flag_dex_vs_lak_1 = 'dex';
  gamma_1 = 0.004;
  B_MLT_1 = 34;
  n_mds_1 = 20;
  flag_reverse_1 = 1;
  n_maf_1 = 5;
  n_cov_1 = 2;
  n_scramble_1 = 0;
  %%%%%%%%%%%%%%%%;
  cl_num_2 = 3;
  flag_dex_vs_lak_2 = 'lak';
  gamma_2 = 0.001;
  B_MLT_2 = 34;
  n_mds_2 = 20;
  flag_reverse_2 = 1;
  n_maf_2 = 4;
  n_cov_2 = 1;
  n_scramble_2 = 0;
  %%%%%%%%%%%%%%%%;

  %}

verbose = 1;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
% choose directory names. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
dir_code = sprintf('/data/rangan/dir_bcc/dir_lakcluster_c_dev'); 
dir_trunk = sprintf('/data/rangan/dir_bcc/dir_PGC_20180304');
path(path,sprintf('%s/dir_m',dir_code)); 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
% select parameters used during analysis number 1. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
cl_num = cl_num_1;
flag_dex_vs_lak = flag_dex_vs_lak_1;
gamma = gamma_1;
B_MLT = B_MLT_1;
n_mds = n_mds_1;
flag_reverse = flag_reverse_1;
n_maf = n_maf_1;
n_cov = n_cov_1;
n_scramble = n_scramble_1;
n_shuffle = 0;
[study_trunk_,study_name_,n_study] = lisa_define_study_ver0(cl_num);
Ireq_half = floor(n_study/2); Icat_full = n_study;
string_prefix = sprintf('PGC_cl%d_maf01',cl_num);
%%%%%%%%%%%%%%%% ;
if n_maf==1; maf_lo_threshold = 0.01; maf_hi_threshold = 0.50; end; % all (since we thresholded maf at 0.01 to start with) ;
if n_maf==2; maf_lo_threshold = 0.01; maf_hi_threshold = 0.05; end; % extreme snps (differential expression only, no loop-counting later on) ;
if n_maf==3; maf_lo_threshold = 0.01; maf_hi_threshold = 0.10; end; % extreme snps (differential expression only, no loop-counting later on) ;
if n_maf==4; maf_lo_threshold = 0.10; maf_hi_threshold = 0.50; end; % more balanced snps (differential expression to start, as well as loop-counting later on) ;
if n_maf==5; maf_lo_threshold = 0.25; maf_hi_threshold = 0.50; end; % more balanced snps (differential expression to start, as well as loop-counting later on) ;
%%%%%%%%%%%%%%%% ;
if n_cov==0; Ireq=0; Icat=1; mds_used_=[]; mds_repl=0; end; % do not correct for mds-components ;
if n_cov==1; Ireq=0; Icat=1; mds_used_=[1:2]; mds_repl=1; end; % only correct for mds-components [1:2], but replicated only once, so that each 'sector' is 90 degrees ;
if n_cov==2; Ireq=0; Icat=1; mds_used_=[1:2]; mds_repl=2; end; % only correct for mds-components [1:2], but replicated twice, so that each 'sector' is 45 degrees ;
if n_cov==3; Ireq=Ireq_half; Icat=Icat_full; mds_used_=[]; mds_repl=0; end; % correct for study, requiring at least Ireq_half, but not for mds-components. ;
if n_cov==4; Ireq=Ireq_half; Icat=Icat_full; mds_used_=[1:2]; mds_repl=1; end; % correct for study, requiring at least Ireq_half, as well as correct for mds-components [1:2], but replicated only once, so that each 'sector' is 90 degrees ;
if n_cov==5; Ireq=Ireq_half; Icat=Icat_full; mds_used_=[1:2]; mds_repl=2; end; % correct for study, requiring at least Ireq_half, as well as correct for mds-components [1:2], replicated twice, so that each 'sector' is 45 degrees ;
%%%%%%%%%%%%%%%% ;
dir__in = sprintf('%s/dir_%s',dir_trunk,string_prefix);
dir_out = sprintf('%s/dir_%s_analyze',dir_trunk,string_prefix);
if (verbose>1); disp(sprintf(' %% dir__in: %s',dir__in)); end;
if (verbose>1); disp(sprintf(' %% dir_out: %s',dir_out)); end;
flag_BD = 0;
lisa_xdropplot_loadtrace_ver1;
%%%%%%%%%%%%%%%%;
% Extract number 1. ;
%%%%%%%%%%%%%%%%;
string_name_1_s0000 = string_name_s0000;
tmpchar = sprintf('%s/%s_mc_A.b16',dir_out_s0000,string_name_s0000); mc_A_1 = tutorial_binary_uncompress(tmpchar)>0;
if (flag_reverse_1==0); mr_D_1_full = mr_A_full; end;
if (flag_reverse_1==1); mr_D_1_full = mr_Z_full; end;
out_xdrop_a_1_ = out_xdrop_a_; trace_1_ = trace_{1}; n_iteration_1 = size(trace_1_,1);
rdrop_a_1_ = rdrop_a_; cdrop_a_1_ = cdrop_a_;
n_r_rem_1_ = -diff([trace_1_(:,2);0]); n_c_rem_1_ = -diff([trace_1_(:,3);0]);
r_rem_1_ = cell(1+n_iteration_1,1); c_rem_1_ = cell(1+n_iteration_1,1);
r_rem_1_{1} = find(~mr_D_1_full); c_rem_1_{1} = find(~mc_A_1);
tmp_rsum = 0; tmp_csum = 0;
for ni=1:n_iteration_1;
r_rem_1_{1+ni} = rdrop_a_1_(tmp_rsum + (1:n_r_rem_1_(ni))); tmp_rsum = tmp_rsum + n_r_rem_1_(ni);
c_rem_1_{1+ni} = cdrop_a_1_(tmp_csum + (1:n_c_rem_1_(ni))); tmp_csum = tmp_csum + n_c_rem_1_(ni);
end;%for ni=1:n_iteration_1;
n_r_rem_1 = length(r_rem_1_{1}) + sum(n_r_rem_1_); n_c_rem_1 = length(c_rem_1_{1}) + sum(n_c_rem_1_);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
% select parameters used during analysis number 2. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
cl_num = cl_num_2;
flag_dex_vs_lak = flag_dex_vs_lak_2;
gamma = gamma_2;
B_MLT = B_MLT_2;
n_mds = n_mds_2;
flag_reverse = flag_reverse_2;
n_maf = n_maf_2;
n_cov = n_cov_2;
n_scramble = n_scramble_2;
n_shuffle = 0;
[study_trunk_,study_name_,n_study] = lisa_define_study_ver0(cl_num);
Ireq_half = floor(n_study/2); Icat_full = n_study;
string_prefix = sprintf('PGC_cl%d_maf01',cl_num);
%%%%%%%%%%%%%%%% ;
if n_maf==1; maf_lo_threshold = 0.01; maf_hi_threshold = 0.50; end; % all (since we thresholded maf at 0.01 to start with) ;
if n_maf==2; maf_lo_threshold = 0.01; maf_hi_threshold = 0.05; end; % extreme snps (differential expression only, no loop-counting later on) ;
if n_maf==3; maf_lo_threshold = 0.01; maf_hi_threshold = 0.10; end; % extreme snps (differential expression only, no loop-counting later on) ;
if n_maf==4; maf_lo_threshold = 0.10; maf_hi_threshold = 0.50; end; % more balanced snps (differential expression to start, as well as loop-counting later on) ;
if n_maf==5; maf_lo_threshold = 0.25; maf_hi_threshold = 0.50; end; % more balanced snps (differential expression to start, as well as loop-counting later on) ;
%%%%%%%%%%%%%%%% ;
if n_cov==0; Ireq=0; Icat=1; mds_used_=[]; mds_repl=0; end; % do not correct for mds-components ;
if n_cov==1; Ireq=0; Icat=1; mds_used_=[1:2]; mds_repl=1; end; % only correct for mds-components [1:2], but replicated only once, so that each 'sector' is 90 degrees ;
if n_cov==2; Ireq=0; Icat=1; mds_used_=[1:2]; mds_repl=2; end; % only correct for mds-components [1:2], but replicated twice, so that each 'sector' is 45 degrees ;
if n_cov==3; Ireq=Ireq_half; Icat=Icat_full; mds_used_=[]; mds_repl=0; end; % correct for study, requiring at least Ireq_half, but not for mds-components. ;
if n_cov==4; Ireq=Ireq_half; Icat=Icat_full; mds_used_=[1:2]; mds_repl=1; end; % correct for study, requiring at least Ireq_half, as well as correct for mds-components [1:2], but replicated only once, so that each 'sector' is 90 degrees ;
if n_cov==5; Ireq=Ireq_half; Icat=Icat_full; mds_used_=[1:2]; mds_repl=2; end; % correct for study, requiring at least Ireq_half, as well as correct for mds-components [1:2], replicated twice, so that each 'sector' is 45 degrees ;
%%%%%%%%%%%%%%%% ;
dir__in = sprintf('%s/dir_%s',dir_trunk,string_prefix);
dir_out = sprintf('%s/dir_%s_analyze',dir_trunk,string_prefix);
if (verbose>1); disp(sprintf(' %% dir__in: %s',dir__in)); end;
if (verbose>1); disp(sprintf(' %% dir_out: %s',dir_out)); end;
flag_BD = 0;
lisa_xdropplot_loadtrace_ver1;
%%%%%%%%%%%%%%%%;
% Extract number 2. ;
%%%%%%%%%%%%%%%%;
string_name_2_s0000 = string_name_s0000;
tmpchar = sprintf('%s/%s_mc_A.b16',dir_out_s0000,string_name_s0000); mc_A_2 = tutorial_binary_uncompress(tmpchar)>0;
if (flag_reverse_2==0); mr_D_2_full = mr_A_full; end;
if (flag_reverse_2==1); mr_D_2_full = mr_Z_full; end;
out_xdrop_a_2_ = out_xdrop_a_; trace_2_ = trace_{1}; n_iteration_2 = size(trace_2_,1);
rdrop_a_2_ = rdrop_a_; cdrop_a_2_ = cdrop_a_;
n_r_rem_2_ = -diff([trace_2_(:,2);0]); n_c_rem_2_ = -diff([trace_2_(:,3);0]);
r_rem_2_ = cell(1+n_iteration_2,1); c_rem_2_ = cell(1+n_iteration_2,1);
r_rem_2_{1} = find(~mr_D_2_full); c_rem_2_{1} = find(~mc_A_2);
tmp_rsum = 0; tmp_csum = 0;
for ni=1:n_iteration_2;
r_rem_2_{1+ni} = rdrop_a_2_(tmp_rsum + (1:n_r_rem_2_(ni))); tmp_rsum = tmp_rsum + n_r_rem_2_(ni);
c_rem_2_{1+ni} = cdrop_a_2_(tmp_csum + (1:n_c_rem_2_(ni))); tmp_csum = tmp_csum + n_c_rem_2_(ni);
end;%for ni=1:n_iteration_2;
n_r_rem_2 = length(r_rem_2_{1}) + sum(n_r_rem_2_); n_c_rem_2 = length(c_rem_2_{1}) + sum(n_c_rem_2_);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
% Now compute intersection number. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
disp(sprintf(' %% comparing %s to %s',string_name_1_s0000,string_name_2_s0000));
r_1_len_ = zeros(1+n_iteration_1,1); for ni=0:n_iteration_1; r_1_len_(1+ni) = length(r_rem_1_{1+ni}); end;%for ni=0:n_iteration_1;
c_1_len_ = zeros(1+n_iteration_1,1); for ni=0:n_iteration_1; c_1_len_(1+ni) = length(c_rem_1_{1+ni}); end;%for ni=0:n_iteration_1;
r_2_len_ = zeros(1+n_iteration_2,1); for ni=0:n_iteration_2; r_2_len_(1+ni) = length(r_rem_2_{1+ni}); end;%for ni=0:n_iteration_2;
c_2_len_ = zeros(1+n_iteration_2,1); for ni=0:n_iteration_2; c_2_len_(1+ni) = length(c_rem_2_{1+ni}); end;%for ni=0:n_iteration_2;
%%%%%%%%%%%%%%%%;
% slow ;
%%%%%%%%%%%%%%%%;
%{
if (verbose); tic; end;
r_cap_len__ = zeros(1+n_iteration_1,1+n_iteration_2); c_cap_len__ = zeros(1+n_iteration_1,1+n_iteration_2);
for ni1=0:n_iteration_1; disp(sprintf('ni1 %d/%d',ni1,n_iteration_1)); for ni2=0:n_iteration_2;
r_cap_len__(1+ni1,1+ni2) = length(intersect(r_rem_1_{1+ni1},r_rem_2_{1+ni2}));
c_cap_len__(1+ni1,1+ni2) = length(intersect(c_rem_1_{1+ni1},c_rem_2_{1+ni2}));
end;end;%for ni1=0:n_iteration_1; for ni2=0:n_iteration_2;
if (verbose); disp(sprintf(' %% slow method: %0.2f seconds',toc)); end;
 %}
%%%%%%%%%%%%%%%%;
% fast ;
%%%%%%%%%%%%%%%%;
if (verbose); tic; end;
tmp_r_1_ = [r_rem_1_{1} ; rdrop_a_1_]; tmp_c_1_ = [c_rem_1_{1} ; cdrop_a_1_];
tmp_r_2_ = [r_rem_2_{1} ; rdrop_a_2_]; tmp_c_2_ = [c_rem_2_{1} ; cdrop_a_2_];
[~,tmp_r_1_] = sort(tmp_r_1_); [~,tmp_c_1_] = sort(tmp_c_1_);
[~,tmp_r_2_] = sort(tmp_r_2_); [~,tmp_c_2_] = sort(tmp_c_2_);
tmp_r__ = sparse(tmp_r_1_,tmp_r_2_,1,n_r_rem_1,n_r_rem_2);
tmp_c__ = sparse(tmp_c_1_,tmp_c_2_,1,n_c_rem_1,n_c_rem_2);
%%%%%%%%;
tmp_r_1 = zeros(n_r_rem_1,1);
nr_1=0;
for ni_1=0:n_iteration_1;
tmp_1 = length(r_rem_1_{1+ni_1});
tmp_r_1(1+nr_1) = 1;
nr_1 = nr_1 + tmp_1;
end;%for ni_1=0:n_iteration_1;
tmp_r_1 = cumsum(tmp_r_1);
tmp_r_1_ = sparse(1:n_r_rem_1,tmp_r_1,1,n_r_rem_1,1+n_iteration_1);
%%%%%%%%;
tmp_c_1 = zeros(n_c_rem_1,1);
nc_1=0;
for ni_1=0:n_iteration_1;
if (verbose>1); disp(sprintf(' ni_1 %d/%d',ni_1,n_iteration_1)); end;
tmp_1 = length(c_rem_1_{1+ni_1});
tmp_c_1(1+nc_1) = 1;
nc_1 = nc_1 + tmp_1;
end;%for ni_1=0:n_iteration_1;
tmp_c_1 = cumsum(tmp_c_1);
tmp_c_1_ = sparse(1:n_c_rem_1,tmp_c_1,1,n_c_rem_1,1+n_iteration_1);
%%%%%%%%;
tmp_r_2 = zeros(n_r_rem_2,1);
nr_2=0;
for ni_2=0:n_iteration_2;
tmp_2 = length(r_rem_2_{1+ni_2});
tmp_r_2(1+nr_2) = 1;
nr_2 = nr_2 + tmp_2;
end;%for ni_2=0:n_iteration_2;
tmp_r_2 = cumsum(tmp_r_2);
tmp_r_2_ = sparse(1:n_r_rem_2,tmp_r_2,1,n_r_rem_2,1+n_iteration_2);
%%%%%%%%;
tmp_c_2 = zeros(n_c_rem_2,1);
nc_2=0;
for ni_2=0:n_iteration_2;
if (verbose>1); disp(sprintf(' ni_2 %d/%d',ni_2,n_iteration_2)); end;
tmp_2 = length(c_rem_2_{1+ni_2});
tmp_c_2(1+nc_2) = 1;
nc_2 = nc_2 + tmp_2;
end;%for ni_2=0:n_iteration_2;
tmp_c_2 = cumsum(tmp_c_2);
tmp_c_2_ = sparse(1:n_c_rem_2,tmp_c_2,1,n_c_rem_2,1+n_iteration_2);
%%%%%%%%;
r_cap_len__ = transpose(tmp_r_1_)*tmp_r__*tmp_r_2_;
c_cap_len__ = transpose(tmp_c_1_)*tmp_c__*tmp_c_2_;
%%%%%%%%;
if (verbose); disp(sprintf(' %% fast method: %0.2f seconds',toc)); end;
%%%%%%%%%%%%%%%%;

%%%%%%%%%%%%%%%%;
% Now calculation intersection fraction. ;
%%%%%%%%%%%%%%%%;
n_r_full = max(length(mr_D_1_full),length(mr_D_2_full)); n_c_full = max(length(mc_A_1),length(mc_A_2));
r_cap_ss__ = cumsum(cumsum(r_cap_len__,1),2); c_cap_ss__ = cumsum(cumsum(c_cap_len__,1),2);
r_rmv_1__ = repmat(cumsum(r_1_len_),1,1+n_iteration_2);
r_rmv_2__ = repmat(transpose(cumsum(r_2_len_)),1+n_iteration_1,1);
r_rtn_1__ = n_r_full - r_rmv_1__;
r_rtn_2__ = n_r_full - r_rmv_2__;
r_rtn__ = n_r_full - r_rmv_1__ - r_rmv_2__ + r_cap_ss__;
c_rmv_1__ = repmat(cumsum(c_1_len_),1,1+n_iteration_2);
c_rmv_2__ = repmat(transpose(cumsum(c_2_len_)),1+n_iteration_1,1);
c_rtn_1__ = n_c_full - c_rmv_1__;
c_rtn_2__ = n_c_full - c_rmv_2__;
c_rtn__ = n_c_full - c_rmv_1__ - c_rmv_2__ + c_cap_ss__;
r_rtn_min__ = n_r_full - max(r_rmv_1__,r_rmv_2__);
r_rtn_avg__ = max( r_rtn_1__/(n_r_full - r_1_len_(1)) , r_rtn_2__/(n_r_full - r_2_len_(1)) );
r_rtn_f__ = r_rtn__ ./ r_rtn_min__ ;
c_rtn_avg__ = max( c_rtn_1__/(n_c_full - c_1_len_(1)) , c_rtn_2__/(n_c_full - c_2_len_(1)) );
c_rtn_min__ = n_c_full - max(c_rmv_1__,c_rmv_2__);
c_rtn_f__ = c_rtn__ ./ c_rtn_min__ ;
figure(1);clf;
colormap('hot');
subplot(2,2,1); imagesc(r_rtn_f__,[0,1]); colorbar;
axis square;
%set(gca,'Xtick',[],'Ytick',[]); 
xlabel(string_name_2_s0000,'Interpreter','none'); 
ylabel(string_name_1_s0000,'Interpreter','none'); 
title('row retain fraction vs iteration');
subplot(2,2,2); imagesc(c_rtn_f__,[0,1]); colorbar;
axis square;
%set(gca,'Xtick',[],'Ytick',[]); 
xlabel(string_name_2_s0000,'Interpreter','none'); 
ylabel(string_name_1_s0000,'Interpreter','none'); 
title('col retain fraction vs iteration');
colormap(colormap_beach(64));
subplot(2,2,3); imagesc(log(r_rtn_f__./r_rtn_avg__),[-2,+2]); colorbar;
axis square;
%set(gca,'Xtick',[],'Ytick',[]); 
xlabel(string_name_2_s0000,'Interpreter','none'); 
ylabel(string_name_1_s0000,'Interpreter','none'); 
title('log(row retain / expected)');
subplot(2,2,4); imagesc(log(c_rtn_f__./c_rtn_avg__),[-2,+2]); colorbar;
axis square;
%set(gca,'Xtick',[],'Ytick',[]); 
xlabel(string_name_2_s0000,'Interpreter','none'); 
ylabel(string_name_1_s0000,'Interpreter','none'); 
title('log(col retain / expected)');
set(gcf,'Position',1+[0,0,1024*1.5,768]);
%%%%%%%%%%%%%%%%;
