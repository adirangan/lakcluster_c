function [mr_A_prm_,mr_Z_prm_] = xxxcluster_uADZSZDA_shuffle_ver2(shuffle_num,M_n_rows_,M_n_cols,A_n_rind_,A_n_cind,Z_n_rind_,T_n_cols,T_n_,T_n_cind);
% creates shuffled row masks respecting categorical-covariates and continuous-covariate sectors ;
% test with: ;
%{
  xxxcluster_uADZSZDA_shuffle_ver2();
  %}

if (nargin<1);
clear A_n_rind_ Z_n_rind_ T_n_  ;
n_study = 3;
M_n_ = cell(n_study,1);
M_n_rows_ = zeros(n_study,1);
M_n_cols = 1;
A_n_rind_ = cell(3,1);
Z_n_rind_ = cell(3,1);
T_n_ = cell(3,1);
A_n_cind = [1];
T_n_cols = 20; T_n_cind = [1,3,7];
%T_n_cols = 1; T_n_cind = [1];
n_sector = 2^(length(T_n_cind)-1); %first dimension of T_n_ is a dummy. ;
for (nstudy=1:n_study);
M_n_rows_(nstudy) = 128*(nstudy);
T_n_{nstudy} = 2*(randn(128*(nstudy),T_n_cols)>0)-1; 
T_n_{nstudy}(:,1) = 1;
prm = randperm(M_n_rows_(nstudy));
lA = round(M_n_rows_(nstudy)/3);
lZ = round(M_n_rows_(nstudy)/2);
A_n_rind_{nstudy} = prm(1:lA);
Z_n_rind_{nstudy} = prm(lA + (1:lZ));
M_n_{nstudy}(A_n_rind_{nstudy},1) = 2*(nstudy-1) + 0; % First column of M_n_ holds 2*bin-number + (A or Z). ;
T_tmp = T_n_{nstudy}(A_n_rind_{nstudy},T_n_cind(2:end)); 
A_sector_{nstudy} = (T_tmp>0)*transpose(2.^[0:length(T_n_cind(2:end))-1]);
M_n_{nstudy}(A_n_rind_{nstudy},2) = A_sector_{nstudy}; % Second column of M_n_ holds sector-number. ;
M_n_{nstudy}(Z_n_rind_{nstudy},1) = 2*(nstudy-1) + 1; % First column of M_n_ holds 2*bin-number + (A or Z). ;
T_tmp = T_n_{nstudy}(Z_n_rind_{nstudy},T_n_cind(2:end)); 
Z_sector_{nstudy} = (T_tmp>0)*transpose(2.^[0:length(T_n_cind(2:end))-1]);
M_n_{nstudy}(Z_n_rind_{nstudy},2) = Z_sector_{nstudy}; % Second column of M_n_ holds sector-number. ;
end;%for (nstudy=1:n_study);
shuffle_num = 1;
[mr_A_prm_,mr_Z_prm_] = xxxcluster_uADZSZDA_shuffle_ver2(shuffle_num,M_n_rows_,M_n_cols,A_n_rind_,A_n_cind,Z_n_rind_,T_n_cols,T_n_,T_n_cind);
prows = 4;
for nstudy=1:n_study;
lM = M_n_rows_(nstudy);
lA = length(A_n_rind_{nstudy});
lZ = length(Z_n_rind_{nstudy});
A_p_rind_{nstudy} = find(mr_A_prm_{nstudy}); Z_p_rind_{nstudy} = find(mr_Z_prm_{nstudy});
b_ = 0:2*n_study-1;
s_ = 0:n_sector-1; if (n_sector==1); s_ = [-1:+1]; end;
h_tmp = [hist(M_n_{nstudy}(A_n_rind_{nstudy},1),b_) ; hist(M_n_{nstudy}(A_p_rind_{nstudy},1),b_)]; % First column of subplots shows A-label pre- and post-permutation. ;
subplot(n_study,prows,1 + (nstudy-1)*prows); bar(b_,transpose(h_tmp)); title(sprintf('A-label nstudy %d',nstudy));
h_tmp = [hist(M_n_{nstudy}(A_n_rind_{nstudy},2),s_) ; hist(M_n_{nstudy}(A_p_rind_{nstudy},2),s_)]; % Second column of subplots shows A-sector pre- and post-permutation. ;
subplot(n_study,prows,2 + (nstudy-1)*prows); bar(s_,transpose(h_tmp)); title(sprintf('A-sector nstudy %d',nstudy));
h_tmp = [hist(M_n_{nstudy}(Z_n_rind_{nstudy},1),b_) ; hist(M_n_{nstudy}(Z_p_rind_{nstudy},1),b_)]; % Third column of subplots shows Z-label pre- and post-permutation. ;
subplot(n_study,prows,3 + (nstudy-1)*prows); bar(b_,transpose(h_tmp)); title(sprintf('Z-label nstudy %d',nstudy));
h_tmp = [hist(M_n_{nstudy}(Z_n_rind_{nstudy},2),s_) ; hist(M_n_{nstudy}(Z_p_rind_{nstudy},2),s_)]; % Fourth column of subplots shows Z-sector pre- and post-permutation. ;
subplot(n_study,prows,4 + (nstudy-1)*prows); bar(s_,transpose(h_tmp)); title(sprintf('Z-sector nstudy %d',nstudy));
end;%for nstudy=1:n_study;
disp(sprintf('returning')); return;
end;%if (nargin<1);

n_study = length(M_n_rows_);
flag_error = xxxcluster_uADZSZDA_check_ver1(M_n_rows_,M_n_cols,A_n_rind_,A_n_cind,Z_n_rind_,T_n_cols,T_n_,T_n_cind); 
if (flag_error); disp(sprintf(' %% Warning! incorrect dimensions in xxxcluster_uADZSZDA_shuffle_ver2')); return; end;

for nstudy=1:n_study;
mr_M = zeros(M_n_rows_(nstudy),1);
mr_A_ori_{nstudy} = mr_M; mr_A_ori_{nstudy}(A_n_rind_{nstudy})=1;
mr_Z_ori_{nstudy} = mr_M; mr_Z_ori_{nstudy}(Z_n_rind_{nstudy})=1;
mr_A_prm_{nstudy} = mr_A_ori_{nstudy};
mr_Z_prm_{nstudy} = mr_Z_ori_{nstudy};
end;%for nstudy=1:n_study;

if (shuffle_num>0); % performing covariate-respecting shuffle ;
rng(shuffle_num); 
for nstudy=1:n_study;
mr_M_tmp = zeros(M_n_rows_(nstudy),1); mr_M_tmp(A_n_rind_{nstudy})=1; mr_M_tmp(Z_n_rind_{nstudy})=1;
disp_flag=0;
if disp_flag; disp(sprintf(' %% nstudy %d, sum(mr_M_tmp) %d',nstudy,sum(mr_M_tmp)));
end;%disp_flag=0;
mr_M__on = find(mr_M_tmp);
T_tmp = T_n_{nstudy}(mr_M__on,T_n_cind(2:end)); n_sector = 2^(length(T_n_cind)-1);
M_sector_{nstudy} = (T_tmp>0)*transpose(2.^[0:length(T_n_cind)-2]);
for nsector=0:n_sector-1; 
sec_rij_{1+nsector} = find(M_sector_{nstudy}==nsector);
mr_X_tmp_{1+nsector} = zeros(M_n_rows_(nstudy),1); mr_X_tmp_{1+nsector}(mr_M__on(sec_rij_{1+nsector}))=1;
end;%for nsector=0:n_sector-1; 
for nsector=0:n_sector-1;
lA_(1+nsector) = length(intersect(A_n_rind_{nstudy},find(mr_X_tmp_{1+nsector})));
lZ_(1+nsector) = length(intersect(Z_n_rind_{nstudy},find(mr_X_tmp_{1+nsector})));
prm_{1+nsector} = randperm(length(sec_rij_{1+nsector}));
prm_A_{1+nsector} = sec_rij_{1+nsector}(prm_{1+nsector}(1:lA_(1+nsector))); 
prm_Z_{1+nsector} = sec_rij_{1+nsector}(prm_{1+nsector}(lA_(1+nsector) + (1:lZ_(1+nsector))));
end;%for nsector=0:n_sector-1;
mr_A_prm_{nstudy} = zeros(M_n_rows_(nstudy),1); mr_Z_prm_{nstudy} = zeros(M_n_rows_(nstudy),1);
for nsector=0:n_sector-1;
mr_A_prm_{nstudy}(mr_M__on(prm_A_{1+nsector}))=1; mr_Z_prm_{nstudy}(mr_M__on(prm_Z_{1+nsector}))=1;
end;%for nsector=0:n_sector-1;
disp_flag=0;
if disp_flag;
tmp_A_prm = find(mr_A_prm_{nstudy}); tmp_Z_prm = find(mr_Z_prm_{nstudy});
for nsector=0:n_sector-1; 
lA_prm_(1+nsector) = length(intersect(tmp_A_prm,find(mr_X_tmp_{1+nsector}))); 
lZ_prm_(1+nsector) = length(intersect(tmp_Z_prm,find(mr_X_tmp_{1+nsector}))); 
lX_prm_(1+nsector) = length(intersect(tmp_A_prm,tmp_Z_prm));
end;%for nsector=0:n_sector-1;
disp(sprintf(' %% shuffle: nstudy %d',nstudy));
disp([lA_ ; lA_prm_ ; lZ_ ; lZ_prm_ ; lX_prm_]); 
disp(sprintf(' %% mr_A_prm %d/%d; mr_Z_prm %d/%d',sum(mr_A_prm_{nstudy}),length(A_n_rind_{nstudy}),sum(mr_Z_prm_{nstudy}),length(Z_n_rind_{nstudy})));
end;% if disp_flag;
end;%for nstudy=1:n_study;
end;% if (shuffle_num>0); % performing covariate-respecting shuffle ;
