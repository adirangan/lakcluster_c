function ...
label_tree ...
= ...
label_to_tree_0( ...
 depth ...
,label_string ...
,item_index_ ...
,output_label_untouched_ ...
,output_label_ ...
,nlpbra_label_ ...
,nlpnex_label_ ...
);

label_tree = struct('type','label_tree');
label_tree.depth = depth;
label_tree.label_string = label_string;
label_tree.parent = [];
label_tree.item_index_ = item_index_;
label_tree.nlpbra = 0;
label_tree.nlpnex = 0;
label_tree.childA = [];
label_tree.childB = [];

n_item = numel(item_index_);
assert(numel(output_label_)==n_item);
assert(numel(nlpbra_label_)==n_item);
assert(numel(nlpnex_label_)==n_item);
output_label_start_ = cell(n_item,1);
output_label_final_ = cell(n_item,1);
nlpbra_label_start_ = cell(n_item,1);
nlpbra_label_final_ = cell(n_item,1);
nlpnex_label_start_ = cell(n_item,1);
nlpnex_label_final_ = cell(n_item,1);
for nitem=0:n_item-1;
output_label_start_{1+nitem} = output_label_{1+nitem}(1);
output_label_final_{1+nitem} = output_label_{1+nitem}(2:end);
nlpbra_label = nlpbra_label_{1+nitem};
nlpbra_ij = min(strfind(nlpbra_label,' '));
if ~isempty(nlpbra_ij);
nlpbra_label_start_{1+nitem} = nlpbra_label_{1+nitem}(1:nlpbra_ij-1);
nlpbra_label_final_{1+nitem} = nlpbra_label_{1+nitem}(nlpbra_ij+1:end);
end;%if ~isempty(nlpbra_ij);
nlpnex_label = nlpnex_label_{1+nitem};
nlpnex_ij = min(strfind(nlpnex_label,' '));
if ~isempty(nlpnex_ij);
nlpnex_label_start_{1+nitem} = nlpnex_label_{1+nitem}(1:nlpnex_ij-1);
nlpnex_label_final_{1+nitem} = nlpnex_label_{1+nitem}(nlpnex_ij+1:end);
end;%if ~isempty(nlpnex_ij);
end;%for nitem=0:n_item-1;
tmp_index_A_ = efind(strcmp(output_label_start_,'A'));
tmp_index_B_ = efind(strcmp(output_label_start_,'B'));
tmp_index_0_ = efind(strcmp(output_label_start_,'0'));
n_item_A = numel(tmp_index_A_);
n_item_B = numel(tmp_index_B_);
n_item_0 = numel(tmp_index_0_);
if (n_item_A> 0 & n_item_B> 0); assert(n_item_0==0); end;
if (n_item_0> 0);
assert( (n_item_A==0) & (n_item_B==0) );
label_string_0 = sprintf('%s0',label_string);
assert(numel(strcmp(output_label_untouched_,label_string_0))==n_item);
end;%if (n_item_0> 0);
if (n_item_0> 0);
% do nothing. ;
end;%if (n_item_0> 0);
if ( (n_item_A> 0) & (n_item_B> 0) );
assert(numel(unique(nlpbra_label_start_))==1);
assert(numel(unique(nlpnex_label_start_))==1);
label_tree.nlpbra = nlpbra_label_start_(1);
label_tree.nlpnex = nlpnex_label_start_(1);
label_tree.childA ...
= ...
label_to_tree_0( ...
 depth+1 ...
,sprintf('%sA',label_string) ...
,item_index_(1+tmp_index_A_) ...
,output_label_untouched_(1+tmp_index_A_) ...
,output_label_final_(1+tmp_index_A_) ...
,nlpbra_label_final_(1+tmp_index_A_) ...
,nlpnex_label_final_(1+tmp_index_A_) ...
);
label_tree.childA.parent = label_tree;
label_tree.childB ...
= ...
label_to_tree_0( ...
 depth+1 ...
,sprintf('%sB',label_string) ...
,item_index_(1+tmp_index_B_) ...
,output_label_untouched_(1+tmp_index_B_) ...
,output_label_final_(1+tmp_index_B_) ...
,nlpbra_label_final_(1+tmp_index_B_) ...
,nlpnex_label_final_(1+tmp_index_B_) ...
);
label_tree.childB.parent = label_tree;
end;%if ( (n_item_A> 0) & (n_item_B> 0) );

