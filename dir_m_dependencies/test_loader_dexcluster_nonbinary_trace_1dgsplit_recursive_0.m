function test_loader_dexcluster_nonbinary_trace_1dgsplit_recursive_0(dir_out,prefix_base,E_array_base_,E_array_r_ij_,E_array_c_ij_,gamma,n_shuffle,p_set);
%{
  
  try this: ;

  %%%%%%%%;
  setup;
  str_ntype = 'limp';
  str_ctype = '000';
  n_col_ = [6];%n_col_ = [1:6];
  dir_trunk = sprintf('/data/rangan/dir_bcc/dir_jamison');
  [n_u,CLabel_sub_] = test_loader_helper_CLabel_sub_(dir_trunk);
  %%%%%%%%;
  E_xxxx_ = textread(sprintf('%s/dir_mat/E_%s_.tsv',dir_trunk,str_ntype)); E_xxxx_ = E_xxxx_(:,1:end-1);
  if ( strcmp(str_ctype,'000'));
  prefix = sprintf('E_%s_c%s',str_ntype,str_ctype); 
  prefix_base = prefix; gamma = 0.01; n_shuffle = 64; dir_out = []; E_array_base_ = E_xxxx_; E_array_r_ij_ = []; E_array_c_ij_ = []; p_set = [];
  test_loader_dexcluster_nonbinary_trace_1dgsplit_recursive_0([],prefix_base,E_xxxx_,[],[],gamma,n_shuffle,[]);
  end;%if ( strcmp(str_ctype,'000'));
  if (~strcmp(str_ctype,'000'));
  C_rank_cxxx_ = textread(sprintf('%s/dir_mat/C_rank_c%s_.tsv',dir_trunk,str_ctype)); C_rank_cxxx_ = C_rank_cxxx_(:,1:end-1);
  [E_xxxx_cxxx_beta_un_,E_xxxx_cxxx_beta_vn_,n_E_xxxx_cxxx_beta,E_xxxx_cxxx_zeta_un_,E_xxxx_cxxx_zeta_vn_,n_E_xxxx_cxxx_zeta] = test_loader_lm_RRR_E_0(C_rank_cxxx_,E_xxxx_,dir_trunk,sprintf('%s_c%s',str_ntype,str_ctype));
  for ncol_=1:length(n_col_);
  n_col = n_col_(ncol_);
  E_xxxx_cxxx_ = E_xxxx_ - [ (ones(n_u,1)*E_xxxx_cxxx_zeta_un_(1,1:n_col) + C_rank_cxxx_*E_xxxx_cxxx_zeta_un_(2:end,1:n_col))*transpose(E_xxxx_cxxx_zeta_vn_(:,1:n_col)) ]; %<-- correct for linear effect of covariates. ;
  prefix = sprintf('E_%s_c%sr%d',str_ntype,str_ctype,n_col); 
  prefix_base = prefix; gamma = 0.01; n_shuffle = 64; dir_out = []; E_array_base_ = E_xxxx_cxxx_; E_array_r_ij_ = []; E_array_c_ij_ = []; p_set = [];
  test_loader_dexcluster_nonbinary_trace_1dgsplit_recursive_0([],prefix_base,E_xxxx_cxxx_,[],[],gamma,n_shuffle,[]);
  %clear E_xxxx_cxxx_ ;
  end;%for ncol_=1:length(n_col_);
  end;%if (~strcmp(str_ctype,'000'));
  %clear E_xxxx_ ;
  %%%%%%%%;

  %%%%%%%%;
  setup;
  str_ntype = 'limp';
  str_ctype = '000';
  n_col_ = [6];%n_col_ = [1:6];
  dir_trunk = sprintf('/data/rangan/dir_bcc/dir_jamison');
  [n_u,CLabel_sub_] = test_loader_helper_CLabel_sub_(dir_trunk);
  %%%%%%%%;
  I_xxxx_ = textread(sprintf('%s/dir_mat/I_%s_.tsv',dir_trunk,str_ntype)); I_xxxx_ = I_xxxx_(:,1:end-1);
  if ( strcmp(str_ctype,'000'));
  prefix = sprintf('I_%s_c%s',str_ntype,str_ctype); 
  prefix_base = prefix; gamma = 0.01; n_shuffle = 64; dir_out = []; I_array_base_ = I_xxxx_; I_array_r_ij_ = []; I_array_c_ij_ = []; p_set = [];
  test_loader_dexcluster_nonbinary_trace_1dgsplit_recursive_0([],prefix_base,I_xxxx_,[],[],gamma,n_shuffle,[]);
  end;%if ( strcmp(str_ctype,'000'));
  if (~strcmp(str_ctype,'000'));
  C_rank_cxxx_ = textread(sprintf('%s/dir_mat/C_rank_c%s_.tsv',dir_trunk,str_ctype)); C_rank_cxxx_ = C_rank_cxxx_(:,1:end-1);
  [I_xxxx_cxxx_beta_un_,I_xxxx_cxxx_beta_vn_,n_I_xxxx_cxxx_beta,I_xxxx_cxxx_zeta_un_,I_xxxx_cxxx_zeta_vn_,n_I_xxxx_cxxx_zeta] = test_loader_lm_RRR_I_0(C_rank_cxxx_,I_xxxx_,dir_trunk,sprintf('%s_c%s',str_ntype,str_ctype));
  for ncol_=1:length(n_col_);
  n_col = n_col_(ncol_);
  I_xxxx_cxxx_ = I_xxxx_ - [ (ones(n_u,1)*I_xxxx_cxxx_zeta_un_(1,1:n_col) + C_rank_cxxx_*I_xxxx_cxxx_zeta_un_(2:end,1:n_col))*transpose(I_xxxx_cxxx_zeta_vn_(:,1:n_col)) ]; %<-- correct for linear effect of covariates. ;
  prefix = sprintf('I_%s_c%sr%d',str_ntype,str_ctype,n_col); 
  prefix_base = prefix; gamma = 0.01; n_shuffle = 64; dir_out = []; I_array_base_ = I_xxxx_cxxx_; I_array_r_ij_ = []; I_array_c_ij_ = []; p_set = [];
  test_loader_dexcluster_nonbinary_trace_1dgsplit_recursive_0([],prefix_base,I_xxxx_cxxx_,[],[],gamma,n_shuffle,[]);
  %clear I_xxxx_cxxx_ ;
  end;%for ncol_=1:length(n_col_);
  end;%if (~strcmp(str_ctype,'000'));
  %clear I_xxxx_ ;
  %%%%%%%%;

%}

verbose=2;
if (isempty(E_array_r_ij_)); E_array_r_ij_ = 1:size(E_array_base_,1); end;
if (isempty(E_array_c_ij_)); E_array_c_ij_ = 1:size(E_array_base_,2); end;
if (isempty(gamma)); gamma = 0.01; end;
if (isempty(n_shuffle)); n_shuffle = 64; end;
if (isempty(p_set)); p_set = 0.05; end;

n_u = size(E_array_base_(E_array_r_ij_,:),1); n_g = size(E_array_base_(E_array_r_ij_,E_array_c_ij_),2);
dir_code = '/data/rangan/dir_bcc/dir_lakcluster_c_dev'; dir_trunk = pwd;
rev_flag = 0; A_n_rind_ = {[1:n_u]}; A_n_cind = 1:n_g; Z_n_rind_ = {[]}; T_n_ = {ones(n_u,1)}; T_n_cind = 1;
GLOBAL_TEST_sparse = 0; B_MLT = 0; Ireq = 0;  verbose_flag = 0; flag_force_create = 0; flag_force_fig = 0;
%%%%%%%%;
if (isempty(dir_out));
if (verbose>1); disp(sprintf(' %% dir_out not provided, constructing.')); end;
shuffle_num=0;
test_string = sprintf('%s_%s',prefix_base,xxxcluster_uADZSZDA_xfix_gen_ver1('dexnb_trace',rev_flag,A_n_rind_,Z_n_rind_,T_n_cind,GLOBAL_TEST_sparse,gamma,B_MLT,Ireq,shuffle_num));
if (verbose>1); disp(sprintf(' test_string: %s',test_string)); end;
dir_0in = sprintf('%s/dir_%s',dir_trunk,prefix_base);
if (verbose>1); disp(sprintf(' dir_0in: %s',dir_0in)); end;
if (~exist(dir_0in,'dir')); disp(sprintf(' %% mkdir %s',dir_0in)); mkdir(dir_0in); end;
dir_out = sprintf('%s/dir_%s',dir_0in,test_string); 
if (verbose>1); disp(sprintf(' dir_out: %s',dir_out)); end;
end;%if (isempty(dir_out));
if (verbose>0); disp(sprintf(' %% [entering test_loader_dexcluster_nonbinary_trace_1dgsplit_recursive_0]: dir_out %s',dir_out)); end;
if (~exist(dir_out,'dir')); disp(sprintf(' %% mkdir %s',dir_out)); mkdir(dir_out); end;

str_base = sprintf('%s/base.mat',dir_out);
if (~exist(str_base,'file'));
if (verbose>1); disp(sprintf(' %% %s not found, creating',str_base)); end;
save(str_base,'E_array_r_ij_','E_array_c_ij_','gamma','n_shuffle','prefix_base','dir_out','p_set');
end;%if (~exist(str_base,'file'));

dir_trace = sprintf('%s/dir_trace',dir_out); 
if (~exist(dir_trace,'dir')); disp(sprintf(' %% mkdir %s',dir_trace)); mkdir(dir_trace); end;
dir_jpg = sprintf('%s/dir_jpg',dir_out); 
if (~exist(dir_jpg,'dir')); disp(sprintf(' %% mkdir %s',dir_jpg)); mkdir(dir_jpg); end;

%%%%%%%%;
shuffle_num=0;
str_trace = sprintf('%s/out_trace_s%.4d.txt',dir_trace,shuffle_num);
str_xdrop = sprintf('%s/out_xdrop_a.txt',dir_out);
if (exist(str_trace,'file') & ~flag_force_create);
if (verbose>1); disp(sprintf(' %% %s found, not creating',str_trace)); end;
out_trace_E_0_ = textread(str_trace);
end;%if (exist(str_trace,'file') & ~flag_force_create);
if (~(exist(str_trace,'file')) |  flag_force_create);
if (verbose>1); disp(sprintf(' %% %s not found, creating',str_trace)); end;
L_array_ = mean_center_0(E_array_base_(E_array_r_ij_,E_array_c_ij_));
[out_xdrop_E_0_,out_trace_E_0_] = dexcluster_nonbinary_AAAA_ver0(L_array_,gamma);
rdrop_E_0_ = 1+out_xdrop_E_0_(find(out_xdrop_E_0_(:,1)>-1),1); rkeep_E_0_ = rdrop_E_0_(end:-1:1);
cdrop_E_0_ = 1+out_xdrop_E_0_(find(out_xdrop_E_0_(:,2)>-1),2); ckeep_E_0_ = cdrop_E_0_(end:-1:1);
n_iter_ = out_trace_E_0_(:,1); r_rem_ = out_trace_E_0_(:,2); c_rem_ = out_trace_E_0_(:,3);
rkeep_E_0_ij_ = r_rem_(end:-1:1); ckeep_E_0_ij_ = c_rem_(end:-1:1);
clear L_array_;
fp=fopen(str_trace,'w');
fprintf(fp,'%d %d %d %0.16f %0.16f %d\n',transpose(out_trace_E_0_));
fclose(fp);
fp=fopen(str_xdrop,'w');
fprintf(fp,'%d %d\n',transpose(out_xdrop_E_0_));
fclose(fp);
end;%if (~(exist(str_trace,'file')) |  flag_force_create);
%%%%%%%%;
tmp_p_ = randperm(n_shuffle);
for nshuffle=1:n_shuffle;
shuffle_num = tmp_p_(nshuffle);
str_trace = sprintf('%s/out_trace_s%.4d.txt',dir_trace,shuffle_num); 
if ( (exist(str_trace,'file')) & ~flag_force_create);
if (verbose>1); disp(sprintf(' %% %s found, not creating',str_trace)); end;
end;%if ( (exist(str_trace,'file')) & ~flag_force_create);
if (~(exist(str_trace,'file')) |  flag_force_create);
if (verbose>1); disp(sprintf(' %% %d/%d: %s not found, creating',nshuffle,n_shuffle,str_trace)); end;
rng(nshuffle); [tmp_Q_,~] = qr(randn(n_u));
L_array_ = mean_center_0(tmp_Q_*mean_center_0(E_array_base_(E_array_r_ij_,E_array_c_ij_)));
[out_xdrop_E_0_,out_trace_E_0_] = dexcluster_nonbinary_AAAA_ver0(L_array_,gamma);
rdrop_E_0_ = 1+out_xdrop_E_0_(find(out_xdrop_E_0_(:,1)>-1),1); rkeep_E_0_ = rdrop_E_0_(end:-1:1);
cdrop_E_0_ = 1+out_xdrop_E_0_(find(out_xdrop_E_0_(:,2)>-1),2); ckeep_E_0_ = cdrop_E_0_(end:-1:1);
n_iter_ = out_trace_E_0_(:,1); r_rem_ = out_trace_E_0_(:,2); c_rem_ = out_trace_E_0_(:,3);
rkeep_E_0_ij_ = r_rem_(end:-1:1); ckeep_E_0_ij_ = c_rem_(end:-1:1);
clear tmp_Q_ L_array_;
fp=fopen(str_trace,'w');
fprintf(fp,'%d %d %d %0.16f %0.16f %d\n',transpose(out_trace_E_0_));
fclose(fp);
end;%if (~(exist(str_trace,'file')) |  flag_force_create);
end;%for nshuffle=1:n_shuffle;
%%%%%%%%;

%%%%%%%%;
str_branch = sprintf('%s/branch.mat',dir_out);
if ( exist(str_branch,'file'));
load(str_branch);
end;%if ( exist(str_branch,'file'));
if (~exist(str_branch,'file'));
if (verbose>1); disp(sprintf(' %% %s not found, creating',str_branch)); end;
%%%%%%%%;
str_xdrop = sprintf('%s/out_xdrop_a.txt',dir_out);
fcheck(str_xdrop);
out_xdrop_E_0_ = textread(str_xdrop);
rdrop_E_0_ = 1+out_xdrop_E_0_(find(out_xdrop_E_0_(:,1)>-1),1); rkeep_E_0_ = rdrop_E_0_(end:-1:1);
cdrop_E_0_ = 1+out_xdrop_E_0_(find(out_xdrop_E_0_(:,2)>-1),2); ckeep_E_0_ = cdrop_E_0_(end:-1:1);
%%%%%%%%;
trace_ = cell(1+n_shuffle,1);
for nshuffle=0:n_shuffle;
fcheck(sprintf('%s/out_trace_s%0.4d.txt',dir_trace,nshuffle));
trace_{1+nshuffle} = textread(sprintf('%s/out_trace_s%0.4d.txt',dir_trace,nshuffle));
end;%for nshuffle=1:n_shuffle;
trace_s0000_ = trace_{1};
QR_ = zeros(size(trace_s0000_,1),1+n_shuffle);
QC_ = zeros(size(trace_s0000_,1),1+n_shuffle);
for nshuffle=0:n_shuffle;
tmp_d = min(length(trace_s0000_(:,1)),length(trace_{1+nshuffle}(:,1)));
QR_(1:tmp_d,1+nshuffle) = trace_{1+nshuffle}(1:tmp_d,4);
QC_(1:tmp_d,1+nshuffle) = trace_{1+nshuffle}(1:tmp_d,5);
end;%for nshuffle=1:n_shuffle;
n_iter_ = trace_s0000_(:,1); n_iteration = n_iter_(end);
r_rem_ = trace_s0000_(:,2);
c_rem_ = trace_s0000_(:,3);
%%%%%%%%;
QR_avg_ = mean(QR_(:,2:end),2); QR_std_ = std(QR_(:,2:end),[],2);
ZR_ = (QR_ - repmat(QR_avg_,1,1+n_shuffle))./repmat(QR_std_,1,1+n_shuffle);
QC_avg_ = mean(QC_(:,2:end),2); QC_std_ = std(QC_(:,2:end),[],2);
ZC_ = (QC_ - repmat(QC_avg_,1,1+n_shuffle))./repmat(QC_std_,1,1+n_shuffle);
%%%%%%%%;
lp_R_ = z_to_p_0(ZR_); lp_C_ = z_to_p_0(ZC_);
[~,ZR_ij] = max(-lp_R_(:,1));

tmp_r_rem_cut = r_rem_(ZR_ij); tmp_c_rem_cut = c_rem_(ZR_ij); n_rank = 2;
L_array_ = mean_center_0(E_array_base_(E_array_r_ij_,E_array_c_ij_));
[tmp_U_,~,tmp_V_] = svds( L_array_(rkeep_E_0_(1:tmp_r_rem_cut),ckeep_E_0_(1:tmp_c_rem_cut)) ,n_rank);
tmp_E1_pos_ = L_array_(:,ckeep_E_0_(1:tmp_c_rem_cut))*tmp_V_; %<-- original. ;
tmp_label_ = zeros(n_u,1); tmp_label_(rkeep_E_0_(1:tmp_r_rem_cut)) = 1;
scatter(tmp_E1_pos_(:,1),tmp_E1_pos_(:,2),25,tmp_label_);

[tmp_s,~,~,tmp_llr,~,~] = gsplit(tmp_E1_pos_);
tmp_hv_ = linspace(min(tmp_data_0_),max(tmp_data_0_),128);
tmp_h_ = hist(tmp_data_0_,tmp_hv_);
hold on; bar(tmp_hv_,tmp_h_); plot(tmp_s*[1,1],[0,max(tmp_h_)],'r-'); hold off;


%%%%%%%%;
[ZR_p_s0000,ZR_p_s0000_] = test_loader_xxxcluster_Z_to_p_0(gamma,trace_);
%%%%%%%%;
if n_iteration>1;
str_fig = sprintf('%s/base_QZ',dir_jpg);
if (~exist(sprintf('%s.jpg',str_fig),'file'));
if (verbose); disp(sprintf(' %% %s not found, creating',sprintf('%s.jpg',str_fig))); end;
figure(1);
clf;
subplot(1,2,1); hold on;
plot(n_iter_,ZR_(:,2:end),'k-','LineWidth',1);
plot(n_iter_,ZR_(:,1),'r-','LineWidth',2);
hold off;
xlim([0,n_iteration]);
xlabel('iteration'); ylabel('ZR'); title(sprintf('%s: ZR vs iteration',dir_out),'Interpreter','none');
subplot(1,2,2); hold on;
plot(n_u-r_rem_,ZR_(:,2:end),'k-','LineWidth',1);
plot(n_u-r_rem_,ZR_(:,1),'r-','LineWidth',2);
hold off;
xlim([0,n_u]);
xlabel('samples remaining'); ylabel('ZR'); title(sprintf('%s: ZR vs sample',dir_out),'Interpreter','none');
figbig;
print('-depsc',sprintf('%s.eps',str_fig));
print('-djpeg',sprintf('%s.jpg',str_fig));
end;%if (~exist(sprintf('%s.jpg',str_fig),'file'));
end;%if n_iteration>1;
%%%%%%%%;
if n_iteration>1;
str_fig = sprintf('%s/base_Zp',dir_jpg);
if (~exist(sprintf('%s.jpg',str_fig),'file'));
if (verbose); disp(sprintf(' %% %s not found, creating',sprintf('%s.jpg',str_fig))); end;
figure(1);
clf;
subplot(1,1,1);
yl_ = [min(ZR_(:,2:end),[],'all'),max(ZR_(:,2:end),[],'all')];
yl_ = mean(yl_) + 1.25*diff(yl_)/2*[-1,+1];
hold on;
Z_ij_ = find(ZR_p_s0000_<p_set);
plot(n_iter_,ZR_(:,2:end),'k-','Linewidth',1);
plot(n_iter_,min(yl_(2),ZR_(:,1)),'r.-','Linewidth',2);
plot(n_iter_(Z_ij_),min(yl_(2),ZR_(Z_ij_,1)),'go');
xlim([0,n_iteration]); ylim(yl_);
xlabel('iteration');ylabel('ZR'); title(sprintf('%s: ZR vs iteration',dir_out),'Interpreter','none');
figbig;
print('-depsc',sprintf('%s.eps',str_fig));
print('-djpeg',sprintf('%s.jpg',str_fig));
end;%if (~exist(sprintf('%s.jpg',str_fig),'file'));
end;%if n_iteration>1;
%%%%%%%%;
flag_split=1;
ZR_ij_ = []; p_branch = 1;
%%%%%%%%;
if (ZR_p_s0000> p_set); 
if (verbose>1); disp(sprintf(' %% ZR_p_s0000 %0.6f; not significant. ;',ZR_p_s0000));  end;
end;%if (ZR_p_s0000> p_set); 
%%%%%%%%;
if (ZR_p_s0000<=p_set); 
ZR_ij_ = find(ZR_p_s0000_<=p_set);
n_ZR_ij = length(ZR_ij_);
if (verbose>1); disp(sprintf(' %% ZR_p_s0000 %0.6f; statistically significant, n_ZR_ij %d. ;',ZR_p_s0000,n_ZR_ij)); end;
E1_gamma_z_ = zeros(n_ZR_ij,1);
E1_gsplit_llr_ = zeros(n_ZR_ij,1);
E1_gsplit_label_ = cell(n_ZR_ij,1);
n_gamma_z = 16;%n_gamma_z = 64;
gamma_z_ = linspace(0,pi,n_gamma_z+1); gamma_z_ = gamma_z_(1:end-1);
L_array_ = mean_center_0(E_array_base_(E_array_r_ij_,E_array_c_ij_));
for nZR_ij=1:n_ZR_ij;
ZR_ij = ZR_ij_(nZR_ij);
if (verbose>1); disp(sprintf(' %% nZR_ij %d/%d ZR_ij %d/%d lp_R_ %0.2f = log(%0.6f)',nZR_ij,n_ZR_ij,ZR_ij,n_iteration,lp_R_(ZR_ij),exp(lp_R_(ZR_ij)))); end;
tmp_r_rem_cut = r_rem_(ZR_ij); tmp_c_rem_cut = c_rem_(ZR_ij); n_rank = 1;
[tmp_U_,~,tmp_V_] = svds( L_array_(rkeep_E_0_(1:tmp_r_rem_cut),ckeep_E_0_(1:tmp_c_rem_cut)) ,n_rank);
tmp_E1_pos_ = L_array_(:,ckeep_E_0_(1:tmp_c_rem_cut))*tmp_V_; %<-- original. ;
[tmp_s,~,~,tmp_llr,~,~] = gsplit(tmp_E1_pos_);
tmp_label_ = zeros(n_u,1);
tmp_label_(find(tmp_E1_pos_< tmp_s))='A';
tmp_label_(find(tmp_E1_pos_>=tmp_s))='B';
E1_gsplit_llr_(nZR_ij) = tmp_llr;
E1_gsplit_label_{nZR_ij} = tmp_label_;
clear tmp_r_rem_cut tmp_c_rem_cut tmp_U_ tmp_V_ tmp_E1_pos_;
end;%for nZR_ij=1:n_Z_ij;
clear L_array_;
%%%%%%%%;
[~,nZR_ij] = max(E1_gsplit_llr_);
ZR_ij = ZR_ij_(nZR_ij);
p_branch = ZR_p_s0000_(ZR_ij);
if (verbose>1); disp(sprintf(' %% max E1_gsplit_llr_: nZR_ij %d/%d ZR_ij %d/%d lp_R_ %0.2f = log(%0.6f)',nZR_ij,n_ZR_ij,ZR_ij,n_iteration,lp_R_(ZR_ij),exp(lp_R_(ZR_ij)))); end;
tmp_r_rem_cut = r_rem_(ZR_ij); tmp_c_rem_cut = c_rem_(ZR_ij); n_rank = 1;
L_array_ = mean_center_0(E_array_base_(E_array_r_ij_,E_array_c_ij_));
[tmp_U_,~,tmp_V_] = svds( L_array_(rkeep_E_0_(1:tmp_r_rem_cut),ckeep_E_0_(1:tmp_c_rem_cut)) ,n_rank);
tmp_E1_pos_ = L_array_(:,ckeep_E_0_(1:tmp_c_rem_cut))*tmp_V_; %<-- original. ;
[tmp_s,~,~,tmp_llr,~,~] = gsplit(tmp_E1_pos_);
clear L_array_;
tmp_data_0_ = tmp_E1_pos_;
tmp_label_ = E1_gsplit_label_{nZR_ij};
tmp_llr = E1_gsplit_llr_(nZR_ij);
tmp_data_A_ = tmp_data_0_(find(tmp_label_=='A'));
tmp_data_B_ = tmp_data_0_(find(tmp_label_=='B'));
tmp_data_s = 0.5*(max(tmp_data_A_) + min(tmp_data_B_));
n_member_lob = 3;
tmp_u_ = unique(tmp_label_); flag_split = (length(tmp_u_)==2); if (flag_split); flag_split = flag_split & length(find(tmp_label_==tmp_u_(1)))>n_member_lob; end; if (flag_split); flag_split = flag_split & length(find(tmp_label_==tmp_u_(2)))>n_member_lob; end;
%%%%%%%%;
if ~flag_split;
type_code = 'stop';
p_branch = 1;
branch_A_r_ij_ = [];
branch_B_r_ij_ = [];
save(str_branch,'trace_','QR_','QC_','ZR_','ZC_','ZR_p_s0000','ZR_p_s0000_','p_set','p_branch','type_code','ZR_ij','ZR_ij_','nZR_ij','branch_A_r_ij_','branch_B_r_ij_','E1_gamma_z_','E1_gsplit_llr_','E1_gsplit_label_');
 else; 
type_code = 'split';
p_branch = p_branch;
branch_A_r_ij_ = find(tmp_label_==tmp_u_(1));
branch_B_r_ij_ = find(tmp_label_==tmp_u_(2));
save(str_branch,'trace_','QR_','QC_','ZR_','ZC_','ZR_p_s0000','ZR_p_s0000_','p_set','p_branch','type_code','ZR_ij','ZR_ij_','nZR_ij','branch_A_r_ij_','branch_B_r_ij_','E1_gamma_z_','E1_gsplit_llr_','E1_gsplit_label_');
%%%%%%%%;
str_fig = sprintf('%s/branch_split',dir_jpg);
if (~exist(sprintf('%s.jpg',str_fig),'file'));
if (verbose); disp(sprintf(' %% %s not found, creating',sprintf('%s.jpg',str_fig))); end;
figure(1);
clf;
colormap(colormap_beach());
subplot(1,2,1);
scatter(tmp_data_(:,1),tmp_data_(:,2),25,E1_gsplit_label_{nZR_ij}); xlabel('pc1'); ylabel('pc2');
title(sprintf('%s branch original <-- %0.6f',dir_out,p_branch),'Interpreter','none');
subplot(3,2,2);
hold on;
plot(gamma_z_,E1_gsplit_llr__{nZR_ij},'k-');
plot(tmp_gamma_z,tmp_llr,'ro');
hold off;
xlim([0,pi]); xlabel('gamma_z'); ylabel('log-likelihood-ratio');
title(sprintf('gamma vs llr for r_rem %d c_rem %d',r_rem_(ZR_ij),c_rem_(ZR_ij)),'Interpreter','none');
subplot(3,2,[4,6]);
hold on;
stairs(sort(tmp_data_0_),(1:n_u)/n_u,'k-');
plot([1,1]*tmp_data_s,[0,1],'r-');
hold off;
xlim([min(tmp_data_0_),max(tmp_data_0_)]); ylim([0,1]);
xlabel('data'); ylabel('rank'); title(sprintf('cdf gamma_z = %0.2f',tmp_gamma_z));
figbig;
print('-depsc',sprintf('%s.eps',str_fig));
print('-djpeg',sprintf('%s.jpg',str_fig));
end;%if (~exist(sprintf('%s.jpg',str_fig),'file'));
%%%%%%%%;
end;%if flag_split;
%%%%%%%%;
end;%if (ZR_p_s0000<=p_set); 
%%%%%%%%;
if ((ZR_p_s0000>p_set) | ~flag_split);
type_code = 'stop';
branch_A_r_ij_ = [];
branch_B_r_ij_ = [];
if (~exist(str_branch,'file')); 
save(str_branch,'trace_','QR_','QC_','ZR_','ZC_','ZR_p_s0000','ZR_p_s0000_','p_set','p_branch','type_code','ZR_ij_','branch_A_r_ij_','branch_B_r_ij_');
end;%if (~exist(str_branch,'file')); 
end;%if ((ZR_p_s0000>p_set) | ~flag_split);
%%%%%%%%;
end;%if (~exist(str_branch,'file'));

str_branch = sprintf('%s/branch.mat',dir_out);
pause(1.0);
load(str_branch);
if strcmp(type_code,'stop');
if (verbose>1); disp(sprintf(' %% %s --> stop',dir_out)); end;
end;%if strcmp(type_code,'stop');
if strcmp(type_code,'split');
if (verbose>1); disp(sprintf(' %% %s --> split',dir_out)); end;
dir_A_out = sprintf('%s/dir_A',dir_out); if (~exist(dir_A_out,'dir')); disp(sprintf(' %% mkdir %s',dir_A_out)); mkdir(dir_A_out); end;
E_array_A_r_ij_ = E_array_r_ij_(branch_A_r_ij_); E_array_A_c_ij_ = E_array_c_ij_;
if (verbose>1); disp(sprintf(' %% %s <-- calling (n_sample = %d)',dir_A_out,length(E_array_A_r_ij_))); end;
test_loader_dexcluster_nonbinary_trace_1dgsplit_recursive_0(dir_A_out,prefix_base,E_array_base_,E_array_A_r_ij_,E_array_A_c_ij_,gamma,n_shuffle,p_set);
dir_B_out = sprintf('%s/dir_B',dir_out); if (~exist(dir_B_out,'dir')); disp(sprintf(' %% mkdir %s',dir_B_out)); mkdir(dir_B_out); end;
E_array_B_r_ij_ = E_array_r_ij_(branch_B_r_ij_); E_array_B_c_ij_ = E_array_c_ij_;
if (verbose>1); disp(sprintf(' %% %s <-- calling (n_sample = %d)',dir_B_out,length(E_array_B_r_ij_))); end;
test_loader_dexcluster_nonbinary_trace_1dgsplit_recursive_0(dir_B_out,prefix_base,E_array_base_,E_array_B_r_ij_,E_array_B_c_ij_,gamma,n_shuffle,p_set);
end;%if strcmp(type_code,'split');
