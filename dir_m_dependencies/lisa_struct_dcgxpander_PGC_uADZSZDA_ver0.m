function lisa = lisa_struct_dcgxpander_PGC_uADZSZDA_ver0(specification);
%{

  clear;
  dir_trunk = sprintf('/data/rangan/dir_bcc/dir_PGC_20190328');
  dir_code = sprintf('/data/rangan/dir_bcc/dir_lakcluster_c_dev');
  %dir_trunk = sprintf('/scratch/avr209/dir_PGC_20190328');
  %dir_code = sprintf('/scratch/avr209/dir_lakcluster_c_dev');
  flag_dex_vs_lak = 'dex'; %<-- differentially expressed clustering. ;
  flag_reverse = 1; %<-- forward bicluster (i.e., case-specific). ;
  gamma = [0.004]; %<-- gamma is the fraction eliminated per iteration. 000 implies a single patient eliminated per iteration. ;
  B_MLT = 34; n_mds = 20; mr_string = '';mc_string = ''; %<-- accurate to 2^(-34), 20 total mds components (but only 2 used). ; No special mc_string. ;
  n_maf = 5; n_cov = 2; %<-- minor-allele-frequency cutoff 25-50, 2 covariates (mds-components) used, repeated twice. ;
  n_scramble = 0; %<-- no previous bicluster extracted/scrambled first ;
  n_shuffle = 32; %<-- total number of random shuffles. ;
  flag_rerun=1; %<-- regenerate file.; 
  pbs_walltime = 0*2.5; %<-- pbs walltime. ;
  slurm_walltime = 0*2.5; %<-- slurm walltime. ;
  slurm_nnodes = 1; %<-- number of nodes. ;
  slurm_tpn = 15; %<-- tasks per node. ;
  slurm_memdecl = 24; %<-- could be more if larger dataset. ;
  nshuffle = 1; %<-- current random shuffle. (0 means no shuffle) ;
  cl_num = 4; %<-- train on platform 4. ;
  niteration = 170; %niteration = 325; %<-- iteration to select. ;
  for cl_num=1;%for cl_num=1:4;
  if flag_reverse==0;
  if cl_num==1; niteration_ = [300,475]; end;
  if cl_num==2; niteration_ = [200,325]; end;
  if cl_num==3; niteration_ = [225,300,400,500]; end;
  if cl_num==4; niteration_ = [175,325]; end;
  end;%if flag_reverse==0;
  if flag_reverse==1;
  if cl_num==1; niteration_ = [200,300,400,475]; end;
  if cl_num==2; niteration_ = [250,325]; end;
  if cl_num==3; niteration_ = [350,525]; end;
  if cl_num==4; niteration_ = [800]; end;
  end;%if flag_reverse==1;
  for ni=1:length(niteration_);%for ni=1:length(niteration_);
  niteration = niteration_(ni);
  for nshuffle=0:n_shuffle;%for nshuffle=0:n_shuffle;
  specification = struct();
  specification.dir_trunk = dir_trunk;
  specification.dir_code = dir_code;
  specification.mr_string = mr_string;
  specification.mc_string = mc_string;
  specification.cl_num = cl_num;
  specification.flag_dex_vs_lak = flag_dex_vs_lak;
  specification.gamma = gamma;
  specification.B_MLT = B_MLT;
  specification.n_mds = n_mds;
  specification.flag_reverse = flag_reverse;
  specification.n_maf = n_maf;
  specification.n_cov = n_cov;
  specification.n_scramble = n_scramble;
  specification.n_shuffle = n_shuffle;
  specification.nshuffle = nshuffle;
  specification.flag_rerun = flag_rerun;
  specification.niteration = niteration;
  specification.pbs_walltime = pbs_walltime;
  specification.slurm_walltime = slurm_walltime;
  specification.slurm_nnodes = slurm_nnodes;
  specification.slurm_tpn = slurm_tpn;
  specification.slurm_memdecl = slurm_memdecl;
  lisa_struct_dcgxpander_PGC_uADZSZDA_ver0(specification);
  end;%for nshuffle=0:n_shuffle;
  end;%for ni=1:length(niteration_);
  end;%for cl_num=1:4;

  %}

setup;

dir_trunk = specification.dir_trunk;
dir_code = specification.dir_code;
mr_string = specification.mr_string;
mc_string = specification.mc_string;
cl_num = specification.cl_num;
flag_dex_vs_lak = specification.flag_dex_vs_lak;
gamma = specification.gamma;
B_MLT = specification.B_MLT;
n_mds = specification.n_mds;
flag_reverse = specification.flag_reverse;
n_maf = specification.n_maf;
n_cov = specification.n_cov;
n_scramble = specification.n_scramble;
n_shuffle = specification.n_shuffle;
nshuffle = specification.nshuffle;
flag_rerun = specification.flag_rerun;
niteration = specification.niteration;
pbs_walltime = specification.pbs_walltime;
slurm_walltime = specification.slurm_walltime;
slurm_nnodes = specification.slurm_nnodes;
slurm_tpn = specification.slurm_tpn;
slurm_memdecl = specification.slurm_memdecl;
GLOBAL_memory_gb = slurm_memdecl;

%{
dir_code = specification.dir_code;
dir_trunk = specification.dir_trunk;
string_prefix = specification.string_prefix;
maf_lo_threshold = specification.maf_lo_threshold;
maf_hi_threshold = specification.maf_hi_threshold;
mr_string = specification.mr_string;
mc_string = specification.mc_string;
flag_dex_vs_lak = specification.flag_dex_vs_lak;
flag_reverse = specification.flag_reverse;
Icat = specification.Icat;
n_mds = specification.n_mds;
mds_used_ = specification.mds_used_;
mds_repl = specification.mds_repl;
gamma = specification.gamma;
B_MLT = specification.B_MLT;
Ireq = specification.Ireq;
n_scramble = specification.n_scramble;
scramble_out_xdrop_ = specification.scramble_out_xdrop_;
scramble_rseed_ = specification.scramble_rseed_;
n_shuffle = specification.n_shuffle;
nshuffle = specification.nshuffle;
flag_rerun = specification.flag_rerun;
pbs_walltime = specification.pbs_walltime;
slurm_walltime = specification.slurm_walltime;
slurm_nnodes = specification.slurm_nnodes;
slurm_tpn = specification.slurm_tpn;
slurm_memdecl = specification.slurm_memdecl;
row_factor = specification.row_factor;
col_factor = specification.col_factor;
flag_verbose = specification.flag_verbose;
 %}

%lisa = lisa_struct_make_ver0(mr_string,mc_string,cl_num,flag_dex_vs_lak,gamma,B_MLT,n_mds,flag_reverse,n_maf,n_cov,n_scramble,n_shuffle) ;
lisa = lisa_struct_xdrop_select_ver0(specification);
lisa = lisa_struct_prefix_ver0(lisa,dir_code,dir_trunk); lisa.nshuffle = 0;  
lisa = lisa_struct_names_ver0(lisa); 
lisa = lisa_struct_xdrop_ver0(lisa);
lisa = lisa_struct_mdsfam_ver0(lisa); 
%lisa = lisa_struct_bim_ver0(lisa);  %<-- takes a long time. ;
lisa = lisa_struct_mx_ver0(lisa); 
lisa = lisa_struct_studyindex_ver0(lisa);
lisa = lisa_struct_trace_ver0(lisa);

if (lisa.Icat>1); disp(sprintf(' %% Warning! Icat %d in lisa_struct_dcgxpander_PGC_uADZSZDA_ver0',lisa.Icat)); return; end;

out_xdrop_a_ = textread(sprintf('%s/out_xdrop_ni%d.txt',lisa.dir_out_s0_select,niteration));
tmp_ij_ = find(out_xdrop_a_(:,1)>-1); rdrop_a_ = out_xdrop_a_(tmp_ij_,1)+1;
tmp_ij_ = find(out_xdrop_a_(:,2)>-1); cdrop_a_ = out_xdrop_a_(tmp_ij_,2)+1;

lisa.dir_out_xpander_s0 = sprintf('%s/dir_xpander',lisa.dir_out_s0);
if (~exist(lisa.dir_out_xpander_s0,'dir')); disp(sprintf(' %% mkdir %s',lisa.dir_out_xpander_s0)); mkdir(lisa.dir_out_xpander_s0); end;

xpander_s0_suffix = sprintf('xr%dxc%d',length(rdrop_a_),length(cdrop_a_));
string_xpander_s0_specific = sprintf('%s_%s',lisa.string_name,xpander_s0_suffix);
lisa.dir_out_xpander_s0_specific = sprintf('%s/dir_%s',lisa.dir_out_xpander_s0,string_xpander_s0_specific);
if (~exist(lisa.dir_out_xpander_s0_specific,'dir')); disp(sprintf(' %% mkdir %s',lisa.dir_out_xpander_s0_specific)); mkdir(lisa.dir_out_xpander_s0_specific); end;
lisa.dir_out_xpander_s0_specific_out_trace = sprintf('%s/dir_trace',lisa.dir_out_xpander_s0_specific);
if (~exist(lisa.dir_out_xpander_s0_specific_out_trace,'dir')); disp(sprintf(' %% mkdir %s',lisa.dir_out_xpander_s0_specific_out_trace)); mkdir(lisa.dir_out_xpander_s0_specific_out_trace); end;

fname1_trace_xpander_s0 = sprintf('%s/out_trace.txt',lisa.dir_out_xpander_s0_specific);
fname1_out_xgrow_a_xpander_s0 = sprintf('%s/out_xgrow_a.txt',lisa.dir_out_xpander_s0_specific);
fname2_trace_xpander_s0 = sprintf('%s/out_trace_s0000.txt',lisa.dir_out_xpander_s0_specific_out_trace);
fname2_out_xgrow_a_xpander_s0 = sprintf('%s/out_xgrow_a_s0000.txt',lisa.dir_out_xpander_s0_specific_out_trace);
flag_exist1 = exist(fname1_trace_xpander_s0,'file') & exist(fname1_out_xgrow_a_xpander_s0,'file');
flag_exist2 = exist(fname2_trace_xpander_s0,'file') & exist(fname2_out_xgrow_a_xpander_s0,'file');
flag_exist_s0=0;
if (flag_exist1 | flag_exist2);
disp(sprintf(' %% found %s\n %% found %s',fname2_trace_xpander_s0,fname2_out_xgrow_a_xpander_s0));
flag_exist_s0=1;
 else
disp(sprintf(' %% did not find %s\n %% did not find %s',fname2_trace_xpander_s0,fname2_out_xgrow_a_xpander_s0));
flag_exist_s0=0;
end;%if exist;

string_timing = sprintf('%s/timing.m',lisa.dir_out_xpander_s0_specific);
flag_timing = 0;
if (exist(string_timing,'file')); run(string_timing); elrt_s0 = elrt; flag_timing = 1; end;

if nshuffle>0; xpander_sx_suffix = sprintf('s%.4d_xr%dxc%d',nshuffle,length(rdrop_a_),length(cdrop_a_)); end;
if nshuffle==0; xpander_sx_suffix = sprintf('xr%dxc%d',length(rdrop_a_),length(cdrop_a_)); end;
string_xpander_sx_specific = sprintf('%s_%s',lisa.string_name,xpander_sx_suffix);
lisa.dir_out_xpander_sx_specific = sprintf('%s/dir_%s',lisa.dir_out_xpander_s0,string_xpander_sx_specific);
fname1_trace_xpander_sx = sprintf('%s/out_trace.txt',lisa.dir_out_xpander_sx_specific);
fname1_out_xgrow_a_xpander_sx = sprintf('%s/out_xgrow_a.txt',lisa.dir_out_xpander_sx_specific);
fname2_trace_xpander_sx = sprintf('%s/out_trace_s%.4d.txt',lisa.dir_out_xpander_s0_specific_out_trace,nshuffle);
fname2_out_xgrow_a_xpander_sx = sprintf('%s/out_xgrow_a_s%.4d.txt',lisa.dir_out_xpander_s0_specific_out_trace,nshuffle);
flag_exist1 = exist(fname1_trace_xpander_sx,'file') & exist(fname1_out_xgrow_a_xpander_sx,'file');
flag_exist2 = exist(fname2_trace_xpander_sx,'file') & exist(fname2_out_xgrow_a_xpander_sx,'file');
flag_exist_sx=0;
if (flag_exist1 | flag_exist2);
disp(sprintf(' %% found %s\n %% found %s',fname2_trace_xpander_sx,fname2_out_xgrow_a_xpander_sx));
flag_exist_sx=1;
 else
disp(sprintf(' %% did not find %s\n %% did not find %s',fname2_trace_xpander_sx,fname2_out_xgrow_a_xpander_sx));
flag_exist_sx=0;
end;%if exist;

if (flag_rerun==1 | ~flag_exist_sx);

if (~exist(lisa.dir_out_xpander_sx_specific,'dir')); disp(sprintf(' %% mkdir %s',lisa.dir_out_xpander_sx_specific)); mkdir(lisa.dir_out_xpander_sx_specific); end;

bitj=16;
tmp_fname = sprintf('%s/%s_mc_A.b16',lisa.dir_out_s0,lisa.string_name);
mc_A_ = (tutorial_binary_uncompress(tmp_fname)>0);
tmp_fname = sprintf('%s/%s_mr_A_full.b16',lisa.dir_out_s0,lisa.string_name);
mr_A_full_ = (tutorial_binary_uncompress(tmp_fname)>0);
tmp_fname = sprintf('%s/%s_mr_Z_full.b16',lisa.dir_out_s0,lisa.string_name);
mr_Z_full_ = (tutorial_binary_uncompress(tmp_fname)>0);

d_inpre = sprintf('%s/%s',lisa.dir__in,lisa.string_prefix);
d_oupre = sprintf('%s/%s',lisa.dir_out_s0,lisa.string_name);
d_oupre_specific = sprintf('%s/%s',lisa.dir_out_xpander_sx_specific,string_xpander_sx_specific);

Y_n_cols=0;
%%%%%%%%;
% reading original row-masks for A and Z ;
mr_A_ori_ = cell(lisa.Icat,1);
mr_Z_ori_ = cell(lisa.Icat,1);
A_n_rind_ = cell(lisa.Icat,1);
J_c_rind_ = cell(lisa.Icat,1);
Z_n_rind_ = cell(lisa.Icat,1);
tmp_rsum=0;
for nb=0:lisa.Icat-1;
if (length(mr_string)>0);
if (lisa.Icat==1); tmpchar = sprintf('%s_mr_A_%s_full.b16',d_inpre,mr_string); else; tmpchar = sprintf('%s_mr_A_%s_%0.2d.b16',d_inpre,mr_string,1+nb); end;
 else;
if (length(mr_string)>0);
if (lisa.Icat==1); tmpchar = sprintf('%s_mr_A_full.b16',d_inpre); else; tmpchar = sprintf('%s_mr_A_%0.2d.b16',d_inpre,1+nb); end;
end;%if (length(mr_string)>0);
[bitj,nrows,ncols] = tutorial_binary_getsize(tmpchar); 
mr_A_ori_{1+nb} = (tutorial_binary_uncompress(tmpchar,1:nrows,1:ncols)>0);
A_n_rind_{1+nb} = find(mr_A_ori_{1+nb});
if (flag_reverse==0); J_c_rind_{1+nb} = intersect(A_n_rind_{1+nb},rdrop_a_-tmp_rsum); end;
if (length(mr_string)>0);
if (lisa.Icat==1); tmpchar = sprintf('%s_mr_Z_%s_full.b16',d_inpre,mr_string); else; tmpchar = sprintf('%s_mr_Z_%s_%0.2d.b16',d_inpre,mr_string,1+nb); end;
 else;
if (lisa.Icat==1); tmpchar = sprintf('%s_mr_Z_full.b16',d_inpre); else; tmpchar = sprintf('%s_mr_Z_%0.2d.b16',d_inpre,1+nb); end;
end;%if (length(mr_string)>0);
[bitj,nrows,ncols] = tutorial_binary_getsize(tmpchar); 
mr_Z_ori_{1+nb} = (tutorial_binary_uncompress(tmpchar,1:nrows,1:ncols)>0);
Z_n_rind_{1+nb} = find(mr_Z_ori_{1+nb});
if (flag_reverse==1); J_c_rind_{1+nb} = intersect(Z_n_rind_{1+nb},rdrop_a_-tmp_rsum); end;
tmp_rsum = tmp_rsum + length(mr_A_ori_{1+nb});
end;%for nb=0:lisa.Icat-1;
%%%%%%%%;
% reading original col-masks for A ;
if (length(mc_string)>0);
tmpchar = sprintf('%s_mc_A_%s.b16',d_inpre,mc_string);[bitj,nrows,ncols] = tutorial_binary_getsize(tmpchar); 
mc_A_pre = (tutorial_binary_uncompress(tmpchar,1:nrows,1:ncols)>0);
else;
tmpchar = sprintf('%s_mc_A.b16',d_inpre);[bitj,nrows,ncols] = tutorial_binary_getsize(tmpchar); 
mc_A_pre = (tutorial_binary_uncompress(tmpchar,1:nrows,1:ncols)>0);
end;%if (length(mc_string)>0);
A_n_cind = find(mc_A_pre);
K_c_cind = cdrop_a_;
%%%%%%%%;
M_n_rows_ = zeros(lisa.Icat,1);
A_n_rows_ = zeros(lisa.Icat,1);
Z_n_rows_ = zeros(lisa.Icat,1);
for nb=0:lisa.Icat-1;
M_n_rows_(1+nb) = length(mr_A_ori_{1+nb});
A_n_rows_(1+nb) = sum(mr_A_ori_{1+nb});
Z_n_rows_(1+nb) = sum(mr_Z_ori_{1+nb});
end;%for nb=0:lisa.Icat-1;
M_n_cols = length(mc_A_pre);
disp(sprintf(' %% lisa.Icat %d; total vs cases vs controls',lisa.Icat));
disp(num2str([M_n_rows_ , A_n_rows_ , Z_n_rows_ ]));

% uncompressing T_n_ in case where length(lisa.mds_used_)~=2 or lisa.mds_repl<1;
if (lisa.mds_repl<1 | length(lisa.mds_used_)~=2);
flag_T = 0;
T_n_ = cell(lisa.Icat,1);
T_n_crop_ = cell(lisa.Icat,1);
T_t_crop_ = cell(lisa.Icat,1);
T_n_crop_cols = 1+length(lisa.mds_used_);
for nb=0:lisa.Icat-1;
if (lisa.Icat==1); tmpchar = sprintf('%s_T_full_n.b16',d_inpre); else; tmpchar = sprintf('%s_T_%0.2d_n.b16',d_inpre,1+nb); end;
[bitj,nrows,ncols] = tutorial_binary_getsize(tmpchar); disp(sprintf(' %% reading %s = (%d,%d)',tmpchar,nrows,ncols));
T_n_{1+nb} = tutorial_binary_uncompress(tmpchar,1:nrows,1:ncols); 
if (lisa.Icat==1); tmpchar = sprintf('%s_T_crop_full_n.b16',d_oupre); else; tmpchar = sprintf('%s_T_crop_%0.2d_n.b16',d_oupre,1+nb); end;
[bitj,nrows,ncols] = tutorial_binary_getsize(tmpchar); disp(sprintf(' %% reading %s = (%d,%d)',tmpchar,nrows,ncols));
T_n_crop_{1+nb} = tutorial_binary_uncompress(tmpchar,1:nrows,1:ncols);
if (lisa.Icat==1); tmpchar = sprintf('%s_T_crop_full_t.b16',d_oupre); else; tmpchar = sprintf('%s_T_crop_%0.2d_t.b16',d_oupre,1+nb); end;
[bitj,nrows,ncols] = tutorial_binary_getsize(tmpchar); disp(sprintf(' %% reading %s = (%d,%d)',tmpchar,nrows,ncols));
T_t_crop_{1+nb} = tutorial_binary_uncompress(tmpchar,1:nrows,1:ncols);
end;%for nb=0:lisa.Icat-1;
tmpchar = sprintf('%s_mc_T_crop.b16',d_oupre); 
[bitj,nrows,ncols] = tutorial_binary_getsize(tmpchar); disp(sprintf(' %% reading %s = (%d,%d)',tmpchar,nrows,ncols));
mc_T_crop = tutorial_binary_uncompress(tmpchar,1:nrows,1:ncols);
disp(sprintf('mc_T_crop:'));disp(num2str(transpose(mc_T_crop)));
T_n_crop_cind = 1:T_n_crop_cols;
end;%if (lisa.mds_repl<1 | length(lisa.mds_used_)~=2);

% copying T_n_ from T_m2rx_n in case where length(lisa.mds_used_)==2 and lisa.mds_repl>0;
if (lisa.mds_repl>=1 & length(lisa.mds_used_)==2);
flag_T = 1;
lisa.mds_str = sprintf('m%dr%d',length(lisa.mds_used_),lisa.mds_repl);
lisa.mds_kappa_squared = textread(sprintf('%s_T_%s_kappa.txt',d_inpre,lisa.mds_str));
T_n_ = cell(lisa.Icat,1);
T_t_ = cell(lisa.Icat,1);
T_n_cols = 1+length(lisa.mds_used_)*lisa.mds_repl;
for nb=0:lisa.Icat-1;
if (lisa.Icat==1); tmpchar = sprintf('%s_T_%s_full_n.b16',d_inpre,lisa.mds_str); else; tmpchar = sprintf('%s_T_%s_%0.2d_n.b16',d_inpre,lisa.mds_str,1+nb); end;
[bitj,nrows,ncols] = tutorial_binary_getsize(tmpchar); disp(sprintf(' %% reading %s = (%d,%d)',tmpchar,nrows,ncols));
T_n_{1+nb} = tutorial_binary_uncompress(tmpchar,1:nrows,1:ncols); 
T_t_{1+nb} = transpose(T_n_{1+nb});
end;%for nb=0:lisa.Icat-1;
mc_T = ones(T_n_cols,1);
tmpchar = sprintf('%s_mc_T_%s.b16',d_oupre_specific,lisa.mds_str); 
%disp(sprintf(' %% writing %s = (%d,%d)',tmpchar,size(mc_T))); tutorial_binary_compress(bitj,mc_T(:)>0,tmpchar);
disp(sprintf('mc_T:'));disp(num2str(transpose(mc_T)));
T_n_cind = 1:T_n_cols;
end;%if (lisa.mds_repl>= | length(lisa.mds_used_)==2);

% performing covariate-respecting shuffle ;
if (flag_reverse==0);
if (flag_T==0); [mr_A_prm_,mr_Z_prm_] = dcgxpander_uADZSZDA_shuffle_ver2(nshuffle,M_n_rows_,M_n_cols,A_n_rind_,A_n_cind,Z_n_rind_,T_n_crop_cols,T_n_crop_,T_n_crop_cind,J_c_rind_,K_c_cind); end;
if (flag_T==1); [mr_A_prm_,mr_Z_prm_] = dcgxpander_uADZSZDA_shuffle_ver2(nshuffle,M_n_rows_,M_n_cols,A_n_rind_,A_n_cind,Z_n_rind_,T_n_cols,T_n_,T_n_cind,J_c_rind_,K_c_cind); end;
end;%if (flag_reverse==0);
if (flag_reverse==1);
if (flag_T==0); [mr_Z_prm_,mr_A_prm_] = dcgxpander_uADZSZDA_shuffle_ver2(nshuffle,M_n_rows_,M_n_cols,Z_n_rind_,A_n_cind,A_n_rind_,T_n_crop_cols,T_n_crop_,T_n_crop_cind,J_c_rind_,K_c_cind); end;
if (flag_T==1); [mr_Z_prm_,mr_A_prm_] = dcgxpander_uADZSZDA_shuffle_ver2(nshuffle,M_n_rows_,M_n_cols,Z_n_rind_,A_n_cind,A_n_rind_,T_n_cols,T_n_,T_n_cind,J_c_rind_,K_c_cind); end;
end;%if (flag_reverse==1);

% writing row-masks ;
A_n_rows_used=0; Z_n_rows_used=0;
mr_A_use_ = mr_A_ori_; mr_Z_use_ = mr_Z_ori_; if (nshuffle>0); mr_A_use_ = mr_A_prm_; mr_Z_use_ = mr_Z_prm_; end;%if (nshuffle>0); 
for nb=0:lisa.Icat-1;
disp(sprintf('nb %.2d : mr_A_ori_ npats %.5d ncase %.4d, mr_A_use_ npats %.5d ncase %.4d, overlap %.4d',nb,length(mr_A_ori_{1+nb}),sum(mr_A_ori_{1+nb}),length(mr_A_use_{1+nb}),sum(mr_A_use_{1+nb}),sum(mr_A_ori_{1+nb}.*mr_A_use_{1+nb})));
disp(sprintf('nb %.2d : mr_Z_ori_ npats %.5d nctrl %.4d, mr_Z_use_ npats %.5d nctrl %.4d, overlap %.4d',nb,length(mr_Z_ori_{1+nb}),sum(mr_Z_ori_{1+nb}),length(mr_Z_use_{1+nb}),sum(mr_Z_use_{1+nb}),sum(mr_Z_ori_{1+nb}.*mr_Z_use_{1+nb})));
if (lisa.Icat==1); tmpchar = sprintf('%s_mr_A_full.b16',d_oupre_specific); else; tmpchar = sprintf('%s_mr_A_%0.2d.b16',d_oupre_specific,1+nb); end;
tutorial_binary_compress(bitj,mr_A_use_{1+nb}(:)>0,tmpchar);
if (lisa.Icat==1); tmpchar = sprintf('%s_mr_Z_full.b16',d_oupre_specific); else; tmpchar = sprintf('%s_mr_Z_%0.2d.b16',d_oupre_specific,1+nb); end;
tutorial_binary_compress(bitj,mr_Z_use_{1+nb}(:)>0,tmpchar);
A_n_rows_used = A_n_rows_used + sum(mr_A_use_{1+nb}(:)>0);
Z_n_rows_used = Z_n_rows_used + sum(mr_Z_use_{1+nb}(:)>0);
end;%for nb=0:lisa.Icat-1;

% write col mask;
mc_K_ = mc_A_; mc_K_(cdrop_a_)=0;
fname_mc_K = sprintf('%s/%s_mc_K.b16',lisa.dir_out_xpander_sx_specific,string_xpander_sx_specific);
tutorial_binary_compress(bitj,mc_K_,fname_mc_K);

% write row mask;
if (flag_reverse==0); mr_J_use_ = mr_A_use_; end;
if (flag_reverse==1); mr_J_use_ = mr_Z_use_; end;
tmp_rsum = 0;
for nb=0:lisa.Icat-1;
tmp_ij = intersect(mr_A_use_{1+nb},rdrop_a_-tmp_rsum);
mr_J_use_{1+nb}(rdrop_a_)=0;
if (lisa.Icat==1); tmpchar = sprintf('%s_mr_J_full.b16',d_oupre_specific); else; tmpchar = sprintf('%s_mr_J_%0.2d.b16',d_oupre_specific,1+nb); end;
tutorial_binary_compress(bitj,mr_J_use_{1+nb}(:)>0,tmpchar);
tmp_rsum = tmp_rsum + length(mr_A_use_{1+nb});
end;%for nb=0:lisa.Icat-1;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
% setting up input file for dcgxpander. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
fname__in = sprintf('%s/%s.in',lisa.dir_out_xpander_sx_specific,string_xpander_sx_specific);
fp = fopen(fname__in,'w');
flag_verbose=0;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
fprintf(fp,'GLOBAL_verbose= %d;\n',flag_verbose);
fprintf(fp,'GLOBAL_thread_count= 15;\n');
fprintf(fp,'GLOBAL_omp_type= 1;\n');
fprintf(fp,'GLOBAL_TEST_TYPE= %s;\n','dcgxpander_driver');
fprintf(fp,'GLOBAL_NBINS= %d;\n',lisa.Icat);
fprintf(fp,'GLOBAL_B_MLT= %d;\n',lisa.B_MLT);
fprintf(fp,'GLOBAL_gamma= %0.4f;\n',lisa.gamma);
fprintf(fp,'GLOBAL_Ireq= %d;\n',lisa.Ireq);
if (flag_T==1); fprintf(fp,'GLOBAL_kappa_squared= %0.16f;\n',textread(lisa.fname_mds_kappa_squared)); end;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
A_name_string = '_A_';
dexcluster_PGC_uADZSZDA_excerpt_0(fp,'GLOBAL_A_n_name_= ',lisa.Icat,d_inpre,A_name_string,'_n.b16');
dexcluster_PGC_uADZSZDA_excerpt_0(fp,'GLOBAL_A_t_name_= ',lisa.Icat,d_inpre,A_name_string,'_t.b16');
dexcluster_PGC_uADZSZDA_excerpt_1(fp,'GLOBAL_A_n_rows_= ',lisa.Icat,M_n_rows_);
fprintf(fp,'GLOBAL_A_n_cols= %d;\n',M_n_cols);
if (flag_reverse==1); dexcluster_PGC_uADZSZDA_excerpt_0(fp,'GLOBAL_A_n_rind_= ',lisa.Icat,d_oupre_specific,'_mr_Z_','.b16'); end;
if (flag_reverse==0); dexcluster_PGC_uADZSZDA_excerpt_0(fp,'GLOBAL_A_n_rind_= ',lisa.Icat,d_oupre_specific,'_mr_A_','.b16'); end;
fprintf(fp,'GLOBAL_A_n_cind= %s_mc_A.b16;\n',d_oupre);
dexcluster_PGC_uADZSZDA_excerpt_0(fp,'GLOBAL_Z_n_name_= ',lisa.Icat,d_inpre,A_name_string,'_n.b16');
dexcluster_PGC_uADZSZDA_excerpt_0(fp,'GLOBAL_Z_t_name_= ',lisa.Icat,d_inpre,A_name_string,'_t.b16');
dexcluster_PGC_uADZSZDA_excerpt_1(fp,'GLOBAL_Z_n_rows_= ',lisa.Icat,M_n_rows_);
if (flag_reverse==1); dexcluster_PGC_uADZSZDA_excerpt_0(fp,'GLOBAL_Z_n_rind_= ',lisa.Icat,d_oupre_specific,'_mr_A_','.b16'); end;
if (flag_reverse==0); dexcluster_PGC_uADZSZDA_excerpt_0(fp,'GLOBAL_Z_n_rind_= ',lisa.Icat,d_oupre_specific,'_mr_Z_','.b16'); end;
fprintf(fp,'GLOBAL_Y_n_cols= %d;\n',Y_n_cols);
if (flag_T==0);
fprintf(fp,'GLOBAL_T_n_cols= %d;\n',T_n_crop_cols); 
dexcluster_PGC_uADZSZDA_excerpt_0(fp,'GLOBAL_T_n_name_= ',lisa.Icat,d_oupre,'_T_crop_','_n.b16');
dexcluster_PGC_uADZSZDA_excerpt_0(fp,'GLOBAL_T_t_name_= ',lisa.Icat,d_oupre,'_T_crop_','_t.b16');
fprintf(fp,'GLOBAL_T_n_cind= %s_mc_T_crop.b16;\n',d_oupre_specific);
dexcluster_PGC_uADZSZDA_excerpt_0(fp,'GLOBAL_S_n_name_= ',lisa.Icat,d_oupre,'_T_crop_','_n.b16');
dexcluster_PGC_uADZSZDA_excerpt_0(fp,'GLOBAL_S_t_name_= ',lisa.Icat,d_oupre,'_T_crop_','_t.b16');
end;%if (flag_T==0);
if (flag_T==1);
fprintf(fp,'GLOBAL_T_n_cols= %d;\n',T_n_cols); 
dexcluster_PGC_uADZSZDA_excerpt_0(fp,'GLOBAL_T_n_name_= ',lisa.Icat,d_inpre,sprintf('_T_%s_',lisa.mds_str),'_n.b16');
dexcluster_PGC_uADZSZDA_excerpt_0(fp,'GLOBAL_T_t_name_= ',lisa.Icat,d_inpre,sprintf('_T_%s_',lisa.mds_str),'_t.b16');
fprintf(fp,'GLOBAL_T_n_cind= %s_mc_T_%s.b16;\n',d_oupre,lisa.mds_str);
dexcluster_PGC_uADZSZDA_excerpt_0(fp,'GLOBAL_S_n_name_= ',lisa.Icat,d_inpre,sprintf('_T_%s_',lisa.mds_str),'_n.b16');
dexcluster_PGC_uADZSZDA_excerpt_0(fp,'GLOBAL_S_t_name_= ',lisa.Icat,d_inpre,sprintf('_T_%s_',lisa.mds_str),'_t.b16');
end;%if (flag_T==1);
dexcluster_PGC_uADZSZDA_excerpt_0(fp,'GLOBAL_J_n_rind_= ',lisa.Icat,d_oupre_specific,'_mr_J_','.b16');
fprintf(fp,'GLOBAL_K_n_cind= %s_mc_K.b16;\n',d_oupre_specific);
fprintf(fp,'GLOBAL_DIR_NAME= %s;\n',lisa.dir_out_xpander_sx_specific);
fprintf(fp,'END= 0;\n');
fprintf(fp,'%% generated by dcgxpander_PGC_uADZSZDA_ver0.m on %s;\n',date);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
fclose(fp);
type(fname__in);
disp(sprintf(' %% fname__in:\n%s',fname__in));

flag_call=1*(pbs_walltime<=0 & slurm_walltime<=0);%flag_call = input(' call? 1=yes (default), 0=no:'); if isempty(flag_call); flag_call=1; end;
if flag_call;
disp(sprintf('%s/lakcluster_ver18 --GLOBAL_memory_gb %d < %s',dir_code,GLOBAL_memory_gb,fname__in));
system(sprintf('%s/lakcluster_ver18 --GLOBAL_memory_gb %d < %s',dir_code,GLOBAL_memory_gb,fname__in));
disp(sprintf(' %% cleaning up: '));
string_command = sprintf('scp -p %s/out_trace.txt %s/out_trace_s%0.4d.txt; scp -p %s/out_xgrow_a.txt %s/out_xgrow_a_s%0.4d.txt;',lisa.dir_out_xpander_sx_specific,lisa.dir_out_xpander_s0_specific_out_trace,nshuffle,lisa.dir_out_xpander_sx_specific,lisa.dir_out_xpander_s0_specific_out_trace,nshuffle);
disp(sprintf('%s',string_command));
system(string_command);
if (nshuffle>0);
string_command = sprintf('rm -rf %s;',lisa.dir_out_xpander_sx_specific);
disp(sprintf('%s',string_command));
system(string_command);
end;%if (nshuffle>0);
end;%if flag_call;

flag_pbs=1*(pbs_walltime>0);
if flag_pbs;
fname_pbs = sprintf('%s.pbs',d_oupre);
pbs_fp = fopen(fname_pbs,'w');
fprintf(pbs_fp,'#PBS -S /bin/bash\n');
fprintf(pbs_fp,'#PBS -lnodes=1:ppn=15\n');
%fprintf(pbs_fp,'#PBS -lnodes=1:cpu2+cpu3\n');
pbs_walltime_use = pbs_walltime;
if (flag_timing); pbs_walltime_use = 1.5*elrt_s0/3600; disp(sprintf(' %% pbs_walltime changed from %0.2f to %0.2f',pbs_walltime,pbs_walltime_use)); end;
pbs_walltime_h = floor(pbs_walltime_use); pbs_walltime_m = min(59,ceil(60*(pbs_walltime_use - pbs_walltime_h))); 
sprintf(' %% pbs_walltime=%d:%.2d:59',pbs_walltime_h,pbs_walltime_m);
fprintf(pbs_fp,'#PBS -lwalltime=%d:%.2d:59\n',pbs_walltime_h,pbs_walltime_m);
fprintf(pbs_fp,'#PBS -e %s_pbs_error.log\n',d_oupre);
fprintf(pbs_fp,'#PBS -o %s_pbs_output.log\n',d_oupre);
fprintf(pbs_fp,'%s/lakcluster_ver18 --GLOBAL_memory_gb %d < %s\n',dir_code,GLOBAL_memory_gb,fname__in);
%%%%%%%%%%%%%%%%;
string_command = sprintf('scp -p %s/out_trace.txt %s/out_trace_s%0.4d.txt; scp -p %s/out_xgrow_a.txt %s/out_xgrow_a_s%0.4d.txt;',lisa.dir_out_xpander_sx_specific,lisa.dir_out_xpander_s0_specific_out_trace,nshuffle,lisa.dir_out_xpander_sx_specific,lisa.dir_out_xpander_s0_specific_out_trace,nshuffle);
fprintf(pbs_fp,'%s\n',string_command);
if (nshuffle>0);
string_command = sprintf('rm -rf %s;',lisa.dir_out_xpander_sx_specific);
fprintf(pbs_fp,'%s\n',string_command);
end;%if (nshuffle>0);
%%%%%%%%%%%%%%%%;
fclose(pbs_fp);
type(fname_pbs);
string_command = sprintf('qsub %s;',fname_pbs);
fp = fopen(sprintf('%s/log.txt',dir_trunk),'a'); fprintf(fp,'%s # %s\n',string_command,datestr(now)); fclose(fp);
disp(sprintf('%s',string_command));
%system(sprintf('%s\n',string_command));
end;%if flag_pbs;

flag_slurm = 1*(slurm_walltime>0);
if flag_slurm;
slurm_fname = sprintf('%s.slurm',d_oupre);
slurm_fp = fopen(slurm_fname,'w');
fprintf(slurm_fp,'#!/bin/sh \n');
fprintf(slurm_fp,'#\n');
fprintf(slurm_fp,'#SBATCH --verbose\n');
fprintf(slurm_fp,'#SBATCH --job-name=%s\n',fname__in);
fprintf(slurm_fp,'#SBATCH --output=%s_output.log\n',d_oupre);
fprintf(slurm_fp,'#SBATCH --error=%s_error.log\n',d_oupre);
slurm_walltime_use = slurm_walltime;
if (flag_timing); slurm_walltime_use = 1.5*elrt_s0/3600; disp(sprintf(' %% slurm_walltime changed from %0.2f to %0.2f',slurm_walltime,slurm_walltime_use)); end;
slurm_walltime_h = floor(slurm_walltime_use); slurm_walltime_m = min(59,ceil(60*(slurm_walltime_use - slurm_walltime_h)));
sprintf(' %% slurm_walltime=%d:%.2d:59',slurm_walltime_h,slurm_walltime_m);
fprintf(slurm_fp,'#SBATCH --time=%d:%.2d:59\n',slurm_walltime_h,slurm_walltime_m);
fprintf(slurm_fp,'#SBATCH --nodes=%d --ntasks-per-node=%d\n',slurm_nnodes,slurm_tpn);
fprintf(slurm_fp,'#SBATCH --mem=%dGB\n',slurm_memdecl);
fprintf(slurm_fp,'\n');
fprintf(slurm_fp,'/bin/hostname\n');
fprintf(slurm_fp,'/bin/pwd\n');
fprintf(slurm_fp,'module load matlab/2017b\n');
fprintf(slurm_fp,'%s/lakcluster_ver18 --GLOBAL_memory_gb %d < %s\n',dir_code,GLOBAL_memory_gb,fname__in);
%%%%%%%%%%%%%%%%;
string_command = sprintf('scp -p %s/out_trace.txt %s/out_trace_s%0.4d.txt; scp -p %s/out_xgrow_a.txt %s/out_xgrow_a_s%0.4d.txt;',lisa.dir_out_xpander_sx_specific,lisa.dir_out_xpander_s0_specific_out_trace,nshuffle,lisa.dir_out_xpander_sx_specific,lisa.dir_out_xpander_s0_specific_out_trace,nshuffle);
fprintf(slurm_fp,'%s\n',string_command);
if (nshuffle>0);
string_command = sprintf('rm -rf %s;',lisa.dir_out_xpander_sx_specific);
fprintf(slurm_fp,'%s\n',string_command);
end;%if (nshuffle>0);
%%%%%%%%%%%%%%%%;
fclose(slurm_fp);
type(slurm_fname);
string_command = sprintf('sbatch %s;',slurm_fname);
fp = fopen(sprintf('%s/log.txt',dir_trunk),'a'); fprintf(fp,'%s # %s\n',string_command,datestr(now)); fclose(fp);
disp(sprintf('%s',string_command));
%system(sprintf('%s\n',string_command));
end;%if flag_slurm;


end;%if (flag_rerun==1 | ~flag_exist_sx);


%{

  string_command = sprintf('scp -p %s/out_trace.txt %s/out_trace_s%0.4d.txt;',lisa.dir_out_xpander_s0_specific,lisa.dir_out_xpander_s0_specific_out_trace,0);
  system(string_command);
  string_command = sprintf('scp -p %s/out_xgrow_a.txt %s/out_xgrow_a_s%0.4d.txt;',lisa.dir_out_xpander_s0_specific,lisa.dir_out_xpander_s0_specific_out_trace,0);
  system(string_command);


  clear;
  setup;
  dir_trunk = sprintf('/data/rangan/dir_bcc/dir_PGC_20190328');
  dir_code = sprintf('/data/rangan/dir_bcc/dir_lakcluster_c_dev');
  flag_dex_vs_lak = 'dex'; %<-- differentially expressed clustering. ;
  flag_reverse = 1; %<-- forward bicluster (i.e., case-specific). ;
  gamma = [0.004]; %<-- gamma is the fraction eliminated per iteration. 000 implies a single patient eliminated per iteration. ;
  B_MLT = 34; n_mds = 20; mr_string = '';mc_string = ''; %<-- accurate to 2^(-34), 20 total mds components (but only 2 used). ; No special mc_string. ;
  n_maf = 5; n_cov = 2; %<-- minor-allele-frequency cutoff 25-50, 2 covariates (mds-components) used, repeated twice. ;
  n_scramble = 0;%n_scramble = 0; %<-- no previous bicluster extracted/scrambled first ;
  n_shuffle = 2; %<-- total number of random shuffles. ;
  flag_rerun=0; %<-- regenerate file.; 
  cl_num = 1; %<-- train on platform 4. ;
  niteration = 400; %niteration = 475; %niteration = 325; %<-- iteration to select. ;
  %if flag_reverse==0;
  %if cl_num==1; niteration_ = [300,475]; end;
  %if cl_num==2; niteration_ = [200,325]; end;
  %if cl_num==3; niteration_ = [225,300,400,500]; end;
  %if cl_num==4; niteration_ = [175,325]; end;
  %end;%if flag_reverse==0;
  %if flag_reverse==1;
  %if cl_num==1; niteration_ = [200,300,400,475]; end;
  %if cl_num==2; niteration_ = [250,325]; end;
  %if cl_num==3; niteration_ = [350,525]; end;
  %if cl_num==4; niteration_ = [800]; end;
  %end;%if flag_reverse==1;
  pbs_walltime = 0*2.5; %<-- pbs walltime. ;
  slurm_walltime = 0*2.5; %<-- slurm walltime. ;
  slurm_nnodes = 1; %<-- number of nodes. ;
  slurm_tpn = 15; %<-- tasks per node. ;
  slurm_memdecl = 24; %<-- could be more if larger dataset. ;
  nshuffle = 0; %<-- current random shuffle. (0 means no shuffle) ;
  %%%%%%%%;
  specification = struct();
  specification.dir_trunk = dir_trunk;
  specification.dir_code = dir_code;
  specification.mr_string = mr_string;
  specification.mc_string = mc_string;
  specification.cl_num = cl_num;
  specification.flag_dex_vs_lak = flag_dex_vs_lak;
  specification.gamma = gamma;
  specification.B_MLT = B_MLT;
  specification.n_mds = n_mds;
  specification.flag_reverse = flag_reverse;
  specification.n_maf = n_maf;
  specification.n_cov = n_cov;
  specification.n_scramble = n_scramble;
  specification.n_shuffle = n_shuffle;
  specification.nshuffle = nshuffle;
  specification.flag_rerun = flag_rerun;
  specification.niteration = niteration;
  specification.pbs_walltime = pbs_walltime;
  specification.slurm_walltime = slurm_walltime;
  specification.slurm_nnodes = slurm_nnodes;
  specification.slurm_tpn = slurm_tpn;
  specification.slurm_memdecl = slurm_memdecl;
  %%%%%%%%;
  %lisa = lisa_struct_make_ver0(mr_string,mc_string,cl_num,flag_dex_vs_lak,gamma,B_MLT,n_mds,flag_reverse,n_maf,n_cov,n_scramble,n_shuffle) ;
  lisa = lisa_struct_xdrop_select_ver0(specification);
  lisa = lisa_struct_prefix_ver0(lisa,dir_code,dir_trunk); lisa.nshuffle = 0;  
  lisa = lisa_struct_names_ver0(lisa); 
  lisa = lisa_struct_xdrop_ver0(lisa);
  lisa = lisa_struct_mdsfam_ver0(lisa); 
  %lisa = lisa_struct_bim_ver0(lisa);  %<-- takes a long time. ;
  lisa = lisa_struct_mx_ver0(lisa); 
  lisa = lisa_struct_studyindex_ver0(lisa);
  lisa = lisa_struct_trace_ver0(lisa);
  %%%%%%%%;
  if (lisa.Icat>1); disp(sprintf(' %% Warning! Icat %d in lisa_struct_dcgxpander_PGC_uADZSZDA_ver0',lisa.Icat)); return; end;
  %%%%%%%%;
  out_xdrop_a_ = textread(sprintf('%s/out_xdrop_ni%d.txt',lisa.dir_out_s0_select,niteration));
  tmp_ij_ = find(out_xdrop_a_(:,1)>-1); rdrop_a_ = out_xdrop_a_(tmp_ij_,1)+1;
  tmp_ij_ = find(out_xdrop_a_(:,2)>-1); cdrop_a_ = out_xdrop_a_(tmp_ij_,2)+1;
  %%%%%%%%;
  lisa.dir_out_xpander_s0 = sprintf('%s/dir_xpander',lisa.dir_out_s0);
  if (~exist(lisa.dir_out_xpander_s0,'dir')); disp(sprintf(' %% mkdir %s',lisa.dir_out_xpander_s0)); mkdir(lisa.dir_out_xpander_s0); end;
  %%%%%%%%;
  xpander_s0_suffix = sprintf('xr%dxc%d',length(rdrop_a_),length(cdrop_a_));
  string_xpander_s0_specific = sprintf('%s_%s',lisa.string_name,xpander_s0_suffix);
  lisa.dir_out_xpander_s0_specific = sprintf('%s/dir_%s',lisa.dir_out_xpander_s0,string_xpander_s0_specific);
  if (~exist(lisa.dir_out_xpander_s0_specific,'dir')); disp(sprintf(' %% mkdir %s',lisa.dir_out_xpander_s0_specific)); mkdir(lisa.dir_out_xpander_s0_specific); end;
  lisa.dir_out_xpander_s0_specific_out_trace = sprintf('%s/dir_trace',lisa.dir_out_xpander_s0_specific);
  if (~exist(lisa.dir_out_xpander_s0_specific_out_trace,'dir')); disp(sprintf(' %% mkdir %s',lisa.dir_out_xpander_s0_specific_out_trace)); mkdir(lisa.dir_out_xpander_s0_specific_out_trace); end;
  %%%%%%%%;
  fname1_trace_xpander_s0 = sprintf('%s/out_trace.txt',lisa.dir_out_xpander_s0_specific);
  fname1_out_xgrow_a_xpander_s0 = sprintf('%s/out_xgrow_a.txt',lisa.dir_out_xpander_s0_specific);
  fname2_trace_xpander_s0 = sprintf('%s/out_trace_s0000.txt',lisa.dir_out_xpander_s0_specific_out_trace);
  fname2_out_xgrow_a_xpander_s0 = sprintf('%s/out_xgrow_a_s0000.txt',lisa.dir_out_xpander_s0_specific_out_trace);
  flag_exist1 = exist(fname1_trace_xpander_s0,'file') & exist(fname1_out_xgrow_a_xpander_s0,'file');
  flag_exist2 = exist(fname2_trace_xpander_s0,'file') & exist(fname2_out_xgrow_a_xpander_s0,'file');
  flag_exist_s0=0;
  if (flag_exist1 | flag_exist2);
  disp(sprintf(' %% found %s\n %% found %s',fname2_trace_xpander_s0,fname2_out_xgrow_a_xpander_s0));
  flag_exist_s0=1;
  else
    disp(sprintf(' %% did not find %s\n %% did not find %s',fname2_trace_xpander_s0,fname2_out_xgrow_a_xpander_s0));
  flag_exist_s0=0;
  end;%if exist;
  %%%%%%%%;
  string_timing = sprintf('%s/timing.m',lisa.dir_out_xpander_s0_specific);
  flag_timing = 0;
  if (exist(string_timing,'file')); run(string_timing); elrt_s0 = elrt; flag_timing = 1; end;
  %%%%%%%%;
  if nshuffle>0; xpander_sx_suffix = sprintf('s%.4d_xr%dxc%d',nshuffle,length(rdrop_a_),length(cdrop_a_)); end;
  if nshuffle==0; xpander_sx_suffix = sprintf('xr%dxc%d',length(rdrop_a_),length(cdrop_a_)); end;
  string_xpander_sx_specific = sprintf('%s_%s',lisa.string_name,xpander_sx_suffix);
  lisa.dir_out_xpander_sx_specific = sprintf('%s/dir_%s',lisa.dir_out_xpander_s0,string_xpander_sx_specific);
  fname1_trace_xpander_sx = sprintf('%s/out_trace.txt',lisa.dir_out_xpander_sx_specific);
  fname1_out_xgrow_a_xpander_sx = sprintf('%s/out_xgrow_a.txt',lisa.dir_out_xpander_sx_specific);
  fname2_trace_xpander_sx = sprintf('%s/out_trace_s%.4d.txt',lisa.dir_out_xpander_s0_specific_out_trace,nshuffle);
  fname2_out_xgrow_a_xpander_sx = sprintf('%s/out_xgrow_a_s%.4d.txt',lisa.dir_out_xpander_s0_specific_out_trace,nshuffle);
  flag_exist1 = exist(fname1_trace_xpander_sx,'file') & exist(fname1_out_xgrow_a_xpander_sx,'file');
  flag_exist2 = exist(fname2_trace_xpander_sx,'file') & exist(fname2_out_xgrow_a_xpander_sx,'file');
  flag_exist_sx=0;
  if (flag_exist1 | flag_exist2);
  disp(sprintf(' %% found %s\n %% found %s',fname2_trace_xpander_sx,fname2_out_xgrow_a_xpander_sx));
  flag_exist_sx=1;
  else
    disp(sprintf(' %% did not find %s\n %% did not find %s',fname2_trace_xpander_sx,fname2_out_xgrow_a_xpander_sx));
  flag_exist_sx=0;
  end;%if exist;
  %%%%%%%%;
  %%;
  %;
  %%;
  %%%%%%%%;
  % load traces. ;
  %%%%%%%%;
  out_xgrow_a_ = textread(sprintf('%s/out_xgrow_a.txt',lisa.dir_out_xpander_sx_specific));
  rgrow_a_ = out_xgrow_a_(find(out_xgrow_a_(:,1)>-1),1)+1;
  disp(sprintf(' %% rdrop_a %d intersection %d',length(rdrop_a_),length(intersect(rdrop_a_,rgrow_a_(1:length(rdrop_a_))))));
  cgrow_a_ = out_xgrow_a_(find(out_xgrow_a_(:,2)>-1),2)+1;
  disp(sprintf(' %% cdrop_a %d intersection %d',length(cdrop_a_),length(intersect(cdrop_a_,cgrow_a_(1:length(cdrop_a_))))));
  trace_xpander_s0_ = textread(sprintf('%s/out_trace.txt',lisa.dir_out_xpander_sx_specific));
  trace_xpander__ = cell(n_shuffle,1);
  n_shuffle_tmp=0; while (exist(sprintf('%s/out_trace_s%0.4d.txt',lisa.dir_out_xpander_s0_specific_out_trace,n_shuffle_tmp),'file')); n_shuffle_tmp = n_shuffle_tmp+1; end;
  n_shuffle_use = n_shuffle_tmp-1;
  disp(sprintf(' %% %d shuffles found ',n_shuffle_use));
  for nshuffle=0:n_shuffle_use;
  trace_xpander__{1+nshuffle} = textread(sprintf('%s/out_trace_s%0.4d.txt',lisa.dir_out_xpander_s0_specific_out_trace,nshuffle));
  end;%for nshuffle=0:n_shuffle_use;
  %%%%%%%%;
  % compare xpander_s0 trace with cluster trace. ;
  % Note that we 'normalize' the shuffled traces to have the same starting value. ;
  %%%%%%%%;
  subplot(2,2,1);hold on;
  plot(trace_xpander_s0_(:,2),trace_xpander_s0_(:,4),'g.-');
  plot(lisa.trace_{1}(:,2),lisa.trace_{1}(:,4),'r.-');
  for nshuffle=1:n_shuffle_use;
  %plot(trace_xpander__{1+nshuffle}(:,2),trace_xpander__{1+nshuffle}(:,4)/trace_xpander__{1+nshuffle}(1,4)*trace_xpander_s0_(1,4),'b-');
  plot(trace_xpander__{1+nshuffle}(:,2),trace_xpander__{1+nshuffle}(:,4) - trace_xpander__{1+nshuffle}(1,4) + trace_xpander_s0_(1,4),'b-');
  end;%for nshuffle=0:n_shuffle_use;
  hold off;
  xlim([0,length(rgrow_a_)]);
  yavg = 0.5*(max(trace_xpander_s0_(:,4)) + min(trace_xpander_s0_(:,4)));
  ylen = 0.5*(max(trace_xpander_s0_(:,4)) - min(trace_xpander_s0_(:,4)));
  ylim(yavg + 1.25*ylen*[-1,+1]);
  xlabel('patients remaining'); ylabel('QR');
  %%%%%%%%;
  subplot(2,2,2);hold on;
  plot(trace_xpander_s0_(:,3),trace_xpander_s0_(:,5),'g.-');
  plot(lisa.trace_{1}(:,3),lisa.trace_{1}(:,5),'r.-');
  for nshuffle=1:n_shuffle_use;
  %plot(trace_xpander__{1+nshuffle}(:,3),trace_xpander__{1+nshuffle}(:,5)/trace_xpander__{1+nshuffle}(1,5)*trace_xpander_s0_(1,5),'b-');
  plot(trace_xpander__{1+nshuffle}(:,3),trace_xpander__{1+nshuffle}(:,5) - trace_xpander__{1+nshuffle}(1,5) + trace_xpander_s0_(1,5),'b-');
  end;%for nshuffle=0:n_shuffle_use;
  hold off;
  xlim([0,length(cgrow_a_)]);
  yavg = 0.5*(max(trace_xpander_s0_(:,5)) + min(trace_xpander_s0_(:,5)));
  ylen = 0.5*(max(trace_xpander_s0_(:,5)) - min(trace_xpander_s0_(:,5)));
  ylim(yavg + 1.25*ylen*[-1,+1]);
  xlabel('snps remaining'); ylabel('QC');
  %%%%%%%%;
  subplot(2,2,3);hold on;
  tmp_shuffle_nij_ = trace_xpander__{1+1}(:,2);
  tmp_shuffle_avg_ = zeros(length(trace_xpander__{1+1}(:,1)),1);
  tmp_shuffle_std_ = zeros(length(trace_xpander__{1+1}(:,1)),1);
  for nshuffle=1:n_shuffle_use;
  tmp_shuffle_avg_ = tmp_shuffle_avg_ + trace_xpander__{1+nshuffle}(:,4) - trace_xpander__{1+nshuffle}(1,4) + trace_xpander_s0_(1,4);
  tmp_shuffle_std_ = tmp_shuffle_std_ + (trace_xpander__{1+nshuffle}(:,4) - trace_xpander__{1+nshuffle}(1,4) + trace_xpander_s0_(1,4)).^2;
  end;%for nshuffle=1:n_shuffle_use;
  tmp_shuffle_avg_ = tmp_shuffle_avg_/n_shuffle_use;
  tmp_shuffle_std_ = tmp_shuffle_std_/n_shuffle_use;
  tmp_shuffle_std_ = tmp_shuffle_std_ - tmp_shuffle_avg_.^2;
  tmp_shuffle_std_ = sqrt(tmp_shuffle_std_);
  tmp_ij_ = 1:length(trace_xpander_s0_(:,4));
  plot(trace_xpander_s0_(:,2),trace_xpander_s0_(:,4)-tmp_shuffle_avg_(tmp_ij_),'g.-');
  plot(lisa.trace_{1}(:,2),lisa.trace_{1}(:,4)-interp1([1;tmp_shuffle_nij_],[tmp_shuffle_avg_(1);tmp_shuffle_avg_],lisa.trace_{1}(:,2)),'r.-');
  for nshuffle=1:n_shuffle_use;
  plot(trace_xpander__{1+nshuffle}(:,2),trace_xpander__{1+nshuffle}(:,4) - trace_xpander__{1+nshuffle}(1,4) + trace_xpander_s0_(1,4) - tmp_shuffle_avg_,'b-');
  end;%for nshuffle=0:n_shuffle_use;
  hold off;
  xlim([0,length(rgrow_a_)]);
  tmp_ij_ = 1:length(trace_xpander_s0_(:,5));
  yavg = 0.5*(max(trace_xpander_s0_(:,4)-tmp_shuffle_avg_(tmp_ij_)) + min(trace_xpander_s0_(:,4)-tmp_shuffle_avg_(tmp_ij_)));
  ylen = 0.5*(max(trace_xpander_s0_(:,4)-tmp_shuffle_avg_(tmp_ij_)) - min(trace_xpander_s0_(:,4)-tmp_shuffle_avg_(tmp_ij_)));
  ylim(yavg + 1.25*ylen*[-1,+1]);
  xlabel('patients remaining'); ylabel('QR-shuffle');
  %%%%%%%%;
  subplot(2,2,4);hold on;
  tmp_shuffle_nij_ = trace_xpander__{1+1}(:,2);
  tmp_shuffle_avg_ = zeros(length(trace_xpander__{1+1}(:,1)),1);
  tmp_shuffle_std_ = zeros(length(trace_xpander__{1+1}(:,1)),1);
  for nshuffle=1:n_shuffle_use;
  tmp_shuffle_avg_ = tmp_shuffle_avg_ + trace_xpander__{1+nshuffle}(:,5) - trace_xpander__{1+nshuffle}(1,5) + trace_xpander_s0_(1,5);
  tmp_shuffle_std_ = tmp_shuffle_std_ + (trace_xpander__{1+nshuffle}(:,5) - trace_xpander__{1+nshuffle}(1,5) + trace_xpander_s0_(1,5)).^2;
  end;%for nshuffle=1:n_shuffle_use;
  tmp_shuffle_avg_ = tmp_shuffle_avg_/n_shuffle_use;
  tmp_shuffle_std_ = tmp_shuffle_std_/n_shuffle_use;
  tmp_shuffle_std_ = tmp_shuffle_std_ - tmp_shuffle_avg_.^2;
  tmp_shuffle_std_ = sqrt(tmp_shuffle_std_);
  tmp_ij_ = 1:length(trace_xpander_s0_(:,4));
  plot(trace_xpander_s0_(:,3),trace_xpander_s0_(:,5)-tmp_shuffle_avg_(tmp_ij_),'g.-');
  plot(lisa.trace_{1}(:,3),lisa.trace_{1}(:,5)-interp1([1;tmp_shuffle_nij_],[tmp_shuffle_avg_(1);tmp_shuffle_avg_],lisa.trace_{1}(:,2)),'r.-');
  for nshuffle=1:n_shuffle_use;
  plot(trace_xpander__{1+nshuffle}(:,3),trace_xpander__{1+nshuffle}(:,5) - trace_xpander__{1+nshuffle}(1,5) + trace_xpander_s0_(1,5) - tmp_shuffle_avg_,'b-');
  end;%for nshuffle=0:n_shuffle_use;
  hold off;
  xlim([0,length(cgrow_a_)]);
  yavg = 0.5*(max(trace_xpander_s0_(:,5)-tmp_shuffle_avg_(tmp_ij_)) + min(trace_xpander_s0_(:,5)-tmp_shuffle_avg_(tmp_ij_)));
  ylen = 0.5*(max(trace_xpander_s0_(:,5)-tmp_shuffle_avg_(tmp_ij_)) - min(trace_xpander_s0_(:,5)-tmp_shuffle_avg_(tmp_ij_)));
  ylim(yavg + 1.25*ylen*[-1,+1]);
  xlabel('snps remaining'); ylabel('QC-shuffle');
  %%%%%%%%;
  set(gcf,'Position',1+[0,0,1024*2,1024]);
  dir_jpg = sprintf('%s/dir_jpg',lisa.dir_out_xpander_s0_specific); if (~exist(dir_jpg,'dir')); disp(sprintf(' %% mkdir %s',dir_jpg)); mkdir(dir_jpg); end;
  tmp_fname = sprintf('%s/%s_trace_D.jpg',dir_jpg,string_xpander_s0_specific);
  disp(sprintf(' %% writing %s',tmp_fname));
  print('-djpeg',tmp_fname);
  tmp_fname = sprintf('%s/%s_trace_D.eps',dir_jpg,string_xpander_s0_specific);
  print('-depsc',tmp_fname);
  disp(sprintf(' %% writing %s',tmp_fname));

  %}
