% testing a loader for table data ;
clear;
setup;
dir_trunk = sprintf('/data/rangan/dir_bcc/dir_jamison');
dir_data = sprintf('%s/data_summary_20190730',dir_trunk);
%%%%%%%%;
flag_load=1;
%%%%%%%%;
if ~flag_load;
%%%%%%%%;
str_table_name = sprintf('%s/20161026_covariate_table.format.txt',dir_data);
disp(sprintf(' %% reading %s',str_table_name));
C_ = readtable(str_table_name);
disp(sprintf(' %% saving %s',str_table_name));
save(sprintf('%s/20161026_covariate_table.format.mat',dir_data),'C_');
%%%%%%%%;
str_table_name = sprintf('%s/EXON.Gx_50421.Cx_50.brain_table_merge_output.CPM.NotCtrl.NotEmpty.txt',dir_data);
disp(sprintf(' %% reading %s',str_table_name));
E_ = readtable(str_table_name);
disp(sprintf(' %% writing %s',str_table_name));
save(sprintf('%s/EXON.Gx_50421.Cx_50.brain_table_merge_output.CPM.NotCtrl.NotEmpty.mat',dir_data),'E_');
%%%%%%%%;
str_table_name = sprintf('%s/INTRON_INTERGENIC.Gx_25998.Cx_50.brain_table_merge_output.CPM.NotCtrl.NotEmpty.txt',dir_data);
disp(sprintf(' %% reading %s',str_table_name));
I_ = readtable(str_table_name);
disp(sprintf(' %% writing %s',str_table_name));
save(sprintf('%s/INTRON_INTERGENIC.Gx_25998.Cx_50.brain_table_merge_output.CPM.NotCtrl.NotEmpty.mat',dir_data),'I_');
%%%%%%%%;
end;%if ~flag_load;
%%%%%%%%;
if flag_load;
%%%%%%%%;
load(sprintf('%s/EXON.Gx_50421.Cx_50.brain_table_merge_output.CPM.NotCtrl.NotEmpty.mat',dir_data),'E_');
load(sprintf('%s/INTRON_INTERGENIC.Gx_25998.Cx_50.brain_table_merge_output.CPM.NotCtrl.NotEmpty.mat',dir_data),'I_');
load(sprintf('%s/20161026_covariate_table.format.mat',dir_data),'C_');
%%%%%%%%;
end;%if flag_load;

flag_E = 1;
flag_I = 1;

%%%%%%%%;
% Here we attempt to extract the gene-lengths. ;
%%%%%%%%;
str_table_name = sprintf('%s/EXON.Gx_50421.Cx_50.brain_table_merge_output.CPM.NotCtrl.NotEmpty.txt',dir_data);
fp = fopen(str_table_name); tmp_str = fgetl(fp); fclose(fp);
E_VariableName_ = strread(tmp_str,'%s','delimiter','\t');
clear tmp_str ;
%%%%%%%%;
str_table_name = sprintf('%s/INTRON_INTERGENIC.Gx_25998.Cx_50.brain_table_merge_output.CPM.NotCtrl.NotEmpty.txt',dir_data);
fp = fopen(str_table_name); tmp_str = fgetl(fp); fclose(fp);
I_VariableName_ = strread(tmp_str,'%s','delimiter','\t');
clear tmp_str ;
%%%%%%%%;
str_table_name = sprintf('%s/ensg_lengths.tsv',dir_data);
fp = fopen(str_table_name); gene_length_ = textscan(fp,'%s %d'); fclose(fp);
for ng=1:length(gene_length_{1});
end;%for ng=1:length(gene_length_{1});
%%%%%%%%;
[tmp_cap_,E_VariableName_to_cap_,gene_length_to_cap_] = intersect(E_VariableName_,gene_length_{1},'stable');
E_length_ = zeros(length(E_VariableName_),1);
E_length_(E_VariableName_to_cap_) = gene_length_{2}(gene_length_to_cap_);
flag_test=1;
if flag_test;
disp(sprintf(' %% testing E_length_ vs gene_length_ '));
n_i=1024;
for ni=1:n_i;
ng = max(1,min(length(tmp_cap_),floor(length(tmp_cap_)*rand())));
assert(strcmp(E_VariableName_(E_VariableName_to_cap_(ng)),gene_length_{1}(gene_length_to_cap_(ng))));
end;%for ni=1:n_i;
end;%if flag_test;
clear tmp_cap_;
%%%%%%%%;
[tmp_cap_,I_VariableName_to_cap_,gene_length_to_cap_] = intersect(I_VariableName_,gene_length_{1},'stable');
I_length_ = zeros(length(I_VariableName_),1);
I_length_(I_VariableName_to_cap_) = gene_length_{2}(gene_length_to_cap_);
flag_test=1;
if flag_test;
disp(sprintf(' %% testing I_length_ vs gene_length_ '));
n_i=1024;
for ni=1:n_i;
ng = max(1,min(length(tmp_cap_),floor(length(tmp_cap_)*rand())));
assert(strcmp(I_VariableName_(I_VariableName_to_cap_(ng)),gene_length_{1}(gene_length_to_cap_(ng))));
end;%for ni=1:n_i;
end;%if flag_test;
clear tmp_cap_;
%%%%%%%%;
% Note that only 6660 (13%) of the E_ are found, and only 5379 (21%) of the I_ are found. ;
%%%%%%%%;

Label_ID_ = unique(C_.Cluster_ID_20161007);
n_Label_ID = length(Label_ID_);
n_Label_ID_ = zeros(n_Label_ID,1);
for nLabel_ID = 1:n_Label_ID;
n_Label_ID_(nLabel_ID) = length(find(strcmp(C_.Cluster_ID_20161007,Label_ID_(nLabel_ID))));
end;%for nLabel_ID = 1:n_Label_ID;
flag_plot=0;
if flag_plot;
bar(1:n_Label_ID,n_Label_ID_);
set(gca,'XTick',1:n_Label_ID,'XTickLabel',Label_ID_); xtickangle(90);
xlabel('cluster label');
ylabel('number');
title('histogram of cluster label counts');
set(gcf,'Position',1+[0,0,1024*2,1024]);
fname_base = sprintf('%s/dir_jpg/label_count_C',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
end;%if flag_plot;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
% First pass at defining E_val_ and I_val_ ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
E_ID_ = E_{:,1};
I_ID_ = E_{:,1};
C_ID_ = C_{:,1}; 
u_ID_ = intersectall({E_ID_,I_ID_,C_ID_});
n_u = length(u_ID_);
[~,~,E_to_u_ID_] = intersect(u_ID_,E_ID_,'stable');
[~,~,I_to_u_ID_] = intersect(u_ID_,I_ID_,'stable');
[~,~,C_to_u_ID_] = intersect(u_ID_,C_ID_,'stable');
%%%%%%%%;
flag_test=1;
if flag_test;
disp(sprintf(' %% testing E_to_C_ID_'));
n_i = 1024;
for ni=1:n_i;
nu = max(1,min(n_u,floor(n_u*rand())));
nE_ID = E_to_u_ID_(nu);
nI_ID = I_to_u_ID_(nu);
nC_ID = C_to_u_ID_(nu);
assert(strcmp(C_ID_(nC_ID),E_ID_(nE_ID)));
assert(strcmp(C_ID_(nC_ID),I_ID_(nE_ID)));
end;%for ni=1:n_i;
disp(sprintf(' %% finished testing E_to_C_ID_'));
end;%if flag_test;
%%%%%%%%;
% Extracting unique cluster labels. ;
%%%%%%%%;
u_CLabel_ = unique(C_.Cluster_ID_20161007(C_to_u_ID_));
n_CLabel = length(u_CLabel_);
n_CLabel_ = zeros(n_CLabel,1);
for nCLabel = 1:n_CLabel;
n_CLabel_(nCLabel) = length(find(strcmp(C_.Cluster_ID_20161007(C_to_u_ID_),u_CLabel_(nCLabel))));
end;%for nCLabel = 1:n_CLabel;
flag_plot=0;
if flag_plot;
bar(1:n_CLabel,n_CLabel_);
set(gca,'XTick',1:n_CLabel,'XTickLabel',u_CLabel_); xtickangle(90);
xlabel('cluster label');
ylabel('number');
title('histogram of cluster label counts');
set(gcf,'Position',1+[0,0,1024*2,1024]);
fname_base = sprintf('%s/dir_jpg/label_count_I',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
end;%if flag_plot;
%%%%%%%%;
% Generating ordered matrices of gene-values. ;
%%%%%%%%;
if flag_E;
E_col_val_ = 52:size(E_,2)-1; %<-- gene list begins after 'Fail Confidence Sum' ;
%E_val_ = decostand_total_0(E_{E_to_u_ID_,E_col_val_},'col');
E_val_ = E_{E_to_u_ID_,E_col_val_};
n_E_GENE = size(E_val_,2);
end;%if flag_E;
if flag_I;
I_col_val_ = 52:size(I_,2)-1;
%I_val_ = decostand_total_0(I_{I_to_u_ID_,I_col_val_},'col');
I_val_ = I_{I_to_u_ID_,I_col_val_};
n_I_GENE = size(I_val_,2);  %<-- gene list begins after 'Fail Confidence Sum' ;
end;%if flag_I;
%assert(size(I_val_,1)==size(E_val_,1)); %<-- fewer samples in E_. ;
%%%%%%%%;
% Now check for bimodality of gene expression across samples: ;
%%%%%%%%;
flag_plot=0;
if flag_plot;
clf;
subplot(2,1,1); tmp_b_ = 0:0.25:6; tmp_h_ = hist(log10(1+E_{E_to_u_ID_,E_col_val_}),tmp_b_); colormap(colormap_beach()); imagesc(log10(1+tmp_h_),[0,3]); xlabel('gene index'); ylabel('log #'); title('E distribution');
subplot(2,1,2); tmp_b_ = 0:0.25:6; tmp_h_ = hist(log10(1+I_{I_to_u_ID_,I_col_val_}),tmp_b_); colormap(colormap_beach()); imagesc(log10(1+tmp_h_),[0,3]); xlabel('gene index'); ylabel('log #'); title('I distribution');
fname_base = sprintf('%s/dir_jpg/expression_histogram',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
end;%if flag_plot;
%%%%%%%%;

%%%%%%%%;
% Determining cutoffs for outliers. ;
%%%%%%%%;
E_val_m1_ = sum(E_val_<=0,1)./n_u; 
I_val_m1_ = sum(I_val_<=0,1)./n_u; 
m1_threshold = 0.90; %<-- 90 percent missing. ;
disp(sprintf(' %% s1 threshold %0.2f',m1_threshold));
clf;
subplot(1,2,1);plot(1:n_E_GENE,sort(E_val_m1_),'.',1:n_E_GENE,m1_threshold*ones(1,n_E_GENE),'k:'); xlabel('sorted gene index'); ylabel('fraction missing samples'); xlim([1,n_E_GENE]); ylim([0,1]);
subplot(1,2,2);plot(1:n_I_GENE,sort(I_val_m1_),'.',1:n_I_GENE,m1_threshold*ones(1,n_I_GENE),'k:'); xlabel('sorted gene index'); ylabel('fraction missing samples'); xlim([1,n_I_GENE]); ylim([0,1]);
fname_base = sprintf('%s/dir_jpg/expression_m1_cdf',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
E_m1_ij_ = find(E_val_m1_<m1_threshold); I_m1_ij_ = find(I_val_m1_<m1_threshold);
%E_m1_ij_ = 1:1e4; I_m1_ij_ = 1:1e4;
E_val_m2_ = sum(log10(1e-12 + E_val_(:,E_m1_ij_)),2);
I_val_m2_ = sum(log10(1e-12 + I_val_(:,I_m1_ij_)),2);
clf;
m2_threshold = so2g_mle_fminsearch(E_val_m2_ + I_val_m2_);
fname_base = sprintf('%s/dir_jpg/expression_m2_histogram',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
disp(sprintf(' %% m2 threshold %0.2f',m2_threshold));
X_m2_ij_ = find(E_val_m2_+I_val_m2_ > m2_threshold);
disp(sprintf(' %% %d/%d = %0.2f samples above m2_threshold',length(X_m2_ij_),n_u,length(X_m2_ij_)/n_u));
X_m2_ij_ = 1:n_u; disp(sprintf(' %% retaining all samples. '));

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
% Second pass at defining E_val_ and I_val_ ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
u_ID_ = u_ID_(X_m2_ij_);
n_u = length(u_ID_);
[~,~,E_to_u_ID_] = intersect(u_ID_,E_ID_,'stable');
[~,~,I_to_u_ID_] = intersect(u_ID_,I_ID_,'stable');
[~,~,C_to_u_ID_] = intersect(u_ID_,C_ID_,'stable');
%%%%%%%%;
flag_test=1;
if flag_test;
disp(sprintf(' %% testing E_to_C_ID_'));
n_i = 1024;
for ni=1:n_i;
nu = max(1,min(n_u,floor(n_u*rand())));
nE_ID = E_to_u_ID_(nu);
nI_ID = I_to_u_ID_(nu);
nC_ID = C_to_u_ID_(nu);
assert(strcmp(C_ID_(nC_ID),E_ID_(nE_ID)));
assert(strcmp(C_ID_(nC_ID),I_ID_(nE_ID)));
end;%for ni=1:n_i;
disp(sprintf(' %% finished testing E_to_C_ID_'));
end;%if flag_test;
%%%%%%%%;
% Extracting unique cluster labels. ;
%%%%%%%%;
str_CLabel_ = C_.Cluster_ID_20161007(C_to_u_ID_);
u_CLabel_ = unique(C_.Cluster_ID_20161007(C_to_u_ID_));
n_CLabel = length(u_CLabel_);
n_CLabel_ = zeros(n_CLabel,1);
for nCLabel = 1:n_CLabel;
n_CLabel_(nCLabel) = length(find(strcmp(C_.Cluster_ID_20161007(C_to_u_ID_),u_CLabel_(nCLabel))));
end;%for nCLabel = 1:n_CLabel;
CLabel_sub_ = zeros(n_u,1);
for nCLabel=1:n_CLabel;
tmp_ij_ = find(strcmp(str_CLabel_,u_CLabel_(nCLabel)));
if (~isempty(str2num(u_CLabel_{nCLabel})));
CLabel_sub_(tmp_ij_) = str2num(u_CLabel_{nCLabel});
end;%if (~isempty(str2num(u_CLabel_{nCLabel})));
end;%for nCLabel=1:n_CLabel;
flag_plot=0;
if flag_plot;
bar(1:n_CLabel,n_CLabel_);
set(gca,'XTick',1:n_CLabel,'XTickLabel',u_CLabel_); xtickangle(90);
xlabel('cluster label');
ylabel('number');
title('histogram of cluster label counts');
set(gcf,'Position',1+[0,0,1024*2,1024]);
fname_base = sprintf('%s/dir_jpg/label_count_sub',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
end;%if flag_plot;
%%%%%%%%;
% Generating ordered matrices of gene-values. ;
%%%%%%%%;
if flag_E;
E_col_val_ = 52:size(E_,2)-1; %<-- gene list begins after 'Fail Confidence Sum' ;
E_col_val_ = E_col_val_(E_m1_ij_);
E_VariableName_sub_ = E_VariableName_(E_col_val_);
%E_val_ = decostand_total_0(E_{E_to_u_ID_,E_col_val_},'col');
E_val_ = E_{E_to_u_ID_,E_col_val_};
n_E_GENE = size(E_val_,2);
end;%if flag_E;
if flag_I;
I_col_val_ = 52:size(I_,2)-1;
I_col_val_ = I_col_val_(I_m1_ij_);
I_VariableName_sub_ = I_VariableName_(I_col_val_);
%I_val_ = decostand_total_0(I_{I_to_u_ID_,I_col_val_},'col');
I_val_ = I_{I_to_u_ID_,I_col_val_};
n_I_GENE = size(I_val_,2);  %<-- gene list begins after 'Fail Confidence Sum' ;
end;%if flag_I;
assert(size(I_val_,1)==size(E_val_,1)); %<-- same number of samples in I_ and E_. ;
%%%%%%%%;
% Now check for bimodality of gene expression across samples: ;
%%%%%%%%;
flag_plot=0;
if flag_plot;
clf;
subplot(2,1,1); tmp_b_ = 0:0.25:6; tmp_h_ = hist(log10(1+E_{E_to_u_ID_,E_col_val_}),tmp_b_); colormap(colormap_beach()); imagesc(log10(1+tmp_h_),[0,3]); xlabel('gene index'); ylabel('log #'); title('E distribution');
subplot(2,1,2); tmp_b_ = 0:0.25:6; tmp_h_ = hist(log10(1+I_{I_to_u_ID_,I_col_val_}),tmp_b_); colormap(colormap_beach()); imagesc(log10(1+tmp_h_),[0,3]); xlabel('gene index'); ylabel('log #'); title('I distribution');
fname_base = sprintf('%s/dir_jpg/expression_histogram_sub',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
end;%if flag_plot;
%%%%%%%%;

%{
%%%%%%%%;
% look at bimodal distribution of values. ;
% Does not appear as though the zeros are ordered. ;
%%%%%%%%;
tmp_ij_ = find(E_val_~=0);
E_nz_ = log(E_val_(tmp_ij_));
[E_lval_threshold] = so2g_mle_fminsearch(E_nz_);
tmp_E_ = zeros(size(E_val_));
tmp_E_(tmp_ij_(find(E_nz_<E_lval_threshold)))=-1;
tmp_E_(tmp_ij_(find(E_nz_>E_lval_threshold)))=+1;
tmp_E_(find(E_val_==0))=0;
flag_plot=0;
if flag_plot;
subplot(4,3,[1,2,3,4,5,6]); imagesc(tmp_E_,[-1,+1]); colormap(colormap_beach()); title('E_lval thresholded');
subplot(4,3,7); plot(sum(tmp_E_==-1,2),'.'); title('m2 -1'); xlim([1,n_u]);
subplot(4,3,8); plot(sum(tmp_E_== 0,2),'.'); title('m2  0'); xlim([1,n_u]);
subplot(4,3,9); plot(sum(tmp_E_==+1,2),'.'); title('m2 +1'); xlim([1,n_u]);
subplot(4,3,10); plot(sum(tmp_E_==-1,1),'.'); title('m1 -1'); xlim([1,n_E_GENE]);
subplot(4,3,11); plot(sum(tmp_E_== 0,1),'.'); title('m1  0'); xlim([1,n_E_GENE]);
subplot(4,3,12); plot(sum(tmp_E_==+1,1),'.'); title('m1 +1'); xlim([1,n_E_GENE]);
figbig;
fname_base = sprintf('%s/dir_jpg/E_lval_so2g',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
end;%if flag_plot;
%%%%%%%%;
tmp_ij_ = find(I_val_~=0);
I_nz_ = log(I_val_(tmp_ij_));
[I_lval_threshold] = so2g_mle_fminsearch(I_nz_);
tmp_I_ = zeros(size(I_val_));
tmp_I_(tmp_ij_(find(I_nz_<I_lval_threshold)))=-1;
tmp_I_(tmp_ij_(find(I_nz_>I_lval_threshold)))=+1;
tmp_I_(find(I_val_==0))=0;
flag_plot=0;
if flag_plot;
subplot(4,3,[1,2,3,4,5,6]); imagesc(tmp_I_,[-1,+1]); colormap(colormap_beach()); title('I_lval thresholded');
subplot(4,3,7); plot(sum(tmp_I_==-1,2),'.'); title('m2 -1'); xlim([1,n_u]);
subplot(4,3,8); plot(sum(tmp_I_== 0,2),'.'); title('m2  0'); xlim([1,n_u]);
subplot(4,3,9); plot(sum(tmp_I_==+1,2),'.'); title('m2 +1'); xlim([1,n_u]);
subplot(4,3,10); plot(sum(tmp_I_==-1,1),'.'); title('m1 -1'); xlim([1,n_I_GENE]);
subplot(4,3,11); plot(sum(tmp_I_== 0,1),'.'); title('m1  0'); xlim([1,n_I_GENE]);
subplot(4,3,12); plot(sum(tmp_I_==+1,1),'.'); title('m1 +1'); xlim([1,n_I_GENE]);
figbig;
fname_base = sprintf('%s/dir_jpg/I_lval_so2g',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
end;%if flag_plot;
%%%%%%%%;
 %}

%%%%%%%%;
% attempt svd-based imputation. ;
%%%%%%%%;
n_rank = 6;
if flag_load==0;
ij_missing_ = find(E_val_<=0); ij_filled_ = setdiff(1:n_E_GENE,ij_missing_); E_limp_ = svd_impute(log(max(1e-12,E_val_)),ij_missing_,n_rank);
ij_missing_ = find(I_val_<=0); ij_filled_ = setdiff(1:n_I_GENE,ij_missing_); I_limp_ = svd_impute(log(max(1e-12,I_val_)),ij_missing_,n_rank);
save('/data/rangan/dir_bcc/dir_jamison/E_limp_.mat','E_limp_');
save('/data/rangan/dir_bcc/dir_jamison/I_limp_.mat','I_limp_');
end;%if flag_load==0;
if flag_load==1;
load('/data/rangan/dir_bcc/dir_jamison/E_limp_.mat','E_limp_');
load('/data/rangan/dir_bcc/dir_jamison/I_limp_.mat','I_limp_');
end;%if flag_load==1;

%%%%%%%%;
% First apply max/min cutoffs at 01 and 99 percentiles. ;
% Then apply centered log ratio. ;
%%%%%%%%;
tmp_99 = prctile(E_limp_(:),99); tmp_01 = prctile(E_limp_(:), 1);
E_licl_ = mean_center_0(max(tmp_01,min(tmp_99,E_limp_)),'col');
tmp_99 = prctile(I_limp_(:),99); tmp_01 = prctile(I_limp_(:), 1);
I_licl_ = mean_center_0(max(tmp_01,min(tmp_99,I_limp_)),'col');

%%%%%%%%;
% Generating rank-normalized matrices. ;
%%%%%%%%;
if flag_E; E_licr_ = rank_normalize_0(E_licl_,'row'); end;
if flag_I; I_licr_ = rank_normalize_0(I_licl_,'row'); end;

%%%%%%%%;
% Extracting glossary. ;
% The vector 'LC' will list the LinearCorrelationWithPositiveQuality. ;
%%%%%%%%;
str_table_name = sprintf('%s/metric_glossary.txt',dir_data);
G_ = readtable(str_table_name); n_G = size(G_,1);
G_h_ = zeros(255,n_G); 
for nG=1:n_G;
G_h_(:,nG) = hist(cast(cast(G_{nG,1}{1},'uint8'),'double'),1:255);
end;%for nG=1:n_G;
G_h_mask_ = zeros(255,1);
G_h_mask_(cast('0','uint8'):cast('9','uint8')) = 1;
G_h_mask_(cast('A','uint8'):cast('Z','uint8')) = 1;
G_h_mask_(cast('a','uint8'):cast('z','uint8')) = 1;
G_h_ = G_h_.*repmat(G_h_mask_,1,n_G);
for nG=1:n_G;
G_h_(:,nG) = G_h_(:,nG)/norm(G_h_(:,nG),'fro');
end;%for nG=1:n_G;

%%%%%%%%;
% Extracting categorical covariates. ;
%%%%%%%%;
B_col_val_ = setdiff(7:23,[9,10,11,13,15,16,21,22,23]);
% 09 --> cell [1] x3ClassPrediction: 
% 10 <-- FailConfidencSum (double);
% 13 <-- SampleCount (double) ;
% 11 --> cell [47] max_leaf: 
% 15 --> cell [283] well: 
% 16 --> cell [9] batch: 
% 21 --> double [48] SequencingLane: 
% 22 --> double [3] FailState: 
% 23 --> double [12] RunID: 
n_BCOV = length(B_col_val_);
disp(sprintf(' %% %% %% %% '));
for nB=1:n_BCOV;
nc = B_col_val_(nB);
tmp_str = C_.Properties.VariableNames{nc};
tmp_ij = find(strcmp(G_{:,1},tmp_str));
tmp_LC = 0;
if ( isempty(tmp_ij)); disp(sprintf(' %% Warning! %s not found in glossary',tmp_str)); end;
if (~isempty(tmp_ij)); 
tmp_LC_str = G_{tmp_ij,2};
if strcmp(tmp_LC_str,'NA'); tmp_LC = 0; end;
if strcmp(tmp_LC_str,'Unknown'); tmp_LC = 0; end;
if strcmp(tmp_LC_str,'Positive'); tmp_LC = +1; end;
if strcmp(tmp_LC_str,'Negative'); tmp_LC = -1; end;
end;%if (~isempty(tmp_ij));
tmp_type = class(C_{C_to_u_ID_,nc});
tmp_u_ = unique(C_{C_to_u_ID_,nc});
disp(sprintf(' %% %0.2d --> %s [%d] %s [LC %d]: ',nc,tmp_type,length(tmp_u_),tmp_str,tmp_LC));
for nu=1:length(tmp_u_);
if strcmp(tmp_type,'cell');   disp(sprintf(' %% %% %s: %d',tmp_u_{nu},length(find(strcmp(C_{C_to_u_ID_,nc},tmp_u_{nu}))))); end;
if strcmp(tmp_type,'double'); disp(sprintf(' %% %% %d: %d',tmp_u_(nu),length(find(C_{C_to_u_ID_,nc} == tmp_u_(nu))))); end;
end;%for nu=1:length(tmp_u_);
disp(sprintf(' %% %% %% %% '));
end;%for nB=1:n_BCOV;
clear tmp_str tmp_ij tmp_LC tmp_LC_str tmp_type tmp_u_ ;
%%%%%%%%;
% Note that all LC are 0 for the categorical covariates. ;
%%%%%%%%;

%%%%%%%%;
n_FACTOR = 0; B_val_ = zeros(n_u,0); B_VariableName_ = cell(0);
%%%%%%%%;
% Cluster_Grp_20161007:
%%%%%%%%;
nc=7; tmp_str = 'exc'; 
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(strcmp(C_{C_to_u_ID_,nc},tmp_str)); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
nc=7; tmp_str = 'glia'; 
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(strcmp(C_{C_to_u_ID_,nc},tmp_str)); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
nc=7; tmp_str = 'inh'; 
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(strcmp(C_{C_to_u_ID_,nc},tmp_str)); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
%%%%%%%%;
% IsOutlier_20161007: 
%%%%%%%%;
nc=8; tmp_str = 'no'; 
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(strcmp(C_{C_to_u_ID_,nc},tmp_str)); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
nc=8; tmp_str = 'yes'; 
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(strcmp(C_{C_to_u_ID_,nc},tmp_str)); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
%%%%%%%%;
% cell_class: 
%%%%%%%%;
nc=12; tmp_str = 'GABAergic'; 
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(strcmp(C_{C_to_u_ID_,nc},tmp_str)); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
nc=12; tmp_str = 'Glutamatergic'; 
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(strcmp(C_{C_to_u_ID_,nc},tmp_str)); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
nc=12; tmp_str = 'Non-neuronal'; 
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(strcmp(C_{C_to_u_ID_,nc},tmp_str)); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
%%%%%%%%;
% BatchCount: 
%%%%%%%%;
nc=14; tmp_d = 1;
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(C_{C_to_u_ID_,nc}==tmp_d); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
nc=14; tmp_d = 2;
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(C_{C_to_u_ID_,nc}==tmp_d); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
nc=14; tmp_d = 3;
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(C_{C_to_u_ID_,nc}==tmp_d); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
%%%%%%%%;
% neun:
%%%%%%%%;
nc=17; tmp_str = '1NeuNN'; 
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(strcmp(C_{C_to_u_ID_,nc},tmp_str)); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
nc=17; tmp_str = '1NeuNP'; 
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(strcmp(C_{C_to_u_ID_,nc},tmp_str)); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
%%%%%%%%;
% patient_id: 
%%%%%%%%;
nc=18; tmp_str1 = 'H200-1025'; tmp_str2 = 'H200.1025'; 
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(strcmp(C_{C_to_u_ID_,nc},tmp_str1) | strcmp(C_{C_to_u_ID_,nc},tmp_str2)); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
nc=18; tmp_str1 = 'H200-1030'; tmp_str2 = 'H200.1030'; 
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(strcmp(C_{C_to_u_ID_,nc},tmp_str1) | strcmp(C_{C_to_u_ID_,nc},tmp_str2)); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
%%%%%%%%;
% region:
%%%%%%%%;
nc=19; tmp_str = 'FI'; 
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(strcmp(C_{C_to_u_ID_,nc},tmp_str)); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
nc=19; tmp_str = 'MTG'; 
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(strcmp(C_{C_to_u_ID_,nc},tmp_str)); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
%%%%%%%%;
% layer: 
%%%%%%%%;
nc=20; tmp_str = '1'; 
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(strcmp(C_{C_to_u_ID_,nc},tmp_str)); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
nc=20; tmp_str = '5'; 
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(strcmp(C_{C_to_u_ID_,nc},tmp_str)); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
%%%%%%%%;
clear tmp_ij_ tmp_str tmp_str1 tmp_str2 ;

%%%%%%%%;
% Ranking categorical covariates. ;
%%%%%%%%;
B_rank_ = rank_normalize_0(B_val_); n_BCOV = size(B_rank_,2);
%%%%%%%%;
% Because LC = 0 for all categorical covariates, we can assign B_LC_ now. ;
%%%%%%%%;
B_LC_ = zeros(n_BCOV,1);

%%%%%%%%;
% Extracting continuous covariates. ;
%%%%%%%%;
D_col_val_ = [10,13,24:size(C_,2)];
str_exclude_ = {'fastQCResult','x_P_E__RawSeq__','x_Num_1_NumberOfInputCoreGenes_CoreGenes_','x_Num_2_NumberOfInputCoreGenes_CoreGenes_','x_MitoCore_NumberOfInputCoreGenes_CoreGenes_','x_MitoCore13_NumberOfInputCoreGenes_CoreGenes_','x_P_E__Pretrimmed_ERCCAligned_'};
for ne=1:length(str_exclude_);
nx = find(strcmp(C_.Properties.VariableNames,str_exclude_{ne}));
disp(sprintf(' %% excluding %s <-- %d <-- %s',str_exclude_{ne},nx,C_.Properties.VariableNames{nx}));
D_col_val_ = setdiff(D_col_val_,nx);
end;%for ne=1:length(str_exclude_);
%%%%%%%%;
n_D_col_val = length(D_col_val_); n_DCOV = n_D_col_val;
D_val_ = zeros(n_u,n_DCOV);
D_LC_ = zeros(n_DCOV,1);
D_VariableName_ = cell(n_D_col_val,1);
for nc=1:n_D_col_val;
D_col_val = D_col_val_(nc);
D_VariableName_{nc} = C_.Properties.VariableNames{D_col_val};
tmp_ij = find(strcmp(G_{:,1},D_VariableName_{nc}));
tmp_LC = 0;
if ( isempty(tmp_ij)); 
disp(sprintf(' %% %s no exact match found in glossary',D_VariableName_{nc})); 
tmp_h_ = hist(cast(cast(D_VariableName_{nc},'uint8'),'double'),1:255);
tmp_h_ = tmp_h_.*transpose(G_h_mask_);
tmp_h_ = tmp_h_/norm(tmp_h_,'fro');
[~,tmp_ij] = max(tmp_h_*G_h_);
disp(sprintf(' %% %s closest match: %s (%d)',D_VariableName_{nc},G_{tmp_ij,1}{1},tmp_ij));
end;%if ( isempty(tmp_ij)); 
if (~isempty(tmp_ij)); 
tmp_LC_str = G_{tmp_ij,2};
if strcmp(tmp_LC_str,'NA'); tmp_LC = 0; end;
if strcmp(tmp_LC_str,'Unknown'); tmp_LC = 0; end;
if strcmp(tmp_LC_str,'Positive'); tmp_LC = +1; end;
if strcmp(tmp_LC_str,'Negative'); tmp_LC = -1; end;
disp(sprintf(' %% %s found in glossary: %d',D_VariableName_{nc},tmp_LC));
end;%if (~isempty(tmp_ij)); 
D_LC_(nc) = tmp_LC;
tmp_D_val_ = C_(C_to_u_ID_,D_col_val); 
if strcmp(class(tmp_D_val_{1,1}),'double'); D_val_(:,nc) = tmp_D_val_{1:end,1};
elseif strcmp(class(tmp_D_val_{1,1}),'cell'); D_val_(:,nc) = cellfun(@str2num,tmp_D_val_{1:end,1}); 
else disp(sprintf(' %% nc %d D_col_val %d LC %d class %s',nc,D_col_val,D_LC_(nc),class(tmp_D_val_{1,1}))); end;
end;%for nc=1:n_D_col_val;
D_rank_ = rank_normalize_0(D_val_);
clear tmp_ij tmp_LC tmp_h_ tmp_LC_str tmp_D_val_ ;

%%%%%%%%;
% Stacking together B_rank_ and D_rank_. ;
%%%%%%%%;
n_CCOV = n_BCOV + n_DCOV;
C_VariableName_ = {B_VariableName_{:},D_VariableName_{:}};
C_val_ = [B_val_ , D_val_];
C_rank_ = [B_rank_ , D_rank_];
C_LC_ = [B_LC_ ; D_LC_];
C_VariableName_LC_ = C_VariableName_;
for nCCOV=1:n_CCOV;
if C_LC_(nCCOV) == -1; tmp_suffix = '[ - ]'; end;
if C_LC_(nCCOV) ==  0; tmp_suffix = '[    ]'; end;
if C_LC_(nCCOV) == +1; tmp_suffix = '[+]'; end;
C_VariableName_LC_{nCCOV} = sprintf('%s_%s',C_VariableName_{nCCOV},tmp_suffix);
end;%for nCCOV=1:n_CCOV;
clear tmp_suffix ;

flag_correlation=0;
if flag_correlation;
if flag_E;
%%%%%%%%;
% Now measure correlation across samples of E_ and C_. ;
%%%%%%%%;
tmp_rank_avg_ = mean(C_rank_,1); tmp_rank_std_ = max(1,std(C_rank_,1,1));
tmp_C_ = (C_rank_ - repmat(tmp_rank_avg_,n_u,1))./repmat(tmp_rank_std_,n_u,1);
tmp_rank_avg_ = mean(E_licr_,1); tmp_rank_std_ = max(1,std(E_licr_,1,1));
tmp_E_ = (E_licr_ - repmat(tmp_rank_avg_,n_u,1))./repmat(tmp_rank_std_,n_u,1);
clear tmp_rank_avg_ tmp_rank_std_;
CtEn_rank_ = transpose(tmp_C_)*tmp_E_ / n_u;
[tmp_U_,tmp_S_,tmp_V_] = svds(CtEn_rank_,1); [~,CtEn_rank_U_ij_] = sort(tmp_U_,'descend'); [~,CtEn_rank_V_ij_] = sort(tmp_V_,'descend');
CtEn_rank_ori_ = CtEn_rank_(CtEn_rank_U_ij_,CtEn_rank_V_ij_);
clear CtEn_rank_ tmp_U_ tmp_S_ tmp_V_ ;
flag_disp=0;
if flag_disp;
clf;
colormap(colormap_beach()); 
imagesc(transpose(CtEn_rank_ori_),[-1,+1]); 
set(gca,'XTick',1:n_CCOV,'XTickLabel',C_VariableName_LC_(CtEn_rank_U_ij_),'TickLabelInterpreter','none'); xtickangle(90);
set(gca,'FontSize',7);
xlabel('covariates'); ylabel('genes'); title('Correlation between Genes and Covariates');
set(gcf,'Position',1+[0,0,1024*2,1024]);
colorbar;
fname_base = sprintf('%s/dir_jpg/CtEn_sub_ori',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
end;%if flag_disp;
n_iteration  = 16;
CtEn_rank_avg_ = zeros(n_CCOV,n_E_GENE);
CtEn_rank_std_ = zeros(n_CCOV,n_E_GENE);
for niteration=1:n_iteration;
if (mod(niteration,10)==0); disp(sprintf(' %% niteration %d/%d',niteration,n_iteration)); end;
[tmp_Q_,~] = qr(randn(n_u));
tmp_CtEn_rank_ = transpose(tmp_C_)*tmp_Q_*tmp_E_ / n_u; clear tmp_Q_;
[tmp_U_,tmp_S_,tmp_V_] = svds(tmp_CtEn_rank_,1); [~,tmp_CtEn_rank_U_ij_] = sort(tmp_U_,'descend'); [~,tmp_CtEn_rank_V_ij_] = sort(tmp_V_,'descend');
CtEn_rank_avg_ = CtEn_rank_avg_ + tmp_CtEn_rank_(tmp_CtEn_rank_U_ij_,tmp_CtEn_rank_V_ij_);
CtEn_rank_std_ = CtEn_rank_std_ + tmp_CtEn_rank_(tmp_CtEn_rank_U_ij_,tmp_CtEn_rank_V_ij_).^2;
clear tmp_CtEn_rank_ tmp_U_ tmp_S_ tmp_V_ tmp_CtEn_rank_U_ij_ tmp_CtEn_rank_V_ij_ ;
end;%for niteration=1:n_iteration;
CtEn_rank_avg_ = CtEn_rank_avg_/n_iteration;
CtEn_rank_std_ = sqrt(CtEn_rank_std_/n_iteration - CtEn_rank_avg_.^2);
CtEn_rank_Z_ = ( CtEn_rank_ori_ - CtEn_rank_avg_ ) ./ CtEn_rank_std_ ;
%CtEn_rank_p_ = 0.5 * erfc( CtEn_rank_Z_ / sqrt(2) ) ;
CtEn_rank_p_ = 1.0 * erfc( abs(CtEn_rank_Z_) / sqrt(2) ) ; %<-- two sided. ;
clear tmp_C_ tmp_E_;
flag_disp=0;
if flag_disp;
clf;
colormap(colormap_beach()); 
imagesc(transpose(-log10(CtEn_rank_p_)),[0,+15]); 
set(gca,'XTick',1:n_CCOV,'XTickLabel',C_VariableName_LC_(CtEn_rank_U_ij_),'TickLabelInterpreter','none'); xtickangle(90);
set(gca,'FontSize',7);
xlabel('covariates'); ylabel('genes'); title('log10(p-value) of Correlation between Genes and Covariates');
set(gcf,'Position',1+[0,0,1024*2,1024]);
colorbar;
fname_base = sprintf('%s/dir_jpg/CtEn_sub_p',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
end;%if flag_disp;
end;%if flag_E;
end;%if flag_correlation;

if flag_correlation;
if flag_I;
%%%%%%%%;
% Now measure correlation across samples of I_ and C_. ;
%%%%%%%%;
tmp_rank_avg_ = mean(C_rank_,1); tmp_rank_std_ = max(1,std(C_rank_,1,1));
tmp_C_ = (C_rank_ - repmat(tmp_rank_avg_,n_u,1))./repmat(tmp_rank_std_,n_u,1);
tmp_rank_avg_ = mean(I_licr_,1); tmp_rank_std_ = max(1,std(I_licr_,1,1));
tmp_I_ = (I_licr_ - repmat(tmp_rank_avg_,n_u,1))./repmat(tmp_rank_std_,n_u,1);
clear tmp_rank_avg_ tmp_rank_std_;
CtIn_rank_ = transpose(tmp_C_)*tmp_I_ / n_u;
[tmp_U_,tmp_S_,tmp_V_] = svds(CtIn_rank_,1); [~,CtIn_rank_U_ij_] = sort(tmp_U_,'descend'); [~,CtIn_rank_V_ij_] = sort(tmp_V_,'descend');
CtIn_rank_ori_ = CtIn_rank_(CtIn_rank_U_ij_,CtIn_rank_V_ij_);
clear CtIn_rank_ tmp_U_ tmp_S_ tmp_V_ ;
flag_disp=0;
if flag_disp;
clf;
colormap(colormap_beach()); 
imagesc(transpose(CtIn_rank_ori_),[-1,+1]); 
set(gca,'XTick',1:n_CCOV,'XTickLabel',C_VariableName_LC_(CtIn_rank_U_ij_),'TickLabelInterpreter','none'); xtickangle(90);
set(gca,'FontSize',7);
xlabel('covariates'); ylabel('genes'); title('Correlation between Genes and Covariates');
set(gcf,'Position',1+[0,0,1024*2,1024]);
colorbar;
fname_base = sprintf('%s/dir_jpg/CtIn_sub_ori',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
end;%if flag_disp;
n_iteration  = 16;
CtIn_rank_avg_ = zeros(n_CCOV,n_I_GENE);
CtIn_rank_std_ = zeros(n_CCOV,n_I_GENE);
for niteration=1:n_iteration;
if (mod(niteration,10)==0); disp(sprintf(' %% niteration %d/%d',niteration,n_iteration)); end;
[tmp_Q_,~] = qr(randn(n_u));
tmp_CtIn_rank_ = transpose(tmp_C_)*tmp_Q_*tmp_I_ / n_u; clear tmp_Q_;
[tmp_U_,tmp_S_,tmp_V_] = svds(tmp_CtIn_rank_,1); [~,tmp_CtIn_rank_U_ij_] = sort(tmp_U_,'descend'); [~,tmp_CtIn_rank_V_ij_] = sort(tmp_V_,'descend');
CtIn_rank_avg_ = CtIn_rank_avg_ + tmp_CtIn_rank_(tmp_CtIn_rank_U_ij_,tmp_CtIn_rank_V_ij_);
CtIn_rank_std_ = CtIn_rank_std_ + tmp_CtIn_rank_(tmp_CtIn_rank_U_ij_,tmp_CtIn_rank_V_ij_).^2;
clear tmp_CtIn_rank_ tmp_U_ tmp_S_ tmp_V_ tmp_CtIn_rank_U_ij_ tmp_CtIn_rank_V_ij_ ;
end;%for niteration=1:n_iteration;
CtIn_rank_avg_ = CtIn_rank_avg_/n_iteration;
CtIn_rank_std_ = sqrt(CtIn_rank_std_/n_iteration - CtIn_rank_avg_.^2);
CtIn_rank_Z_ = ( CtIn_rank_ori_ - CtIn_rank_avg_ ) ./ CtIn_rank_std_ ;
%CtIn_rank_p_ = 0.5 * erfc( CtIn_rank_Z_ / sqrt(2) ) ;
CtIn_rank_p_ = 1.0 * erfc( abs(CtIn_rank_Z_) / sqrt(2) ) ; %<-- two sided. ;
clear tmp_C_ tmp_I_;
flag_disp=0;
if flag_disp;
clf;
colormap(colormap_beach()); 
imagesc(transpose(-log10(CtIn_rank_p_)),[0,+15]); 
set(gca,'XTick',1:n_CCOV,'XTickLabel',C_VariableName_LC_(CtIn_rank_U_ij_),'TickLabelInterpreter','none'); xtickangle(90);
set(gca,'FontSize',7);
xlabel('covariates'); ylabel('genes'); title('log10(p-value) of Correlation between Genes and Covariates');
set(gcf,'Position',1+[0,0,1024*2,1024]);
colorbar;
fname_base = sprintf('%s/dir_jpg/CtIn_sub_p',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
end;%if flag_disp;
end;%if flag_I;
end;%if flag_correlation;

if flag_correlation;
flag_disp=0;
if flag_disp;
clf;
n_bin = 32;
%%%%%%%%;
if flag_E;
subplot(2,4,1); hold on;
tmp_ng_ = 1:n_E_GENE;
%plot(tmp_ng_,log10(1+E_length_(E_col_val_(CtEn_rank_V_ij_))),'r.');
tmp_ij_ = find(E_length_(E_col_val_(CtEn_rank_V_ij_))>0);
plot(tmp_ng_(tmp_ij_),log10(1+E_length_(E_col_val_(CtEn_rank_V_ij_(tmp_ij_)))),'ro');
xlabel('gene-index (matching CtEn_p order)'); xlim([0,n_E_GENE]); tmp_yl_ = ylim();
ylabel('log10(gene length)');
title('E gene length vs gene ordering');
subplot(2,4,2); hold on;
tmp_ng_ = 1:n_E_GENE;
tmp_ij_ = find(E_length_(E_col_val_(CtEn_rank_V_ij_))>0);
colormap(colormap_beach());
imagesc(log10(1+hist2d_0(tmp_ng_(tmp_ij_),log10(1+E_length_(E_col_val_(CtEn_rank_V_ij_(tmp_ij_)))),n_bin,n_bin,[1,n_E_GENE],tmp_yl_)));
colorbar();
xlabel('gene-index (matching CtEn_p order)'); ylabel('log10(gene length)');
xlim([1,n_bin]); ylim([1,n_bin]);
set(gca,'XTick',[],'XTickLabel',[],'YTick',[],'YTickLabel',[]);
title('E gene length vs gene ordering');
end;%if flag_E;
%%%%%%%%;
if flag_I;
subplot(2,4,3); hold on;
tmp_ng_ = 1:n_I_GENE;
%plot(tmp_ng_,log10(1+I_length_(I_col_val_(CtIn_rank_V_ij_))),'b.');
tmp_ij_ = find(I_length_(I_col_val_(CtIn_rank_V_ij_))>0);
plot(tmp_ng_(tmp_ij_),log10(1+I_length_(I_col_val_(CtIn_rank_V_ij_(tmp_ij_)))),'bo');
xlabel('gene-index (matching CtIn_p order)'); xlim([0,n_I_GENE]); tmp_yl_ = ylim();
ylabel('log10(gene length)');
title('I gene length vs gene ordering');
subplot(2,4,4); hold on;
tmp_ng_ = 1:n_I_GENE;
tmp_ij_ = find(I_length_(I_col_val_(CtIn_rank_V_ij_))>0);
colormap(colormap_beach()); 
imagesc(log10(1+hist2d_0(tmp_ng_(tmp_ij_),log10(1+I_length_(I_col_val_(CtIn_rank_V_ij_(tmp_ij_)))),n_bin,n_bin,[1,n_I_GENE],tmp_yl_)));
colorbar();
xlabel('gene-index (matching CtIn_p order)'); ylabel('log10(gene length)');
xlim([1,n_bin]); ylim([1,n_bin]);
set(gca,'XTick',[],'XTickLabel',[],'YTick',[],'YTickLabel',[]);
title('I gene length vs gene ordering');
end;%if flag_E;
%%%%%%%%;
if flag_E;
subplot(2,4,5); hold on;
tmp_ng_ = 1:n_E_GENE;
tmp_ij_ = find(E_length_(E_col_val_(CtEn_rank_V_ij_))>0);
tmp_X_ = corr(transpose(log10(sum(abs(CtEn_rank_ori_(:,tmp_ij_)).^2,1))),log10(E_length_(E_col_val_(CtEn_rank_V_ij_(tmp_ij_)))));
plot(log10(sum(abs(CtEn_rank_ori_(:,tmp_ij_)).^2,1)),log10(E_length_(E_col_val_(CtEn_rank_V_ij_(tmp_ij_)))),'ro');
xlabel('log10(sum squared correlation)'); ylabel('log10(gene length)');
tmp_yl_ = ylim(); tmp_xl_ = xlim();
title(sprintf('avg-corr^2 vs E gene-length (C %0.6f)',tmp_X_));
subplot(2,4,6); hold on;
colormap(colormap_beach());
imagesc(log10(1+hist2d_0(log10(sum(abs(CtEn_rank_ori_(:,tmp_ij_)).^2,1)),log10(E_length_(E_col_val_(CtEn_rank_V_ij_(tmp_ij_)))),n_bin,n_bin,tmp_xl_,tmp_yl_)));
colorbar();
colorbar();
xlabel('log10(sum squared correlation)'); ylabel('log10(gene length)');
xlim([1,n_bin]); ylim([1,n_bin]);
set(gca,'XTick',[],'XTickLabel',[],'YTick',[],'YTickLabel',[]);
title(sprintf('avg-corr^2 vs E gene-length (C %0.6f)',tmp_X_));
end;%if flag_E;
%%%%%%%%;
if flag_I;
subplot(2,4,7); hold on;
tmp_ng_ = 1:n_I_GENE;
tmp_ij_ = find(I_length_(I_col_val_(CtIn_rank_V_ij_))>0);
tmp_X_ = corr(transpose(log10(sum(abs(CtIn_rank_ori_(:,tmp_ij_)).^2,1))),log10(I_length_(I_col_val_(CtIn_rank_V_ij_(tmp_ij_)))));
plot(log10(sum(abs(CtIn_rank_ori_(:,tmp_ij_)).^2,1)),log10(I_length_(I_col_val_(CtIn_rank_V_ij_(tmp_ij_)))),'bo');
xlabel('log10(sum squared correlation)'); ylabel('log10(gene length)');
tmp_yl_ = ylim(); tmp_xl_ = xlim();
title(sprintf('avg-corr^2 vs I gene-length (C %0.6f)',tmp_X_));
subplot(2,4,8); hold on;
colormap(colormap_beach());
imagesc(log10(1+hist2d_0(log10(sum(abs(CtIn_rank_ori_(:,tmp_ij_)).^2,1)),log10(I_length_(I_col_val_(CtIn_rank_V_ij_(tmp_ij_)))),n_bin,n_bin,tmp_xl_,tmp_yl_)));
colorbar();
colorbar();
xlabel('log10(sum squared correlation)'); ylabel('log10(gene length)');
xlim([1,n_bin]); ylim([1,n_bin]);
set(gca,'XTick',[],'XTickLabel',[],'YTick',[],'YTickLabel',[]);
title(sprintf('avg-corr^2 vs I gene-length (C %0.6f)',tmp_X_));
end;%if flag_I;
%%%%%%%%;
set(gcf,'Position',1+[0,0,1024*2,1024]);
fname_base = sprintf('%s/dir_jpg/CtXn_X_sub_vs_length',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
clear tmp_xl_ tmp_yl_ tmp_X_ tmp_ij_ tmp_ng_ ;
end;%if flag_disp;
%%%%%%%%;
% Note that there is not much correlation between length and covariate-correlation. ;
%%%%%%%%;
end;%if flag_correlation;

C_rank_c127_ = C_rank_; n_CCOV_c127 = size(C_rank_c127_,2);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
% Fit linear model to log of imputed data (limp) ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
[E_limp_c127_beta_un_,E_limp_c127_beta_vn_,n_E_limp_c127_beta,I_limp_c127_beta_un_,I_limp_c127_beta_vn_,n_I_limp_c127_beta,E_limp_c127_zeta_un_,E_limp_c127_zeta_vn_,n_E_limp_c127_zeta,I_limp_c127_zeta_un_,I_limp_c127_zeta_vn_,n_I_limp_c127_zeta] = test_loader_lm_0(C_rank_c127_,E_limp_,I_limp_,dir_trunk,'limp_c127');
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
% Fit linear model to log of imputed data after centered-log-ratio (licl) ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
[E_licl_c127_beta_un_,E_licl_c127_beta_vn_,n_E_licl_c127_beta,I_licl_c127_beta_un_,I_licl_c127_beta_vn_,n_I_licl_c127_beta,E_licl_c127_zeta_un_,E_licl_c127_zeta_vn_,n_E_licl_c127_zeta,I_licl_c127_zeta_un_,I_licl_c127_zeta_vn_,n_I_licl_c127_zeta] = test_loader_lm_0(C_rank_c127_,E_licl_,I_licl_,dir_trunk,'licl_c127');
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
% Fit linear model to log of imputed data after centered-log-ratio and rank normalization (licr) ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
[E_licr_c127_beta_un_,E_licr_c127_beta_vn_,n_E_licr_c127_beta,I_licr_c127_beta_un_,I_licr_c127_beta_vn_,n_I_licr_c127_beta,E_licr_c127_zeta_un_,E_licr_c127_zeta_vn_,n_E_licr_c127_zeta,I_licr_c127_zeta_un_,I_licr_c127_zeta_vn_,n_I_licr_c127_zeta] = test_loader_lm_0(C_rank_c127_,E_licr_,I_licr_,dir_trunk,'licr_c127');

% SRRR. ;
C_rank_c042_ij_ = [43;110;30;47;48;67;69;71;102;117;121;113;2;6;7;38;46;79;100;119;66;105;115;8;10;12;26;36;53;55;74;90;98;99;111;112;114;37;77;103;120;73]; %<-- most relevant covariates produced by SRRR. ;
C_rank_c042_ = C_rank_(:,C_rank_c042_ij_); n_CCOV_c042 = size(C_rank_c042_,2);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
% Fit linear model to log of imputed data (limp) ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
[E_limp_c042_beta_un_,E_limp_c042_beta_vn_,n_E_limp_c042_beta,I_limp_c042_beta_un_,I_limp_c042_beta_vn_,n_I_limp_c042_beta,E_limp_c042_zeta_un_,E_limp_c042_zeta_vn_,n_E_limp_c042_zeta,I_limp_c042_zeta_un_,I_limp_c042_zeta_vn_,n_I_limp_c042_zeta] = test_loader_lm_0(C_rank_c042_,E_limp_,I_limp_,dir_trunk,'limp_c042');
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
% Fit linear model to log of imputed data after centered-log-ratio (licl) ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
[E_licl_c042_beta_un_,E_licl_c042_beta_vn_,n_E_licl_c042_beta,I_licl_c042_beta_un_,I_licl_c042_beta_vn_,n_I_licl_c042_beta,E_licl_c042_zeta_un_,E_licl_c042_zeta_vn_,n_E_licl_c042_zeta,I_licl_c042_zeta_un_,I_licl_c042_zeta_vn_,n_I_licl_c042_zeta] = test_loader_lm_0(C_rank_c042_,E_licl_,I_licl_,dir_trunk,'licl_c042');
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
% Fit linear model to log of imputed data after centered-log-ratio and rank normalization (licr) ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
[E_licr_c042_beta_un_,E_licr_c042_beta_vn_,n_E_licr_c042_beta,I_licr_c042_beta_un_,I_licr_c042_beta_vn_,n_I_licr_c042_beta,E_licr_c042_zeta_un_,E_licr_c042_zeta_vn_,n_E_licr_c042_zeta,I_licr_c042_zeta_un_,I_licr_c042_zeta_vn_,n_I_licr_c042_zeta] = test_loader_lm_0(C_rank_c042_,E_licr_,I_licr_,dir_trunk,'licr_c042');

%[AIBS_] = readtable('AIBS_2016AUG12_RF100k_v3.0metrics_Classification_RFtab.txt');
C_rank_c012_ij_ = [32;54;48;71;46;29;53;115;95;63;123;39]; %<-- top 12 most relelevant covariates listed in AIBS_. ;
C_rank_c012_ = C_rank_(:,C_rank_c012_ij_); n_CCOV_c012 = size(C_rank_c012_,2);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
% Fit linear model to log of imputed data (limp) ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
[E_limp_c012_beta_un_,E_limp_c012_beta_vn_,n_E_limp_c012_beta,I_limp_c012_beta_un_,I_limp_c012_beta_vn_,n_I_limp_c012_beta,E_limp_c012_zeta_un_,E_limp_c012_zeta_vn_,n_E_limp_c012_zeta,I_limp_c012_zeta_un_,I_limp_c012_zeta_vn_,n_I_limp_c012_zeta] = test_loader_lm_0(C_rank_c012_,E_limp_,I_limp_,dir_trunk,'limp_c012');
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
% Fit linear model to log of imputed data after centered-log-ratio (licl) ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
[E_licl_c012_beta_un_,E_licl_c012_beta_vn_,n_E_licl_c012_beta,I_licl_c012_beta_un_,I_licl_c012_beta_vn_,n_I_licl_c012_beta,E_licl_c012_zeta_un_,E_licl_c012_zeta_vn_,n_E_licl_c012_zeta,I_licl_c012_zeta_un_,I_licl_c012_zeta_vn_,n_I_licl_c012_zeta] = test_loader_lm_0(C_rank_c012_,E_licl_,I_licl_,dir_trunk,'licl_c012');
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
% Fit linear model to log of imputed data after centered-log-ratio and rank normalization (licr) ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
[E_licr_c012_beta_un_,E_licr_c012_beta_vn_,n_E_licr_c012_beta,I_licr_c012_beta_un_,I_licr_c012_beta_vn_,n_I_licr_c012_beta,E_licr_c012_zeta_un_,E_licr_c012_zeta_vn_,n_E_licr_c012_zeta,I_licr_c012_zeta_un_,I_licr_c012_zeta_vn_,n_I_licr_c012_zeta] = test_loader_lm_0(C_rank_c012_,E_licr_,I_licr_,dir_trunk,'licr_c012');

%%%%%%%%;
% Now set up lm-corrected arrays. ;
%%%%%%%%;
E_limp_c127_ = E_limp_ - [ (ones(n_u,1)*E_limp_c127_zeta_un_(1,:) + C_rank_c127_*E_limp_c127_zeta_un_(2:end,:))*transpose(E_limp_c127_zeta_vn_) ]; %<-- correct for linear effect of covariates. ;
E_licl_c127_ = E_licl_ - [ (ones(n_u,1)*E_licl_c127_zeta_un_(1,:) + C_rank_c127_*E_licl_c127_zeta_un_(2:end,:))*transpose(E_licl_c127_zeta_vn_) ]; %<-- correct for linear effect of covariates. ;
E_licr_c127_ = E_licr_ - [ (ones(n_u,1)*E_licr_c127_zeta_un_(1,:) + C_rank_c127_*E_licr_c127_zeta_un_(2:end,:))*transpose(E_licr_c127_zeta_vn_) ]; %<-- correct for linear effect of covariates. ;
I_limp_c127_ = I_limp_ - [ (ones(n_u,1)*I_limp_c127_zeta_un_(1,:) + C_rank_c127_*I_limp_c127_zeta_un_(2:end,:))*transpose(I_limp_c127_zeta_vn_) ]; %<-- correct for linear effect of covariates. ;
I_licl_c127_ = I_licl_ - [ (ones(n_u,1)*I_licl_c127_zeta_un_(1,:) + C_rank_c127_*I_licl_c127_zeta_un_(2:end,:))*transpose(I_licl_c127_zeta_vn_) ]; %<-- correct for linear effect of covariates. ;
I_licr_c127_ = I_licr_ - [ (ones(n_u,1)*I_licr_c127_zeta_un_(1,:) + C_rank_c127_*I_licr_c127_zeta_un_(2:end,:))*transpose(I_licr_c127_zeta_vn_) ]; %<-- correct for linear effect of covariates. ;
%%%%%%%%;
E_limp_c012_ = E_limp_ - [ (ones(n_u,1)*E_limp_c012_zeta_un_(1,:) + C_rank_c012_*E_limp_c012_zeta_un_(2:end,:))*transpose(E_limp_c012_zeta_vn_) ]; %<-- correct for linear effect of covariates. ;
E_licl_c012_ = E_licl_ - [ (ones(n_u,1)*E_licl_c012_zeta_un_(1,:) + C_rank_c012_*E_licl_c012_zeta_un_(2:end,:))*transpose(E_licl_c012_zeta_vn_) ]; %<-- correct for linear effect of covariates. ;
E_licr_c012_ = E_licr_ - [ (ones(n_u,1)*E_licr_c012_zeta_un_(1,:) + C_rank_c012_*E_licr_c012_zeta_un_(2:end,:))*transpose(E_licr_c012_zeta_vn_) ]; %<-- correct for linear effect of covariates. ;
I_limp_c012_ = I_limp_ - [ (ones(n_u,1)*I_limp_c012_zeta_un_(1,:) + C_rank_c012_*I_limp_c012_zeta_un_(2:end,:))*transpose(I_limp_c012_zeta_vn_) ]; %<-- correct for linear effect of covariates. ;
I_licl_c012_ = I_licl_ - [ (ones(n_u,1)*I_licl_c012_zeta_un_(1,:) + C_rank_c012_*I_licl_c012_zeta_un_(2:end,:))*transpose(I_licl_c012_zeta_vn_) ]; %<-- correct for linear effect of covariates. ;
I_licr_c012_ = I_licr_ - [ (ones(n_u,1)*I_licr_c012_zeta_un_(1,:) + C_rank_c012_*I_licr_c012_zeta_un_(2:end,:))*transpose(I_licr_c012_zeta_vn_) ]; %<-- correct for linear effect of covariates. ;
%%%%%%%%;
E_limp_c042_ = E_limp_ - [ (ones(n_u,1)*E_limp_c042_zeta_un_(1,:) + C_rank_c042_*E_limp_c042_zeta_un_(2:end,:))*transpose(E_limp_c042_zeta_vn_) ]; %<-- correct for linear effect of covariates. ;
E_licl_c042_ = E_licl_ - [ (ones(n_u,1)*E_licl_c042_zeta_un_(1,:) + C_rank_c042_*E_licl_c042_zeta_un_(2:end,:))*transpose(E_licl_c042_zeta_vn_) ]; %<-- correct for linear effect of covariates. ;
E_licr_c042_ = E_licr_ - [ (ones(n_u,1)*E_licr_c042_zeta_un_(1,:) + C_rank_c042_*E_licr_c042_zeta_un_(2:end,:))*transpose(E_licr_c042_zeta_vn_) ]; %<-- correct for linear effect of covariates. ;
I_limp_c042_ = I_limp_ - [ (ones(n_u,1)*I_limp_c042_zeta_un_(1,:) + C_rank_c042_*I_limp_c042_zeta_un_(2:end,:))*transpose(I_limp_c042_zeta_vn_) ]; %<-- correct for linear effect of covariates. ;
I_licl_c042_ = I_licl_ - [ (ones(n_u,1)*I_licl_c042_zeta_un_(1,:) + C_rank_c042_*I_licl_c042_zeta_un_(2:end,:))*transpose(I_licl_c042_zeta_vn_) ]; %<-- correct for linear effect of covariates. ;
I_licr_c042_ = I_licr_ - [ (ones(n_u,1)*I_licr_c042_zeta_un_(1,:) + C_rank_c042_*I_licr_c042_zeta_un_(2:end,:))*transpose(I_licr_c042_zeta_vn_) ]; %<-- correct for linear effect of covariates. ;

%{

%%%%%%%%;
% Now try out fast_tsne. ;
%%%%%%%%;
dir_trunk = sprintf('/data/rangan/dir_bcc/dir_jamison');
fname = sprintf('%s/dir_mat/str_CLabel_sub_.nsv',dir_trunk);
fp=fopen(fname); str_CLabel_sub_ = textscan(fp,'%s\n'); str_CLabel_sub_ = str_CLabel_sub_{1}; fclose(fp);
n_u = numel(str_CLabel_sub_);
u_CLabel_ = unique(str_CLabel_sub_);
n_CLabel = length(u_CLabel_);
n_CLabel_ = zeros(n_CLabel,1);
for nCLabel = 1:n_CLabel;
n_CLabel_(nCLabel) = length(find(strcmp(str_CLabel_sub_,u_CLabel_(nCLabel))));
end;%for nCLabel = 1:n_CLabel;
CLabel_sub_ = zeros(n_u,1);
for nCLabel=1:n_CLabel;
tmp_ij_ = find(strcmp(str_CLabel_sub_,u_CLabel_(nCLabel)));
if (~isempty(str2num(u_CLabel_{nCLabel})));
CLabel_sub_(tmp_ij_) = str2num(u_CLabel_{nCLabel});
end;%if (~isempty(str2num(u_CLabel_{nCLabel})));
end;%for nCLabel=1:n_CLabel;
%%%%%%%%;
C_rank_c042_ = textread(sprintf('%s/dir_mat/C_rank_c042_.tsv',dir_trunk));
C_rank_c042_ = C_rank_c042_(:,1:end-1);
C_rank_c012_ = textread(sprintf('%s/dir_mat/C_rank_c012_.tsv',dir_trunk));
C_rank_c012_ = C_rank_c012_(:,1:end-1);
C_rank_c127_ = textread(sprintf('%s/dir_mat/C_rank_c127_.tsv',dir_trunk));
C_rank_c127_ = C_rank_c127_(:,1:end-1);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
% Fit linear model to log of imputed data (limp) ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
E_limp_ = textread(sprintf('%s/dir_mat/E_limp_.tsv',dir_trunk));
I_limp_ = textread(sprintf('%s/dir_mat/I_limp_.tsv',dir_trunk));
E_limp_ = E_limp_(:,1:end-1);
I_limp_ = I_limp_(:,1:end-1);
test_loader_helper_tsne_0(dir_trunk,E_limp_,'E_limp_',CLabel_sub_);
test_loader_helper_tsne_0(dir_trunk,I_limp_,'I_limp_',CLabel_sub_);
test_loader_helper_tsne_0(dir_trunk,E_limp_,'E_limp_',CLabel_sub_,100);
test_loader_helper_tsne_0(dir_trunk,I_limp_,'I_limp_',CLabel_sub_,100);
%%%%%%%%;
[E_limp_c042_beta_un_,E_limp_c042_beta_vn_,n_E_limp_c042_beta,I_limp_c042_beta_un_,I_limp_c042_beta_vn_,n_I_limp_c042_beta,E_limp_c042_zeta_un_,E_limp_c042_zeta_vn_,n_E_limp_c042_zeta,I_limp_c042_zeta_un_,I_limp_c042_zeta_vn_,n_I_limp_c042_zeta] = test_loader_lm_0(C_rank_c042_,E_limp_,I_limp_,dir_trunk,'limp_c042');
for n_col=1:6;
E_limp_c042_ = E_limp_ - [ (ones(n_u,1)*E_limp_c042_zeta_un_(1,1:n_col) + C_rank_c042_*E_limp_c042_zeta_un_(2:end,1:n_col))*transpose(E_limp_c042_zeta_vn_(:,1:n_col)) ]; %<-- correct for linear effect of covariates. ;
I_limp_c042_ = I_limp_ - [ (ones(n_u,1)*I_limp_c042_zeta_un_(1,1:n_col) + C_rank_c042_*I_limp_c042_zeta_un_(2:end,1:n_col))*transpose(I_limp_c042_zeta_vn_(:,1:n_col)) ]; %<-- correct for linear effect of covariates. ;
test_loader_helper_tsne_0(dir_trunk,E_limp_c042_,sprintf('E_limp_c042r%d_',n_col),CLabel_sub_);
test_loader_helper_tsne_0(dir_trunk,I_limp_c042_,sprintf('I_limp_c042r%d_',n_col),CLabel_sub_);
test_loader_helper_tsne_0(dir_trunk,E_limp_c042_,sprintf('E_limp_c042r%d_',n_col),CLabel_sub_,100);
test_loader_helper_tsne_0(dir_trunk,I_limp_c042_,sprintf('I_limp_c042r%d_',n_col),CLabel_sub_,100);
clear E_limp_c042_ ; clear I_limp_c042_ ;
end;%for n_col=1:6;
%%%%%%%%
[E_limp_c012_beta_un_,E_limp_c012_beta_vn_,n_E_limp_c012_beta,I_limp_c012_beta_un_,I_limp_c012_beta_vn_,n_I_limp_c012_beta,E_limp_c012_zeta_un_,E_limp_c012_zeta_vn_,n_E_limp_c012_zeta,I_limp_c012_zeta_un_,I_limp_c012_zeta_vn_,n_I_limp_c012_zeta] = test_loader_lm_0(C_rank_c012_,E_limp_,I_limp_,dir_trunk,'limp_c012');
for n_col=1:6;
E_limp_c012_ = E_limp_ - [ (ones(n_u,1)*E_limp_c012_zeta_un_(1,1:n_col) + C_rank_c012_*E_limp_c012_zeta_un_(2:end,1:n_col))*transpose(E_limp_c012_zeta_vn_(:,1:n_col)) ]; %<-- correct for linear effect of covariates. ;
I_limp_c012_ = I_limp_ - [ (ones(n_u,1)*I_limp_c012_zeta_un_(1,1:n_col) + C_rank_c012_*I_limp_c012_zeta_un_(2:end,1:n_col))*transpose(I_limp_c012_zeta_vn_(:,1:n_col)) ]; %<-- correct for linear effect of covariates. ;
test_loader_helper_tsne_0(dir_trunk,E_limp_c012_,sprintf('E_limp_c012r%d_',n_col),CLabel_sub_);
test_loader_helper_tsne_0(dir_trunk,I_limp_c012_,sprintf('I_limp_c012r%d_',n_col),CLabel_sub_);
test_loader_helper_tsne_0(dir_trunk,E_limp_c012_,sprintf('E_limp_c012r%d_',n_col),CLabel_sub_,100);
test_loader_helper_tsne_0(dir_trunk,I_limp_c012_,sprintf('I_limp_c012r%d_',n_col),CLabel_sub_,100);
clear E_limp_c012_ ; clear I_limp_c012_ ;
end;%for n_col=1:6;
%%%%%%%%
[E_limp_c127_beta_un_,E_limp_c127_beta_vn_,n_E_limp_c127_beta,I_limp_c127_beta_un_,I_limp_c127_beta_vn_,n_I_limp_c127_beta,E_limp_c127_zeta_un_,E_limp_c127_zeta_vn_,n_E_limp_c127_zeta,I_limp_c127_zeta_un_,I_limp_c127_zeta_vn_,n_I_limp_c127_zeta] = test_loader_lm_0(C_rank_c127_,E_limp_,I_limp_,dir_trunk,'limp_c127');
for n_col=1:6;
E_limp_c127_ = E_limp_ - [ (ones(n_u,1)*E_limp_c127_zeta_un_(1,1:n_col) + C_rank_c127_*E_limp_c127_zeta_un_(2:end,1:n_col))*transpose(E_limp_c127_zeta_vn_(:,1:n_col)) ]; %<-- correct for linear effect of covariates. ;
I_limp_c127_ = I_limp_ - [ (ones(n_u,1)*I_limp_c127_zeta_un_(1,1:n_col) + C_rank_c127_*I_limp_c127_zeta_un_(2:end,1:n_col))*transpose(I_limp_c127_zeta_vn_(:,1:n_col)) ]; %<-- correct for linear effect of covariates. ;
test_loader_helper_tsne_0(dir_trunk,E_limp_c127_,sprintf('E_limp_c127r%d_',n_col),CLabel_sub_);
test_loader_helper_tsne_0(dir_trunk,I_limp_c127_,sprintf('I_limp_c127r%d_',n_col),CLabel_sub_);
test_loader_helper_tsne_0(dir_trunk,E_limp_c127_,sprintf('E_limp_c127r%d_',n_col),CLabel_sub_,100);
test_loader_helper_tsne_0(dir_trunk,I_limp_c127_,sprintf('I_limp_c127r%d_',n_col),CLabel_sub_,100);
clear E_limp_c127_ ; clear I_limp_c127_ ;
end;%for n_col=1:6;
%%%%%%%%
clear E_limp_ ; clear I_limp_ ; 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
% Fit linear model to log of imputed data after centered-log-ratio (licl) ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
E_licl_ = textread(sprintf('%s/dir_mat/E_licl_.tsv',dir_trunk));
I_licl_ = textread(sprintf('%s/dir_mat/I_licl_.tsv',dir_trunk));
E_licl_ = E_licl_(:,1:end-1);
I_licl_ = I_licl_(:,1:end-1);
test_loader_helper_tsne_0(dir_trunk,E_licl_,'E_licl_',CLabel_sub_);
test_loader_helper_tsne_0(dir_trunk,I_licl_,'I_licl_',CLabel_sub_);
test_loader_helper_tsne_0(dir_trunk,E_licl_,'E_licl_',CLabel_sub_,100);
test_loader_helper_tsne_0(dir_trunk,I_licl_,'I_licl_',CLabel_sub_,100);
%%%%%%%%;
[E_licl_c042_beta_un_,E_licl_c042_beta_vn_,n_E_licl_c042_beta,I_licl_c042_beta_un_,I_licl_c042_beta_vn_,n_I_licl_c042_beta,E_licl_c042_zeta_un_,E_licl_c042_zeta_vn_,n_E_licl_c042_zeta,I_licl_c042_zeta_un_,I_licl_c042_zeta_vn_,n_I_licl_c042_zeta] = test_loader_lm_0(C_rank_c042_,E_licl_,I_licl_,dir_trunk,'licl_c042');
for n_col=1:6;
E_licl_c042_ = E_licl_ - [ (ones(n_u,1)*E_licl_c042_zeta_un_(1,1:n_col) + C_rank_c042_*E_licl_c042_zeta_un_(2:end,1:n_col))*transpose(E_licl_c042_zeta_vn_(:,1:n_col)) ]; %<-- correct for linear effect of covariates. ;
I_licl_c042_ = I_licl_ - [ (ones(n_u,1)*I_licl_c042_zeta_un_(1,1:n_col) + C_rank_c042_*I_licl_c042_zeta_un_(2:end,1:n_col))*transpose(I_licl_c042_zeta_vn_(:,1:n_col)) ]; %<-- correct for linear effect of covariates. ;
test_loader_helper_tsne_0(dir_trunk,E_licl_c042_,sprintf('E_licl_c042r%d_',n_col),CLabel_sub_);
test_loader_helper_tsne_0(dir_trunk,I_licl_c042_,sprintf('I_licl_c042r%d_',n_col),CLabel_sub_);
test_loader_helper_tsne_0(dir_trunk,E_licl_c042_,sprintf('E_licl_c042r%d_',n_col),CLabel_sub_,100);
test_loader_helper_tsne_0(dir_trunk,I_licl_c042_,sprintf('I_licl_c042r%d_',n_col),CLabel_sub_,100);
clear E_licl_c042_ ; clear I_licl_c042_ ;
end;%for n_col=1:6;
%%%%%%%%
[E_licl_c012_beta_un_,E_licl_c012_beta_vn_,n_E_licl_c012_beta,I_licl_c012_beta_un_,I_licl_c012_beta_vn_,n_I_licl_c012_beta,E_licl_c012_zeta_un_,E_licl_c012_zeta_vn_,n_E_licl_c012_zeta,I_licl_c012_zeta_un_,I_licl_c012_zeta_vn_,n_I_licl_c012_zeta] = test_loader_lm_0(C_rank_c012_,E_licl_,I_licl_,dir_trunk,'licl_c012');
for n_col=1:6;
E_licl_c012_ = E_licl_ - [ (ones(n_u,1)*E_licl_c012_zeta_un_(1,1:n_col) + C_rank_c012_*E_licl_c012_zeta_un_(2:end,1:n_col))*transpose(E_licl_c012_zeta_vn_(:,1:n_col)) ]; %<-- correct for linear effect of covariates. ;
I_licl_c012_ = I_licl_ - [ (ones(n_u,1)*I_licl_c012_zeta_un_(1,1:n_col) + C_rank_c012_*I_licl_c012_zeta_un_(2:end,1:n_col))*transpose(I_licl_c012_zeta_vn_(:,1:n_col)) ]; %<-- correct for linear effect of covariates. ;
test_loader_helper_tsne_0(dir_trunk,E_licl_c012_,sprintf('E_licl_c012r%d_',n_col),CLabel_sub_);
test_loader_helper_tsne_0(dir_trunk,I_licl_c012_,sprintf('I_licl_c012r%d_',n_col),CLabel_sub_);
test_loader_helper_tsne_0(dir_trunk,E_licl_c012_,sprintf('E_licl_c012r%d_',n_col),CLabel_sub_,100);
test_loader_helper_tsne_0(dir_trunk,I_licl_c012_,sprintf('I_licl_c012r%d_',n_col),CLabel_sub_,100);
clear E_licl_c012_ ; clear I_licl_c012_ ;
end;%for n_col=1:6;
%%%%%%%%
[E_licl_c127_beta_un_,E_licl_c127_beta_vn_,n_E_licl_c127_beta,I_licl_c127_beta_un_,I_licl_c127_beta_vn_,n_I_licl_c127_beta,E_licl_c127_zeta_un_,E_licl_c127_zeta_vn_,n_E_licl_c127_zeta,I_licl_c127_zeta_un_,I_licl_c127_zeta_vn_,n_I_licl_c127_zeta] = test_loader_lm_0(C_rank_c127_,E_licl_,I_licl_,dir_trunk,'licl_c127');
for n_col=1:6;
E_licl_c127_ = E_licl_ - [ (ones(n_u,1)*E_licl_c127_zeta_un_(1,1:n_col) + C_rank_c127_*E_licl_c127_zeta_un_(2:end,1:n_col))*transpose(E_licl_c127_zeta_vn_(:,1:n_col)) ]; %<-- correct for linear effect of covariates. ;
I_licl_c127_ = I_licl_ - [ (ones(n_u,1)*I_licl_c127_zeta_un_(1,1:n_col) + C_rank_c127_*I_licl_c127_zeta_un_(2:end,1:n_col))*transpose(I_licl_c127_zeta_vn_(:,1:n_col)) ]; %<-- correct for linear effect of covariates. ;
test_loader_helper_tsne_0(dir_trunk,E_licl_c127_,sprintf('E_licl_c127r%d_',n_col),CLabel_sub_);
test_loader_helper_tsne_0(dir_trunk,I_licl_c127_,sprintf('I_licl_c127r%d_',n_col),CLabel_sub_);
test_loader_helper_tsne_0(dir_trunk,E_licl_c127_,sprintf('E_licl_c127r%d_',n_col),CLabel_sub_,100);
test_loader_helper_tsne_0(dir_trunk,I_licl_c127_,sprintf('I_licl_c127r%d_',n_col),CLabel_sub_,100);
clear E_licl_c127_ ; clear I_licl_c127_ ;
end;%for n_col=1:6;
%%%%%%%%
clear E_licl_ ; clear I_licl_ ; 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
% Fit linear model to log of imputed data after centered-log-ratio and rank normalization (licr) ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
E_licr_ = textread(sprintf('%s/dir_mat/E_licr_.tsv',dir_trunk));
I_licr_ = textread(sprintf('%s/dir_mat/I_licr_.tsv',dir_trunk));
E_licr_ = E_licr_(:,1:end-1);
I_licr_ = I_licr_(:,1:end-1);
test_loader_helper_tsne_0(dir_trunk,E_licr_,'E_licr_',CLabel_sub_);
test_loader_helper_tsne_0(dir_trunk,I_licr_,'I_licr_',CLabel_sub_);
test_loader_helper_tsne_0(dir_trunk,E_licr_,'E_licr_',CLabel_sub_,100);
test_loader_helper_tsne_0(dir_trunk,I_licr_,'I_licr_',CLabel_sub_,100);
%%%%%%%%;
[E_licr_c042_beta_un_,E_licr_c042_beta_vn_,n_E_licr_c042_beta,I_licr_c042_beta_un_,I_licr_c042_beta_vn_,n_I_licr_c042_beta,E_licr_c042_zeta_un_,E_licr_c042_zeta_vn_,n_E_licr_c042_zeta,I_licr_c042_zeta_un_,I_licr_c042_zeta_vn_,n_I_licr_c042_zeta] = test_loader_lm_0(C_rank_c042_,E_licr_,I_licr_,dir_trunk,'licr_c042');
E_licr_c042_ = E_licr_ - [ (ones(n_u,1)*E_licr_c042_zeta_un_(1,:) + C_rank_c042_*E_licr_c042_zeta_un_(2:end,:))*transpose(E_licr_c042_zeta_vn_) ]; %<-- correct for linear effect of covariates. ;
I_licr_c042_ = I_licr_ - [ (ones(n_u,1)*I_licr_c042_zeta_un_(1,:) + C_rank_c042_*I_licr_c042_zeta_un_(2:end,:))*transpose(I_licr_c042_zeta_vn_) ]; %<-- correct for linear effect of covariates. ;
test_loader_helper_tsne_0(dir_trunk,E_licr_c042_,'E_licr_c042_',CLabel_sub_);
test_loader_helper_tsne_0(dir_trunk,I_licr_c042_,'I_licr_c042_',CLabel_sub_);
test_loader_helper_tsne_0(dir_trunk,E_licr_c042_,'E_licr_c042_',CLabel_sub_,100);
test_loader_helper_tsne_0(dir_trunk,I_licr_c042_,'I_licr_c042_',CLabel_sub_,100);
clear E_licr_c042_ ; clear I_licr_c042_ ;
%%%%%%%%
[E_licr_c012_beta_un_,E_licr_c012_beta_vn_,n_E_licr_c012_beta,I_licr_c012_beta_un_,I_licr_c012_beta_vn_,n_I_licr_c012_beta,E_licr_c012_zeta_un_,E_licr_c012_zeta_vn_,n_E_licr_c012_zeta,I_licr_c012_zeta_un_,I_licr_c012_zeta_vn_,n_I_licr_c012_zeta] = test_loader_lm_0(C_rank_c012_,E_licr_,I_licr_,dir_trunk,'licr_c012');
E_licr_c012_ = E_licr_ - [ (ones(n_u,1)*E_licr_c012_zeta_un_(1,:) + C_rank_c012_*E_licr_c012_zeta_un_(2:end,:))*transpose(E_licr_c012_zeta_vn_) ]; %<-- correct for linear effect of covariates. ;
I_licr_c012_ = I_licr_ - [ (ones(n_u,1)*I_licr_c012_zeta_un_(1,:) + C_rank_c012_*I_licr_c012_zeta_un_(2:end,:))*transpose(I_licr_c012_zeta_vn_) ]; %<-- correct for linear effect of covariates. ;
test_loader_helper_tsne_0(dir_trunk,E_licr_c012_,'E_licr_c012_',CLabel_sub_);
test_loader_helper_tsne_0(dir_trunk,I_licr_c012_,'I_licr_c012_',CLabel_sub_);
test_loader_helper_tsne_0(dir_trunk,E_licr_c012_,'E_licr_c012_',CLabel_sub_,100);
test_loader_helper_tsne_0(dir_trunk,I_licr_c012_,'I_licr_c012_',CLabel_sub_,100);
clear E_licr_c012_ ; clear I_licr_c012_ ;
%%%%%%%%
[E_licr_c127_beta_un_,E_licr_c127_beta_vn_,n_E_licr_c127_beta,I_licr_c127_beta_un_,I_licr_c127_beta_vn_,n_I_licr_c127_beta,E_licr_c127_zeta_un_,E_licr_c127_zeta_vn_,n_E_licr_c127_zeta,I_licr_c127_zeta_un_,I_licr_c127_zeta_vn_,n_I_licr_c127_zeta] = test_loader_lm_0(C_rank_c127_,E_licr_,I_licr_,dir_trunk,'licr_c127');
E_licr_c127_ = E_licr_ - [ (ones(n_u,1)*E_licr_c127_zeta_un_(1,:) + C_rank_c127_*E_licr_c127_zeta_un_(2:end,:))*transpose(E_licr_c127_zeta_vn_) ]; %<-- correct for linear effect of covariates. ;
I_licr_c127_ = I_licr_ - [ (ones(n_u,1)*I_licr_c127_zeta_un_(1,:) + C_rank_c127_*I_licr_c127_zeta_un_(2:end,:))*transpose(I_licr_c127_zeta_vn_) ]; %<-- correct for linear effect of covariates. ;
test_loader_helper_tsne_0(dir_trunk,E_licr_c127_,'E_licr_c127_',CLabel_sub_);
test_loader_helper_tsne_0(dir_trunk,I_licr_c127_,'I_licr_c127_',CLabel_sub_);
test_loader_helper_tsne_0(dir_trunk,E_licr_c127_,'E_licr_c127_',CLabel_sub_,100);
test_loader_helper_tsne_0(dir_trunk,I_licr_c127_,'I_licr_c127_',CLabel_sub_,100);
clear E_licr_c127_ ; clear I_licr_c127_ ;
%%%%%%%%
clear E_licr_ ; clear I_licr_ ; 

[E_limp_c012_beta_un_,E_limp_c012_beta_vn_,n_E_limp_c012_beta,I_limp_c012_beta_un_,I_limp_c012_beta_vn_,n_I_limp_c012_beta,E_limp_c012_zeta_un_,E_limp_c012_zeta_vn_,n_E_limp_c012_zeta,I_limp_c012_zeta_un_,I_limp_c012_zeta_vn_,n_I_limp_c012_zeta] = test_loader_lm_0(C_rank_c012_,E_limp_,I_limp_,dir_trunk,'limp_c012');
%for n_col=1:6;
%E_limp_c012_ = E_limp_ - [ (ones(n_u,1)*E_limp_c012_zeta_un_(1,1:n_col) + C_rank_c012_*E_limp_c012_zeta_un_(2:end,1:n_col))*transpose(E_limp_c012_zeta_vn_(:,1:n_col)) ]; %<-- correct for linear effect of covariates. ;
%disp(sprintf(' %% n_col %d fnorm %0.16f',n_col,fnorm(E_limp_c012_)));
%subplot(2,3,n_col); imagesc(E_limp_c012_);
%end;%for n_col=1:6;
n_col = 6; E_limp_c012_ = E_limp_ - [ (ones(n_u,1)*E_limp_c012_zeta_un_(1,1:n_col) + C_rank_c012_*E_limp_c012_zeta_un_(2:end,1:n_col))*transpose(E_limp_c012_zeta_vn_(:,1:n_col)) ]; %<-- correct for linear effect of covariates. ;
 subplot(1,2,1); imagesc(E_limp_);
 subplot(1,2,2); imagesc(E_limp_c012_);
figbig;

[tmp_U_,tmp_S_,tmp_V_] = svds(E_limp_,2); 
 subplot(1,2,1); 
 scatter(tmp_U_(:,1),tmp_U_(:,2),5,CLabel_sub_,'filled');
[tmp_U_,tmp_S_,tmp_V_] = svds(E_limp_c012_,2); 
 subplot(1,2,2); 
 scatter(tmp_U_(:,1),tmp_U_(:,2),5,CLabel_sub_,'filled');

for n_col=1:6;
E_limp_c012_ = E_limp_ - [ (ones(n_u,1)*E_limp_c012_zeta_un_(1,1:n_col) + C_rank_c012_*E_limp_c012_zeta_un_(2:end,1:n_col))*transpose(E_limp_c012_zeta_vn_(:,1:n_col)) ]; %<-- correct for linear effect of covariates. ;
disp(sprintf(' %% n_col %d fnorm %0.16f',n_col,fnorm(E_limp_c012_)));
subplot(2,3,n_col); 
%imagesc(E_limp_c012_);
[tmp_U_,tmp_S_,tmp_V_] = svds(E_limp_c012_,2); 
 scatter(tmp_U_(:,1),tmp_U_(:,2),5,CLabel_sub_,'filled'); colormap('lines');
end;%for n_col=1:6;
 figbig;

  %}

%{
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
% Now performing clustering on data arrays. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
dir_trunk = sprintf('/data/rangan/dir_bcc/dir_jamison');
E_limp_ = textread(sprintf('%s/dir_mat/E_limp_.tsv',dir_trunk)); E_limp_ = E_limp_(:,1:end-1);
I_limp_ = textread(sprintf('%s/dir_mat/I_limp_.tsv',dir_trunk)); I_limp_ = I_limp_(:,1:end-1);
gamma = 0.01; n_shuffle = 64;
prefix = 'E_limp_c000'; test_loader_lakcluster_dr_0(E_limp_,gamma,n_shuffle,prefix); test_loader_dexcluster_dr_0(E_limp_,gamma,n_shuffle,prefix);
prefix = 'I_limp_c000'; test_loader_lakcluster_dr_0(I_limp_,gamma,n_shuffle,prefix); test_loader_dexcluster_dr_0(I_limp_,gamma,n_shuffle,prefix);
clear E_limp_ I_limp_ ;
%%%%%%%%;
dir_trunk = sprintf('/data/rangan/dir_bcc/dir_jamison');
E_licl_ = textread(sprintf('%s/dir_mat/E_licl_.tsv',dir_trunk)); E_licl_ = E_licl_(:,1:end-1);
I_licl_ = textread(sprintf('%s/dir_mat/I_licl_.tsv',dir_trunk)); I_licl_ = I_licl_(:,1:end-1);
gamma = 0.01; n_shuffle = 64;
prefix = 'E_licl_c000'; test_loader_lakcluster_dr_0(E_licl_,gamma,n_shuffle,prefix); test_loader_dexcluster_dr_0(E_licl_,gamma,n_shuffle,prefix);
prefix = 'I_licl_c000'; test_loader_lakcluster_dr_0(I_licl_,gamma,n_shuffle,prefix); test_loader_dexcluster_dr_0(I_licl_,gamma,n_shuffle,prefix);
clear E_licl_ I_licl_ ;
%%%%%%%%;
dir_trunk = sprintf('/data/rangan/dir_bcc/dir_jamison');
E_licr_ = textread(sprintf('%s/dir_mat/E_licr_.tsv',dir_trunk)); E_licr_ = E_licr_(:,1:end-1);
I_licr_ = textread(sprintf('%s/dir_mat/I_licr_.tsv',dir_trunk)); I_licr_ = I_licr_(:,1:end-1);
gamma = 0.01; n_shuffle = 64;
prefix = 'E_licr_c000'; test_loader_lakcluster_dr_0(E_licr_,gamma,n_shuffle,prefix); test_loader_dexcluster_dr_0(E_licr_,gamma,n_shuffle,prefix);
prefix = 'I_licr_c000'; test_loader_lakcluster_dr_0(I_licr_,gamma,n_shuffle,prefix); test_loader_dexcluster_dr_0(I_licr_,gamma,n_shuffle,prefix);
clear E_licr_ I_licr_ ;
%%%%%%%%;
gamma = 0.01; n_shuffle = 32;
%%%%%%%%;
prefix = 'E_limp_c012'; test_loader_lakcluster_dr_0(E_limp_c012_,gamma,n_shuffle,prefix); test_loader_dexcluster_dr_0(E_limp_c012_,gamma,n_shuffle,prefix);
prefix = 'I_limp_c012'; test_loader_lakcluster_dr_0(I_limp_c012_,gamma,n_shuffle,prefix); test_loader_dexcluster_dr_0(I_limp_c012_,gamma,n_shuffle,prefix);
prefix = 'E_licl_c012'; test_loader_lakcluster_dr_0(E_licl_c012_,gamma,n_shuffle,prefix); test_loader_dexcluster_dr_0(E_licl_c012_,gamma,n_shuffle,prefix);
prefix = 'I_licl_c012'; test_loader_lakcluster_dr_0(I_licl_c012_,gamma,n_shuffle,prefix); test_loader_dexcluster_dr_0(I_licl_c012_,gamma,n_shuffle,prefix);
prefix = 'E_licr_c012'; test_loader_lakcluster_dr_0(E_licr_c012_,gamma,n_shuffle,prefix); test_loader_dexcluster_dr_0(E_licr_c012_,gamma,n_shuffle,prefix);
prefix = 'I_licr_c012'; test_loader_lakcluster_dr_0(I_licr_c012_,gamma,n_shuffle,prefix); test_loader_dexcluster_dr_0(I_licr_c012_,gamma,n_shuffle,prefix);
%%%%%%%%;
prefix = 'E_limp_c042'; test_loader_lakcluster_dr_0(E_limp_c042_,gamma,n_shuffle,prefix); test_loader_dexcluster_dr_0(E_limp_c042_,gamma,n_shuffle,prefix);
prefix = 'I_limp_c042'; test_loader_lakcluster_dr_0(I_limp_c042_,gamma,n_shuffle,prefix); test_loader_dexcluster_dr_0(I_limp_c042_,gamma,n_shuffle,prefix);
prefix = 'E_licl_c042'; test_loader_lakcluster_dr_0(E_licl_c042_,gamma,n_shuffle,prefix); test_loader_dexcluster_dr_0(E_licl_c042_,gamma,n_shuffle,prefix);
prefix = 'I_licl_c042'; test_loader_lakcluster_dr_0(I_licl_c042_,gamma,n_shuffle,prefix); test_loader_dexcluster_dr_0(I_licl_c042_,gamma,n_shuffle,prefix);
prefix = 'E_licr_c042'; test_loader_lakcluster_dr_0(E_licr_c042_,gamma,n_shuffle,prefix); test_loader_dexcluster_dr_0(E_licr_c042_,gamma,n_shuffle,prefix);
prefix = 'I_licr_c042'; test_loader_lakcluster_dr_0(I_licr_c042_,gamma,n_shuffle,prefix); test_loader_dexcluster_dr_0(I_licr_c042_,gamma,n_shuffle,prefix);
%%%%%%%%;
prefix = 'E_limp_c127'; test_loader_lakcluster_dr_0(E_limp_c127_,gamma,n_shuffle,prefix); test_loader_dexcluster_dr_0(E_limp_c127_,gamma,n_shuffle,prefix);
prefix = 'I_limp_c127'; test_loader_lakcluster_dr_0(I_limp_c127_,gamma,n_shuffle,prefix); test_loader_dexcluster_dr_0(I_limp_c127_,gamma,n_shuffle,prefix);
prefix = 'E_licl_c127'; test_loader_lakcluster_dr_0(E_licl_c127_,gamma,n_shuffle,prefix); test_loader_dexcluster_dr_0(E_licl_c127_,gamma,n_shuffle,prefix);
prefix = 'I_licl_c127'; test_loader_lakcluster_dr_0(I_licl_c127_,gamma,n_shuffle,prefix); test_loader_dexcluster_dr_0(I_licl_c127_,gamma,n_shuffle,prefix);
prefix = 'E_licr_c127'; test_loader_lakcluster_dr_0(E_licr_c127_,gamma,n_shuffle,prefix); test_loader_dexcluster_dr_0(E_licr_c127_,gamma,n_shuffle,prefix);
prefix = 'I_licr_c127'; test_loader_lakcluster_dr_0(I_licr_c127_,gamma,n_shuffle,prefix); test_loader_dexcluster_dr_0(I_licr_c127_,gamma,n_shuffle,prefix);
%%%%%%%%;
 %}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
% Measure rank-differences. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
str_CLabel_ = C_.Cluster_ID_20161007(C_to_u_ID_);
u_CLabel_ = unique(str_CLabel_); n_CLabel = length(u_CLabel_);
C_aucX__ = zeros(n_CLabel,n_CLabel,n_CCOV);
C_rank_avg_ = zeros(n_CLabel,n_CCOV);
%%%%%%%%;
for nA = 1:n_CLabel;
disp(sprintf(' %% Rank average for Label %d (%s):',nA,u_CLabel_{nA}));
tmp_Label_A_ij_ = find(strcmp(str_CLabel_,u_CLabel_{nA})); tmp_n_A = length(tmp_Label_A_ij_);
C_rank_avg_(nA,:) = mean(C_rank_(tmp_Label_A_ij_,:),1);
end;%for nA = 1:n_CLabel;
%%%%%%%%;
for nA = 1:n_CLabel;
for nB = nA+1:n_CLabel;
disp(sprintf(' %% Comparing Label %d (%s) and %d (%s):',nA,u_CLabel_{nA},nB,u_CLabel_{nB}));
C_aucX__(nA,nB,:) = C_rank_avg_(nA,:) - C_rank_avg_(nB,:);
C_aucX__(nB,nA,:) = -C_aucX__(nA,nB,:);
end;%for nB = nA+1:n_CLabel;
end;%for nA = 1:n_CLabel;
clear tmp_Label_A_ij_ tmp_n_A ;

%%%%%%%%;
% For each gene and covariate, we can record the sorted-list of Label-pairs from I_aucX__ and C_aucX__. ;
% We can compare this to the distribution of sorted-lists obtained in a (Label-Label) permutation-test. ;
% Similarly, for each Label-pair, we can record the sorted-list of genes and covariates from I_aucX__ and C_aucX__. ;
% Again, we can compare this to the distribution of sorted-lists obtained in a (Label-Label) permutation-test. ;
% Note that, for now, this operation requires more than 32GB of ram (i.e., more than box615). ;
%%%%%%%%;
str_CLabel_ = C_.Cluster_ID_20161007(C_to_u_ID_);
n_iteration = 128;
%%%%%%%%;
if flag_I; [AB_I_c012_] = test_loader_helper_0(n_iteration,n_CLabel,n_CCOV_c012,n_I_GENE,str_CLabel_,C_rank_c012_,I_licr_,I_licr_c012_zeta_un_,I_licr_c012_zeta_vn_,n_I_licr_c012_zeta,I_licr_c012_beta_un_,I_licr_c012_beta_vn_,n_I_licr_c012_beta); end;%if flag_I;
if flag_E; [AB_E_c012_] = test_loader_helper_0(n_iteration,n_CLabel,n_CCOV_c012,n_E_GENE,str_CLabel_,C_rank_c012_,E_licr_,E_licr_c012_zeta_un_,E_licr_c012_zeta_vn_,n_E_licr_c012_zeta,E_licr_c012_beta_un_,E_licr_c012_beta_vn_,n_E_licr_c012_beta); end;%if flag_E;
if flag_I; [AB_I_c012_] = test_loader_helper_sub_0(AB_I_c012_,str_CLabel_); end;
if flag_E; [AB_E_c012_] = test_loader_helper_sub_0(AB_E_c012_,str_CLabel_); end;
%%%%%%%%;
if flag_I; test_loader_plot_absZ_avg__0(AB_I_c012_,C_VariableName_LC_,dir_trunk,'I_c012'); end;%if flag_I;
if flag_E; test_loader_plot_absZ_avg__0(AB_E_c012_,C_VariableName_LC_,dir_trunk,'E_c012'); end;%if flag_E;
%%%%%%%%;
if flag_I; test_loader_plot_C_absZ_0(AB_I_c012_,C_VariableName_LC_,dir_trunk,'I_c012'); end;%if flag_I; 
if flag_E; test_loader_plot_C_absZ_0(AB_E_c012_,C_VariableName_LC_,dir_trunk,'E_c012'); end;%if flag_I; 
%%%%%%%%;
if flag_I; test_loader_plot_Z_absZ_0(AB_I_c012_,dir_trunk,'I_c012'); end;%if flag_I; 
if flag_E; test_loader_plot_Z_absZ_0(AB_E_c012_,dir_trunk,'E_c012'); end;%if flag_I; 
%%%%%%%%;
if flag_I; [AB_I_c042_] = test_loader_helper_0(n_iteration,n_CLabel,n_CCOV_c042,n_I_GENE,str_CLabel_,C_rank_c042_,I_licr_,I_licr_c042_zeta_un_,I_licr_c042_zeta_vn_,n_I_licr_c042_zeta,I_licr_c042_beta_un_,I_licr_c042_beta_vn_,n_I_licr_c042_beta); end;%if flag_I;
if flag_E; [AB_E_c042_] = test_loader_helper_0(n_iteration,n_CLabel,n_CCOV_c042,n_E_GENE,str_CLabel_,C_rank_c042_,E_licr_,E_licr_c042_zeta_un_,E_licr_c042_zeta_vn_,n_E_licr_c042_zeta,E_licr_c042_beta_un_,E_licr_c042_beta_vn_,n_E_licr_c042_beta); end;%if flag_E;
if flag_I; [AB_I_c042_] = test_loader_helper_sub_0(AB_I_c042_,str_CLabel_); end;
if flag_E; [AB_E_c042_] = test_loader_helper_sub_0(AB_E_c042_,str_CLabel_); end;
%%%%%%%%;
if flag_I; test_loader_plot_absZ_avg__0(AB_I_c042_,C_VariableName_LC_,dir_trunk,'I_c042'); end;%if flag_I;
if flag_E; test_loader_plot_absZ_avg__0(AB_E_c042_,C_VariableName_LC_,dir_trunk,'E_c042'); end;%if flag_E;
%%%%%%%%;
if flag_I; test_loader_plot_C_absZ_0(AB_I_c042_,C_VariableName_LC_,dir_trunk,'I_c042'); end;%if flag_I; 
if flag_E; test_loader_plot_C_absZ_0(AB_E_c042_,C_VariableName_LC_,dir_trunk,'E_c042'); end;%if flag_I; 
%%%%%%%%;
if flag_I; test_loader_plot_Z_absZ_0(AB_I_c042_,dir_trunk,'I_c042'); end;%if flag_I; 
if flag_E; test_loader_plot_Z_absZ_0(AB_E_c042_,dir_trunk,'E_c042'); end;%if flag_I; 
%%%%%%%%;
if flag_I; [AB_I_c127_] = test_loader_helper_0(n_iteration,n_CLabel,n_CCOV_c127,n_I_GENE,str_CLabel_,C_rank_c127_,I_licr_,I_licr_c127_zeta_un_,I_licr_c127_zeta_vn_,n_I_licr_c127_zeta,I_licr_c127_beta_un_,I_licr_c127_beta_vn_,n_I_licr_c127_beta); end;%if flag_I;
if flag_E; [AB_E_c127_] = test_loader_helper_0(n_iteration,n_CLabel,n_CCOV_c127,n_E_GENE,str_CLabel_,C_rank_c127_,E_licr_,E_licr_c127_zeta_un_,E_licr_c127_zeta_vn_,n_E_licr_c127_zeta,E_licr_c127_beta_un_,E_licr_c127_beta_vn_,n_E_licr_c127_beta); end;%if flag_E;
if flag_I; [AB_I_c127_] = test_loader_helper_sub_0(AB_I_c127_,str_CLabel_); end;
if flag_E; [AB_E_c127_] = test_loader_helper_sub_0(AB_E_c127_,str_CLabel_); end;
%%%%%%%%;
if flag_I; test_loader_plot_absZ_avg__0(AB_I_c127_,C_VariableName_LC_,dir_trunk,'I_c127'); end;%if flag_I;
if flag_E; test_loader_plot_absZ_avg__0(AB_E_c127_,C_VariableName_LC_,dir_trunk,'E_c127'); end;%if flag_E;
%%%%%%%%;
if flag_I; test_loader_plot_C_absZ_0(AB_I_c127_,C_VariableName_LC_,dir_trunk,'I_c127'); end;%if flag_I; 
if flag_E; test_loader_plot_C_absZ_0(AB_E_c127_,C_VariableName_LC_,dir_trunk,'E_c127'); end;%if flag_I; 
%%%%%%%%;
if flag_I; test_loader_plot_Z_absZ_0(AB_I_c127_,dir_trunk,'I_c127'); end;%if flag_I; 
if flag_E; test_loader_plot_Z_absZ_0(AB_E_c127_,dir_trunk,'E_c127'); end;%if flag_I; 
%%%%%%%%;

flag_test=1;
if flag_test;
%%%%%%%;
% Now we can test a pair of labels: ;
%%%%%%%%;
for nl=1:3;
if nl==1; nA=find(strcmp(u_CLabel_,'28')); nB=find(strcmp(u_CLabel_,'33')); end;
if nl==2; nA=find(strcmp(u_CLabel_,'22')); nB=find(strcmp(u_CLabel_,'11')); end;
if nl==3; nA=find(strcmp(u_CLabel_,'19')); nB=find(strcmp(u_CLabel_,'15')); end;
disp(sprintf(' %% Comparing Label %d (%s) and %d (%s):',nA,u_CLabel_{nA},nB,u_CLabel_{nB}));
%%%%%%%%;
if flag_I; test_loader_plot_sort_list_0(AB_I_c012_,nA,nB,u_CLabel_,C_VariableName_LC_,dir_trunk,'I_c012'); end;%if flag_I;
if flag_E; test_loader_plot_sort_list_0(AB_E_c012_,nA,nB,u_CLabel_,C_VariableName_LC_,dir_trunk,'E_c012'); end;%if flag_E;
%%%%%%%%;
end;%for nl=1:3;
end;%if flag_test;
flag_test=1;
if flag_test;
%%%%%%%;
% Now we can test a pair of labels: ;
%%%%%%%%;
for nl=1:3;
if nl==1; nA=find(strcmp(u_CLabel_,'28')); nB=find(strcmp(u_CLabel_,'33')); end;
if nl==2; nA=find(strcmp(u_CLabel_,'22')); nB=find(strcmp(u_CLabel_,'11')); end;
if nl==3; nA=find(strcmp(u_CLabel_,'19')); nB=find(strcmp(u_CLabel_,'15')); end;
disp(sprintf(' %% Comparing Label %d (%s) and %d (%s):',nA,u_CLabel_{nA},nB,u_CLabel_{nB}));
%%%%%%%%;
if flag_I; test_loader_plot_sort_list_0(AB_I_c042_,nA,nB,u_CLabel_,C_VariableName_LC_,dir_trunk,'I_c042'); end;%if flag_I;
if flag_E; test_loader_plot_sort_list_0(AB_E_c042_,nA,nB,u_CLabel_,C_VariableName_LC_,dir_trunk,'E_c042'); end;%if flag_E;
%%%%%%%%;
end;%for nl=1:3;
end;%if flag_test;
flag_test=1;
if flag_test;
%%%%%%%;
% Now we can test a pair of labels: ;
%%%%%%%%;
for nl=1:3;
if nl==1; nA=find(strcmp(u_CLabel_,'28')); nB=find(strcmp(u_CLabel_,'33')); end;
if nl==2; nA=find(strcmp(u_CLabel_,'22')); nB=find(strcmp(u_CLabel_,'11')); end;
if nl==3; nA=find(strcmp(u_CLabel_,'19')); nB=find(strcmp(u_CLabel_,'15')); end;
disp(sprintf(' %% Comparing Label %d (%s) and %d (%s):',nA,u_CLabel_{nA},nB,u_CLabel_{nB}));
%%%%%%%%;
if flag_I; test_loader_plot_sort_list_0(AB_I_c127_,nA,nB,u_CLabel_,C_VariableName_LC_,dir_trunk,'I_c127'); end;%if flag_I;
if flag_E; test_loader_plot_sort_list_0(AB_E_c127_,nA,nB,u_CLabel_,C_VariableName_LC_,dir_trunk,'E_c127'); end;%if flag_E;
%%%%%%%%;
end;%for nl=1:3;
end;%if flag_test;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;

fname_readme = sprintf('%s/dir_mat/readme_sub.txt',dir_trunk);
fp_readme = fopen(fname_readme,'w');
fprintf(fp_readme,'u_ID_sub_.nsv: newline delimited list of sample ids, subselected for quality.\n');
fprintf(fp_readme,'str_CLabel_sub_.nsv: newline delimited list of cluster-labels for the samples.\n');
fprintf(fp_readme,'C_VariableName_.tsv: tab delimited list of metadata (i.e., Covariates) names.\n');
fprintf(fp_readme,'C_VariableName_.nsv: newline delimited list of metadata (i.e., Covariates) names.\n');
fprintf(fp_readme,'E_GeneName_sub_.nsv: newline delimited list of exon gene names, subselected for quality.\n');
fprintf(fp_readme,'I_GeneName_sub_.nsv: newline delimited list of intron gene names, subselected for quality.\n');
%%%%%%%%;
fname_tsv = sprintf('%s/dir_mat/u_ID_sub_.nsv',dir_trunk);
fp=fopen(fname_tsv,'w');
fprintf(fp,'%s\n',u_ID_{1:end});
fclose(fp);
%%%%%%%%;
fname_tsv = sprintf('%s/dir_mat/str_CLabel_sub_.nsv',dir_trunk);
fp=fopen(fname_tsv,'w');
fprintf(fp,'%s\n',str_CLabel_{1:end});
fclose(fp);
fname_tsv = sprintf('%s/dir_mat/C_VariableName_.tsv',dir_trunk);
fp=fopen(fname_tsv,'w');
fprintf(fp,'%s\t',C_VariableName_{1:end});
fclose(fp);
fname_tsv = sprintf('%s/dir_mat/C_VariableName_.nsv',dir_trunk);
fp=fopen(fname_tsv,'w');
fprintf(fp,'%s\n',C_VariableName_{1:end});
fclose(fp);
%%%%%%%%;
fname_tsv = sprintf('%s/dir_mat/E_GeneName_sub_.nsv',dir_trunk);
fp=fopen(fname_tsv,'w');
fprintf(fp,'%s\n',E_VariableName_sub_{1:end});
fclose(fp);
%%%%%%%%;
fname_tsv = sprintf('%s/dir_mat/I_GeneName_sub_.nsv',dir_trunk);
fp=fopen(fname_tsv,'w');
fprintf(fp,'%s\n',I_VariableName_sub_{1:end});
fclose(fp);
%%%%%%%%;
fprintf(fp_readme,'E_limp_.tsv: tab delimited array of samples (rows) by exon gene log-expression-values (rank-6 linear imputation) (columns).\n');
fprintf(fp_readme,'I_limp_.tsv: tab delimited array of smaples (rows) by intron gene log-expression-values (rank-6 linear imputation) (columns).\n');
fprintf(fp_readme,'E_licl_.tsv: tab delimited array of samples (rows) by exon gene log-expression-values (rank-6 linear imputation) (columns) followed by mean-centering (centered-log-ratio).\n');
fprintf(fp_readme,'I_licl_.tsv: tab delimited array of smaples (rows) by intron gene log-expression-values (rank-6 linear imputation) (columns) followed by mean-centering (centered-log-ratio).\n');
fprintf(fp_readme,'E_licr_.tsv: tab delimited array of samples (rows) by exon gene log-expression-values (rank-6 linear imputation) (columns) followed by mean-centering (centered-log-ratio) followed by rank-normalization.\n');
fprintf(fp_readme,'I_licr_.tsv: tab delimited array of smaples (rows) by intron gene log-expression-values (rank-6 linear imputation) (columns) followed by mean-centering (centered-log-ratio) followed by rank-normalization.\n');
%%%%%%%%;
tmp_ = E_limp_;
fname_tsv = sprintf('%s/dir_mat/E_limp_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = I_limp_;
fname_tsv = sprintf('%s/dir_mat/I_limp_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = E_licl_;
fname_tsv = sprintf('%s/dir_mat/E_licl_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = I_licl_;
fname_tsv = sprintf('%s/dir_mat/I_licl_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = E_licr_;
fname_tsv = sprintf('%s/dir_mat/E_licr_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = I_licr_;
fname_tsv = sprintf('%s/dir_mat/I_licr_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
%%%%%%%%;

%%%%%%%%;
fprintf(fp_readme,'C_rank_c012_.tsv: tab delimited array of samples (rows) by covariate ranks (columns).\n');
fprintf(fp_readme,'E_limp_c012_zeta_un_.tsv and E_limp_c012_zeta_vn_.tsv: tab delimited arrays of coefficients. The outer-product [E_limp_c012_zeta_] := [E_limp_c012_zeta_un_]*[E_limp_c012_zeta_vn_] is a coefficient matrix for the linear model [Exon-Gene-Limp] = [1 , Covariate-Rank]*[E_limp_c012_zeta_]. The ''1'' in the previous expression refers to a vector of all ones (i.e., the constant term in the linear model).\n');
fprintf(fp_readme,'E_limp_c012_beta_un_.tsv and E_limp_c012_beta_vn_.tsv: tab delimited arrays of coefficients. The outer-product [E_limp_c012_beta_] := [E_limp_c012_beta_un_]*[E_limp_c012_beta_vn_] is a coefficient matrix for the linear model [Covariate-Rank] = [1 , Exon-Gene-Limp]*[E_limp_c012_beta_]. The ''1'' in the previous expression refers to a vector of all ones (i.e., the constant term in the linear model).\n');
fprintf(fp_readme,'I_limp_c012_zeta_un_.tsv and I_limp_c012_zeta_vn_.tsv: tab delimited arrays of coefficients. The outer-product [I_limp_c012_zeta_] := [I_limp_c012_zeta_un_]*[I_limp_c012_zeta_vn_] is a coefficient matrix for the linear model [Intron-Gene-Limp] = [1 , Covariate-Rank]*[I_limp_c012_zeta_]. The ''1'' in the previous expression refers to a vector of all ones (i.e., the constant term in the linear model).\n');
fprintf(fp_readme,'I_limp_c012_beta_un_.tsv and I_limp_c012_beta_vn_.tsv: tab delimited arrays of coefficients. The outer-product [I_limp_c012_beta_] := [I_limp_c012_beta_un_]*[I_limp_c012_beta_vn_] is a coefficient matrix for the linear model [Covariate-Rank] = [1 , Intron-Gene-Limp]*[I_limp_c012_beta_]. The ''1'' in the previous expression refers to a vector of all ones (i.e., the constant term in the linear model).\n');
fprintf(fp_readme,'E_licl_c012_zeta_un_.tsv and E_licl_c012_zeta_vn_.tsv: tab delimited arrays of coefficients. The outer-product [E_licl_c012_zeta_] := [E_licl_c012_zeta_un_]*[E_licl_c012_zeta_vn_] is a coefficient matrix for the linear model [Exon-Gene-Licl] = [1 , Covariate-Rank]*[E_licl_c012_zeta_]. The ''1'' in the previous expression refers to a vector of all ones (i.e., the constant term in the linear model).\n');
fprintf(fp_readme,'E_licl_c012_beta_un_.tsv and E_licl_c012_beta_vn_.tsv: tab delimited arrays of coefficients. The outer-product [E_licl_c012_beta_] := [E_licl_c012_beta_un_]*[E_licl_c012_beta_vn_] is a coefficient matrix for the linear model [Covariate-Rank] = [1 , Exon-Gene-Licl]*[E_licl_c012_beta_]. The ''1'' in the previous expression refers to a vector of all ones (i.e., the constant term in the linear model).\n');
fprintf(fp_readme,'I_licl_c012_zeta_un_.tsv and I_licl_c012_zeta_vn_.tsv: tab delimited arrays of coefficients. The outer-product [I_licl_c012_zeta_] := [I_licl_c012_zeta_un_]*[I_licl_c012_zeta_vn_] is a coefficient matrix for the linear model [Intron-Gene-Licl] = [1 , Covariate-Rank]*[I_licl_c012_zeta_]. The ''1'' in the previous expression refers to a vector of all ones (i.e., the constant term in the linear model).\n');
fprintf(fp_readme,'I_licl_c012_beta_un_.tsv and I_licl_c012_beta_vn_.tsv: tab delimited arrays of coefficients. The outer-product [I_licl_c012_beta_] := [I_licl_c012_beta_un_]*[I_licl_c012_beta_vn_] is a coefficient matrix for the linear model [Covariate-Rank] = [1 , Intron-Gene-Licl]*[I_licl_c012_beta_]. The ''1'' in the previous expression refers to a vector of all ones (i.e., the constant term in the linear model).\n');
fprintf(fp_readme,'E_licr_c012_zeta_un_.tsv and E_licr_c012_zeta_vn_.tsv: tab delimited arrays of coefficients. The outer-product [E_licr_c012_zeta_] := [E_licr_c012_zeta_un_]*[E_licr_c012_zeta_vn_] is a coefficient matrix for the linear model [Exon-Gene-Licr] = [1 , Covariate-Rank]*[E_licr_c012_zeta_]. The ''1'' in the previous expression refers to a vector of all ones (i.e., the constant term in the linear model).\n');
fprintf(fp_readme,'E_licr_c012_beta_un_.tsv and E_licr_c012_beta_vn_.tsv: tab delimited arrays of coefficients. The outer-product [E_licr_c012_beta_] := [E_licr_c012_beta_un_]*[E_licr_c012_beta_vn_] is a coefficient matrix for the linear model [Covariate-Rank] = [1 , Exon-Gene-Licr]*[E_licr_c012_beta_]. The ''1'' in the previous expression refers to a vector of all ones (i.e., the constant term in the linear model).\n');
fprintf(fp_readme,'I_licr_c012_zeta_un_.tsv and I_licr_c012_zeta_vn_.tsv: tab delimited arrays of coefficients. The outer-product [I_licr_c012_zeta_] := [I_licr_c012_zeta_un_]*[I_licr_c012_zeta_vn_] is a coefficient matrix for the linear model [Intron-Gene-Licr] = [1 , Covariate-Rank]*[I_licr_c012_zeta_]. The ''1'' in the previous expression refers to a vector of all ones (i.e., the constant term in the linear model).\n');
fprintf(fp_readme,'I_licr_c012_beta_un_.tsv and I_licr_c012_beta_vn_.tsv: tab delimited arrays of coefficients. The outer-product [I_licr_c012_beta_] := [I_licr_c012_beta_un_]*[I_licr_c012_beta_vn_] is a coefficient matrix for the linear model [Covariate-Rank] = [1 , Intron-Gene-Licr]*[I_licr_c012_beta_]. The ''1'' in the previous expression refers to a vector of all ones (i.e., the constant term in the linear model).\n');
fprintf(fp_readme,'E_c012_CLabel_pair_.nsv: newline delimited list of cluster-pairs for use with AB_E_c012_C_absZ_.tsv, etc.\n');
fprintf(fp_readme,'I_c012_CLabel_pair_.nsv: newline delimited list of cluster-pairs for use with AB_I_c012_C_absZ_.tsv, etc.. Should be identical to E_c012_CLabel_pair_.nsv.\n');
fprintf(fp_readme,'AB_E_c012_C_absZ_.tsv: tab delimited array of cluster-pairs (rows) by covariate (columns). Each array entry indicates the absolute-value of the z-score associated with the (raw) differential-expression of that particular covariate-rank over that cluster pair.\n');
fprintf(fp_readme,'AB_E_c012_K_absZ_.tsv: tab delimited array of cluster-pairs (rows) by covariate (columns). Each array entry indicates the absolute-value of the z-score associated with the (relative) differential-expression of that particular covariate-rank over that cluster pair. In this context ''relative'' means corrected for the linear effect of the E gene-ranks.\n');
fprintf(fp_readme,'AB_E_c012_Z_absZ_.tsv: tab delimited array of cluster-pairs (rows) by exon genes (columns). Each array entry indicates the absolute-value of the z-score associated with the (raw) differential-expression of that particular gene-rank over that cluster pair.\n');
fprintf(fp_readme,'AB_E_c012_H_absZ_.tsv: tab delimited array of cluster-pairs (rows) by exon genes (columns). Each array entry indicates the absolute-value of the z-score associated with the (relative) differential-expression of that particular gene-rank over that cluster pair. In this context ''relative'' means corrected for the linear effect of the covariate-rank.\n');
fprintf(fp_readme,'AB_I_c012_C_absZ_.tsv: tab delimited array of cluster-pairs (rows) by covariate (columns). Each array entry indicates the absolute-value of the z-score associated with the (raw) differential-expression of that particular covariate-rank over that cluster pair.\n');
fprintf(fp_readme,'AB_I_c012_K_absZ_.tsv: tab delimited array of cluster-pairs (rows) by covariate (columns). Each array entry indicates the absolute-value of the z-score associated with the (relative) differential-expression of that particular covariate-rank over that cluster pair. In this context ''relative'' means corrected for the linear effect of the I gene-ranks.\n');
fprintf(fp_readme,'AB_I_c012_Z_absZ_.tsv: tab delimited array of cluster-pairs (rows) by intron genes (columns). Each array entry indicates the absolute-value of the z-score associated with the (raw) differential-expression of that particular gene-rank over that cluster pair.\n');
fprintf(fp_readme,'AB_I_c012_H_absZ_.tsv: tab delimited array of cluster-pairs (rows) by intron genes (columns). Each array entry indicates the absolute-value of the z-score associated with the (relative) differential-expression of that particular gene-rank over that cluster pair. In this context ''relative'' means corrected for the linear effect of the covariate-rank.\n');
fprintf(fp_readme,'AB_E_c012_C_rawZ_.tsv: tab delimited array of cluster-pairs (rows) by covariate (columns). Each array entry indicates the raw z-score associated with the (raw) differential-expression of that particular covariate-rank over that cluster pair.\n');
fprintf(fp_readme,'AB_E_c012_K_rawZ_.tsv: tab delimited array of cluster-pairs (rows) by covariate (columns). Each array entry indicates the raw z-score associated with the (relative) differential-expression of that particular covariate-rank over that cluster pair. In this context ''relative'' means corrected for the linear effect of the E gene-ranks.\n');
fprintf(fp_readme,'AB_E_c012_Z_rawZ_.tsv: tab delimited array of cluster-pairs (rows) by exon genes (columns). Each array entry indicates the raw z-score associated with the (raw) differential-expression of that particular gene-rank over that cluster pair.\n');
fprintf(fp_readme,'AB_E_c012_H_rawZ_.tsv: tab delimited array of cluster-pairs (rows) by exon genes (columns). Each array entry indicates the raw z-score associated with the (relative) differential-expression of that particular gene-rank over that cluster pair. In this context ''relative'' means corrected for the linear effect of the covariate-rank.\n');
fprintf(fp_readme,'AB_I_c012_C_rawZ_.tsv: tab delimited array of cluster-pairs (rows) by covariate (columns). Each array entry indicates the raw z-score associated with the (raw) differential-expression of that particular covariate-rank over that cluster pair.\n');
fprintf(fp_readme,'AB_I_c012_K_rawZ_.tsv: tab delimited array of cluster-pairs (rows) by covariate (columns). Each array entry indicates the raw z-score associated with the (relative) differential-expression of that particular covariate-rank over that cluster pair. In this context ''relative'' means corrected for the linear effect of the I gene-ranks.\n');
fprintf(fp_readme,'AB_I_c012_Z_rawZ_.tsv: tab delimited array of cluster-pairs (rows) by intron genes (columns). Each array entry indicates the raw z-score associated with the (raw) differential-expression of that particular gene-rank over that cluster pair.\n');
fprintf(fp_readme,'AB_I_c012_H_rawZ_.tsv: tab delimited array of cluster-pairs (rows) by intron genes (columns). Each array entry indicates the raw z-score associated with the (relative) differential-expression of that particular gene-rank over that cluster pair. In this context ''relative'' means corrected for the linear effect of the covariate-rank.\n');
%%%%%%%%;
tmp_ = C_rank_c012_;
fname_tsv = sprintf('%s/dir_mat/C_rank_c012_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
%%%%%%%%;
if flag_E;
tmp_ = E_limp_c012_zeta_un_(:,1:n_E_limp_c012_zeta);
fname_tsv = sprintf('%s/dir_mat/E_limp_c012_zeta_un_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = E_limp_c012_zeta_vn_(:,1:n_E_limp_c012_zeta);
fname_tsv = sprintf('%s/dir_mat/E_limp_c012_zeta_vn_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = E_limp_c012_beta_un_(:,1:n_E_limp_c012_beta);
fname_tsv = sprintf('%s/dir_mat/E_limp_c012_beta_un_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = E_limp_c012_beta_vn_(:,1:n_E_limp_c012_beta);
fname_tsv = sprintf('%s/dir_mat/E_limp_c012_beta_vn_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
end;%if flag_E;
%%%%%%%%;
if flag_I;
tmp_ = I_limp_c012_zeta_un_(:,1:n_I_limp_c012_zeta);
fname_tsv = sprintf('%s/dir_mat/I_limp_c012_zeta_un_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = I_limp_c012_zeta_vn_(:,1:n_I_limp_c012_zeta);
fname_tsv = sprintf('%s/dir_mat/I_limp_c012_zeta_vn_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = I_limp_c012_beta_un_(:,1:n_I_limp_c012_beta);
fname_tsv = sprintf('%s/dir_mat/I_limp_c012_beta_un_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = I_limp_c012_beta_vn_(:,1:n_I_limp_c012_beta);
fname_tsv = sprintf('%s/dir_mat/I_limp_c012_beta_vn_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
end;%if flag_I;
%%%%%%%%;
if flag_E;
tmp_ = E_licl_c012_zeta_un_(:,1:n_E_licl_c012_zeta);
fname_tsv = sprintf('%s/dir_mat/E_licl_c012_zeta_un_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = E_licl_c012_zeta_vn_(:,1:n_E_licl_c012_zeta);
fname_tsv = sprintf('%s/dir_mat/E_licl_c012_zeta_vn_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = E_licl_c012_beta_un_(:,1:n_E_licl_c012_beta);
fname_tsv = sprintf('%s/dir_mat/E_licl_c012_beta_un_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = E_licl_c012_beta_vn_(:,1:n_E_licl_c012_beta);
fname_tsv = sprintf('%s/dir_mat/E_licl_c012_beta_vn_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
end;%if flag_E;
%%%%%%%%;
if flag_I;
tmp_ = I_licl_c012_zeta_un_(:,1:n_I_licl_c012_zeta);
fname_tsv = sprintf('%s/dir_mat/I_licl_c012_zeta_un_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = I_licl_c012_zeta_vn_(:,1:n_I_licl_c012_zeta);
fname_tsv = sprintf('%s/dir_mat/I_licl_c012_zeta_vn_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = I_licl_c012_beta_un_(:,1:n_I_licl_c012_beta);
fname_tsv = sprintf('%s/dir_mat/I_licl_c012_beta_un_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = I_licl_c012_beta_vn_(:,1:n_I_licl_c012_beta);
fname_tsv = sprintf('%s/dir_mat/I_licl_c012_beta_vn_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
end;%if flag_I;
%%%%%%%%;
if flag_E;
tmp_ = E_licr_c012_zeta_un_(:,1:n_E_licr_c012_zeta);
fname_tsv = sprintf('%s/dir_mat/E_licr_c012_zeta_un_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = E_licr_c012_zeta_vn_(:,1:n_E_licr_c012_zeta);
fname_tsv = sprintf('%s/dir_mat/E_licr_c012_zeta_vn_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = E_licr_c012_beta_un_(:,1:n_E_licr_c012_beta);
fname_tsv = sprintf('%s/dir_mat/E_licr_c012_beta_un_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = E_licr_c012_beta_vn_(:,1:n_E_licr_c012_beta);
fname_tsv = sprintf('%s/dir_mat/E_licr_c012_beta_vn_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
end;%if flag_E;
%%%%%%%%;
if flag_I;
tmp_ = I_licr_c012_zeta_un_(:,1:n_I_licr_c012_zeta);
fname_tsv = sprintf('%s/dir_mat/I_licr_c012_zeta_un_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = I_licr_c012_zeta_vn_(:,1:n_I_licr_c012_zeta);
fname_tsv = sprintf('%s/dir_mat/I_licr_c012_zeta_vn_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = I_licr_c012_beta_un_(:,1:n_I_licr_c012_beta);
fname_tsv = sprintf('%s/dir_mat/I_licr_c012_beta_un_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = I_licr_c012_beta_vn_(:,1:n_I_licr_c012_beta);
fname_tsv = sprintf('%s/dir_mat/I_licr_c012_beta_vn_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
end;%if flag_I;
%%%%%%%%;
if flag_E;
AB_E_c012_AB_C_absZ_ = AB_E_c012_.AB_C_absZ_;
fname_tsv = sprintf('%s/dir_mat/AB_E_c012_C_absZ_.tsv',dir_trunk);
save(fname_tsv,'AB_E_c012_AB_C_absZ_','-ascii','-tabs');
AB_E_c012_AB_K_absZ_ = AB_E_c012_.AB_K_absZ_;
fname_tsv = sprintf('%s/dir_mat/AB_E_c012_K_absZ_.tsv',dir_trunk);
save(fname_tsv,'AB_E_c012_AB_K_absZ_','-ascii','-tabs');
AB_E_c012_AB_Z_absZ_ = AB_E_c012_.AB_Z_absZ_;
fname_tsv = sprintf('%s/dir_mat/AB_E_c012_Z_absZ_.tsv',dir_trunk);
save(fname_tsv,'AB_E_c012_AB_Z_absZ_','-ascii','-tabs');
AB_E_c012_AB_H_absZ_ = AB_E_c012_.AB_H_absZ_;
fname_tsv = sprintf('%s/dir_mat/AB_E_c012_H_absZ_.tsv',dir_trunk);
save(fname_tsv,'AB_E_c012_AB_H_absZ_','-ascii','-tabs');
end;%if flag_E;
%%%%%%%%;
if flag_I;
AB_I_c012_AB_C_absZ_ = AB_I_c012_.AB_C_absZ_;
fname_tsv = sprintf('%s/dir_mat/AB_I_c012_C_absZ_.tsv',dir_trunk);
save(fname_tsv,'AB_I_c012_AB_C_absZ_','-ascii','-tabs');
AB_I_c012_AB_K_absZ_ = AB_I_c012_.AB_K_absZ_;
fname_tsv = sprintf('%s/dir_mat/AB_I_c012_K_absZ_.tsv',dir_trunk);
save(fname_tsv,'AB_I_c012_AB_K_absZ_','-ascii','-tabs');
AB_I_c012_AB_Z_absZ_ = AB_I_c012_.AB_Z_absZ_;
fname_tsv = sprintf('%s/dir_mat/AB_I_c012_Z_absZ_.tsv',dir_trunk);
save(fname_tsv,'AB_I_c012_AB_Z_absZ_','-ascii','-tabs');
AB_I_c012_AB_H_absZ_ = AB_I_c012_.AB_H_absZ_;
fname_tsv = sprintf('%s/dir_mat/AB_I_c012_H_absZ_.tsv',dir_trunk);
save(fname_tsv,'AB_I_c012_AB_H_absZ_','-ascii','-tabs');
end;%if flag_I;
%%%%%%%%;
if flag_E;
AB_E_c012_AB_C_rawZ_ = AB_E_c012_.AB_C_rawZ_;
fname_tsv = sprintf('%s/dir_mat/AB_E_c012_C_rawZ_.tsv',dir_trunk);
save(fname_tsv,'AB_E_c012_AB_C_rawZ_','-ascii','-tabs');
AB_E_c012_AB_K_rawZ_ = AB_E_c012_.AB_K_rawZ_;
fname_tsv = sprintf('%s/dir_mat/AB_E_c012_K_rawZ_.tsv',dir_trunk);
save(fname_tsv,'AB_E_c012_AB_K_rawZ_','-ascii','-tabs');
AB_E_c012_AB_Z_rawZ_ = AB_E_c012_.AB_Z_rawZ_;
fname_tsv = sprintf('%s/dir_mat/AB_E_c012_Z_rawZ_.tsv',dir_trunk);
save(fname_tsv,'AB_E_c012_AB_Z_rawZ_','-ascii','-tabs');
AB_E_c012_AB_H_rawZ_ = AB_E_c012_.AB_H_rawZ_;
fname_tsv = sprintf('%s/dir_mat/AB_E_c012_H_rawZ_.tsv',dir_trunk);
save(fname_tsv,'AB_E_c012_AB_H_rawZ_','-ascii','-tabs');
end;%if flag_E;
%%%%%%%%;
if flag_I;
AB_I_c012_AB_C_rawZ_ = AB_I_c012_.AB_C_rawZ_;
fname_tsv = sprintf('%s/dir_mat/AB_I_c012_C_rawZ_.tsv',dir_trunk);
save(fname_tsv,'AB_I_c012_AB_C_rawZ_','-ascii','-tabs');
AB_I_c012_AB_K_rawZ_ = AB_I_c012_.AB_K_rawZ_;
fname_tsv = sprintf('%s/dir_mat/AB_I_c012_K_rawZ_.tsv',dir_trunk);
save(fname_tsv,'AB_I_c012_AB_K_rawZ_','-ascii','-tabs');
AB_I_c012_AB_Z_rawZ_ = AB_I_c012_.AB_Z_rawZ_;
fname_tsv = sprintf('%s/dir_mat/AB_I_c012_Z_rawZ_.tsv',dir_trunk);
save(fname_tsv,'AB_I_c012_AB_Z_rawZ_','-ascii','-tabs');
AB_I_c012_AB_H_rawZ_ = AB_I_c012_.AB_H_rawZ_;
fname_tsv = sprintf('%s/dir_mat/AB_I_c012_H_rawZ_.tsv',dir_trunk);
save(fname_tsv,'AB_I_c012_AB_H_rawZ_','-ascii','-tabs');
end;%if flag_I;
%%%%%%%
if flag_I; 
fname_mat = sprintf('%s/dir_mat/AB_I_c012_.AB_X_absZ_.mat',dir_trunk); 
AB_I_c012_n_u = AB_I_c012_.n_u;
AB_I_c012_n_CLabel = AB_I_c012_.n_CLabel;
AB_I_c012_n_CCOV = AB_I_c012_.n_CCOV;
AB_I_c012_n_Z_GENE = AB_I_c012_.n_Z_GENE;
AB_I_c012_CLabel_pair_ = AB_I_c012_.CLabel_pair_;
AB_I_c012_AB_C_absZ_ = AB_I_c012_.AB_C_absZ_;
AB_I_c012_AB_K_absZ_ = AB_I_c012_.AB_K_absZ_;
AB_I_c012_AB_Z_absZ_ = AB_I_c012_.AB_Z_absZ_;
AB_I_c012_AB_H_absZ_ = AB_I_c012_.AB_H_absZ_;
disp(sprintf(' %% writing %s',fname_mat));
%save(fname_mat,'AB_I_c012_n_u','AB_I_c012_n_CLabel','AB_I_c012_n_CCOV','AB_I_c012_n_Z_GENE','AB_I_c012_CLabel_pair_','AB_I_c012_AB_C_absZ_','AB_I_c012_AB_K_absZ_','AB_I_c012_AB_Z_absZ_','AB_I_c012_AB_H_absZ_')
save(fname_mat,'AB_I_c012_n_u','AB_I_c012_n_CLabel','AB_I_c012_n_CCOV','AB_I_c012_n_Z_GENE','AB_I_c012_CLabel_pair_','AB_I_c012_AB_C_absZ_','AB_I_c012_AB_K_absZ_')
fname_tsv = sprintf('%s/dir_mat/AB_I_c012_CLabel_pair_.tsv',dir_trunk);
fp=fopen(fname_tsv,'w');
for ns=1:numel(AB_I_c012_CLabel_pair_);
fprintf(fp,'%s\n',AB_I_c012_CLabel_pair_{ns});
end;%for ns=1:numel(AB_I_c012_CLabel_pair_);
fclose(fp);
end;%if flag_I; 
%%%%%%%%;
if flag_E; 
fname_mat = sprintf('%s/dir_mat/AB_E_c012_.AB_X_absZ_.mat',dir_trunk); 
AB_E_c012_n_u = AB_E_c012_.n_u;
AB_E_c012_n_CLabel = AB_E_c012_.n_CLabel;
AB_E_c012_n_CCOV = AB_E_c012_.n_CCOV;
AB_E_c012_n_Z_GENE = AB_E_c012_.n_Z_GENE;
AB_E_c012_CLabel_pair_ = AB_E_c012_.CLabel_pair_;
AB_E_c012_AB_C_absZ_ = AB_E_c012_.AB_C_absZ_;
AB_E_c012_AB_K_absZ_ = AB_E_c012_.AB_K_absZ_;
AB_E_c012_AB_Z_absZ_ = AB_E_c012_.AB_Z_absZ_;
AB_E_c012_AB_H_absZ_ = AB_E_c012_.AB_H_absZ_;
disp(sprintf(' %% writing %s',fname_mat));
%save(fname_mat,'AB_E_c012_n_u','AB_E_c012_n_CLabel','AB_E_c012_n_CCOV','AB_E_c012_n_Z_GENE','AB_E_c012_CLabel_pair_','AB_E_c012_AB_C_absZ_','AB_E_c012_AB_K_absZ_','AB_E_c012_AB_Z_absZ_','AB_E_c012_AB_H_absZ_')
save(fname_mat,'AB_E_c012_n_u','AB_E_c012_n_CLabel','AB_E_c012_n_CCOV','AB_E_c012_n_Z_GENE','AB_E_c012_CLabel_pair_','AB_E_c012_AB_C_absZ_','AB_E_c012_AB_K_absZ_')
fname_tsv = sprintf('%s/dir_mat/AB_E_c012_CLabel_pair_.tsv',dir_trunk);
fp=fopen(fname_tsv,'w');
for ns=1:numel(AB_E_c012_CLabel_pair_);
fprintf(fp,'%s\n',AB_E_c012_CLabel_pair_{ns});
end;%for ns=1:numel(AB_E_c012_CLabel_pair_);
fclose(fp);
end;%if flag_E; 
%%%%%%%%;
%%%%%%%
if flag_I; 
fname_mat = sprintf('%s/dir_mat/AB_I_c012_.AB_X_rawZ_.mat',dir_trunk); 
AB_I_c012_n_u = AB_I_c012_.n_u;
AB_I_c012_n_CLabel = AB_I_c012_.n_CLabel;
AB_I_c012_n_CCOV = AB_I_c012_.n_CCOV;
AB_I_c012_n_Z_GENE = AB_I_c012_.n_Z_GENE;
AB_I_c012_CLabel_pair_ = AB_I_c012_.CLabel_pair_;
AB_I_c012_AB_C_rawZ_ = AB_I_c012_.AB_C_rawZ_;
AB_I_c012_AB_K_rawZ_ = AB_I_c012_.AB_K_rawZ_;
AB_I_c012_AB_Z_rawZ_ = AB_I_c012_.AB_Z_rawZ_;
AB_I_c012_AB_H_rawZ_ = AB_I_c012_.AB_H_rawZ_;
disp(sprintf(' %% writing %s',fname_mat));
%save(fname_mat,'AB_I_c012_n_u','AB_I_c012_n_CLabel','AB_I_c012_n_CCOV','AB_I_c012_n_Z_GENE','AB_I_c012_CLabel_pair_','AB_I_c012_AB_C_rawZ_','AB_I_c012_AB_K_rawZ_','AB_I_c012_AB_Z_rawZ_','AB_I_c012_AB_H_rawZ_')
save(fname_mat,'AB_I_c012_n_u','AB_I_c012_n_CLabel','AB_I_c012_n_CCOV','AB_I_c012_n_Z_GENE','AB_I_c012_CLabel_pair_','AB_I_c012_AB_C_rawZ_','AB_I_c012_AB_K_rawZ_')
end;%if flag_I; 
%%%%%%%%;
if flag_E; 
fname_mat = sprintf('%s/dir_mat/AB_E_c012_.AB_X_rawZ_.mat',dir_trunk); 
AB_E_c012_n_u = AB_E_c012_.n_u;
AB_E_c012_n_CLabel = AB_E_c012_.n_CLabel;
AB_E_c012_n_CCOV = AB_E_c012_.n_CCOV;
AB_E_c012_n_Z_GENE = AB_E_c012_.n_Z_GENE;
AB_E_c012_CLabel_pair_ = AB_E_c012_.CLabel_pair_;
AB_E_c012_AB_C_rawZ_ = AB_E_c012_.AB_C_rawZ_;
AB_E_c012_AB_K_rawZ_ = AB_E_c012_.AB_K_rawZ_;
AB_E_c012_AB_Z_rawZ_ = AB_E_c012_.AB_Z_rawZ_;
AB_E_c012_AB_H_rawZ_ = AB_E_c012_.AB_H_rawZ_;
disp(sprintf(' %% writing %s',fname_mat));
%save(fname_mat,'AB_E_c012_n_u','AB_E_c012_n_CLabel','AB_E_c012_n_CCOV','AB_E_c012_n_Z_GENE','AB_E_c012_CLabel_pair_','AB_E_c012_AB_C_rawZ_','AB_E_c012_AB_K_rawZ_','AB_E_c012_AB_Z_rawZ_','AB_E_c012_AB_H_rawZ_')
save(fname_mat,'AB_E_c012_n_u','AB_E_c012_n_CLabel','AB_E_c012_n_CCOV','AB_E_c012_n_Z_GENE','AB_E_c012_CLabel_pair_','AB_E_c012_AB_C_rawZ_','AB_E_c012_AB_K_rawZ_')
end;%if flag_E; 
%%%%%%%%;

%%%%%%%%;
fprintf(fp_readme,'C_rank_c042_.tsv: tab delimited array of samples (rows) by covariate ranks (columns).\n');
fprintf(fp_readme,'E_limp_c042_zeta_un_.tsv and E_limp_c042_zeta_vn_.tsv: tab delimited arrays of coefficients. The outer-product [E_limp_c042_zeta_] := [E_limp_c042_zeta_un_]*[E_limp_c042_zeta_vn_] is a coefficient matrix for the linear model [Exon-Gene-Limp] = [1 , Covariate-Rank]*[E_limp_c042_zeta_]. The ''1'' in the previous expression refers to a vector of all ones (i.e., the constant term in the linear model).\n');
fprintf(fp_readme,'E_limp_c042_beta_un_.tsv and E_limp_c042_beta_vn_.tsv: tab delimited arrays of coefficients. The outer-product [E_limp_c042_beta_] := [E_limp_c042_beta_un_]*[E_limp_c042_beta_vn_] is a coefficient matrix for the linear model [Covariate-Rank] = [1 , Exon-Gene-Limp]*[E_limp_c042_beta_]. The ''1'' in the previous expression refers to a vector of all ones (i.e., the constant term in the linear model).\n');
fprintf(fp_readme,'I_limp_c042_zeta_un_.tsv and I_limp_c042_zeta_vn_.tsv: tab delimited arrays of coefficients. The outer-product [I_limp_c042_zeta_] := [I_limp_c042_zeta_un_]*[I_limp_c042_zeta_vn_] is a coefficient matrix for the linear model [Intron-Gene-Limp] = [1 , Covariate-Rank]*[I_limp_c042_zeta_]. The ''1'' in the previous expression refers to a vector of all ones (i.e., the constant term in the linear model).\n');
fprintf(fp_readme,'I_limp_c042_beta_un_.tsv and I_limp_c042_beta_vn_.tsv: tab delimited arrays of coefficients. The outer-product [I_limp_c042_beta_] := [I_limp_c042_beta_un_]*[I_limp_c042_beta_vn_] is a coefficient matrix for the linear model [Covariate-Rank] = [1 , Intron-Gene-Limp]*[I_limp_c042_beta_]. The ''1'' in the previous expression refers to a vector of all ones (i.e., the constant term in the linear model).\n');
fprintf(fp_readme,'E_licl_c042_zeta_un_.tsv and E_licl_c042_zeta_vn_.tsv: tab delimited arrays of coefficients. The outer-product [E_licl_c042_zeta_] := [E_licl_c042_zeta_un_]*[E_licl_c042_zeta_vn_] is a coefficient matrix for the linear model [Exon-Gene-Licl] = [1 , Covariate-Rank]*[E_licl_c042_zeta_]. The ''1'' in the previous expression refers to a vector of all ones (i.e., the constant term in the linear model).\n');
fprintf(fp_readme,'E_licl_c042_beta_un_.tsv and E_licl_c042_beta_vn_.tsv: tab delimited arrays of coefficients. The outer-product [E_licl_c042_beta_] := [E_licl_c042_beta_un_]*[E_licl_c042_beta_vn_] is a coefficient matrix for the linear model [Covariate-Rank] = [1 , Exon-Gene-Licl]*[E_licl_c042_beta_]. The ''1'' in the previous expression refers to a vector of all ones (i.e., the constant term in the linear model).\n');
fprintf(fp_readme,'I_licl_c042_zeta_un_.tsv and I_licl_c042_zeta_vn_.tsv: tab delimited arrays of coefficients. The outer-product [I_licl_c042_zeta_] := [I_licl_c042_zeta_un_]*[I_licl_c042_zeta_vn_] is a coefficient matrix for the linear model [Intron-Gene-Licl] = [1 , Covariate-Rank]*[I_licl_c042_zeta_]. The ''1'' in the previous expression refers to a vector of all ones (i.e., the constant term in the linear model).\n');
fprintf(fp_readme,'I_licl_c042_beta_un_.tsv and I_licl_c042_beta_vn_.tsv: tab delimited arrays of coefficients. The outer-product [I_licl_c042_beta_] := [I_licl_c042_beta_un_]*[I_licl_c042_beta_vn_] is a coefficient matrix for the linear model [Covariate-Rank] = [1 , Intron-Gene-Licl]*[I_licl_c042_beta_]. The ''1'' in the previous expression refers to a vector of all ones (i.e., the constant term in the linear model).\n');
fprintf(fp_readme,'E_licr_c042_zeta_un_.tsv and E_licr_c042_zeta_vn_.tsv: tab delimited arrays of coefficients. The outer-product [E_licr_c042_zeta_] := [E_licr_c042_zeta_un_]*[E_licr_c042_zeta_vn_] is a coefficient matrix for the linear model [Exon-Gene-Licr] = [1 , Covariate-Rank]*[E_licr_c042_zeta_]. The ''1'' in the previous expression refers to a vector of all ones (i.e., the constant term in the linear model).\n');
fprintf(fp_readme,'E_licr_c042_beta_un_.tsv and E_licr_c042_beta_vn_.tsv: tab delimited arrays of coefficients. The outer-product [E_licr_c042_beta_] := [E_licr_c042_beta_un_]*[E_licr_c042_beta_vn_] is a coefficient matrix for the linear model [Covariate-Rank] = [1 , Exon-Gene-Licr]*[E_licr_c042_beta_]. The ''1'' in the previous expression refers to a vector of all ones (i.e., the constant term in the linear model).\n');
fprintf(fp_readme,'I_licr_c042_zeta_un_.tsv and I_licr_c042_zeta_vn_.tsv: tab delimited arrays of coefficients. The outer-product [I_licr_c042_zeta_] := [I_licr_c042_zeta_un_]*[I_licr_c042_zeta_vn_] is a coefficient matrix for the linear model [Intron-Gene-Licr] = [1 , Covariate-Rank]*[I_licr_c042_zeta_]. The ''1'' in the previous expression refers to a vector of all ones (i.e., the constant term in the linear model).\n');
fprintf(fp_readme,'I_licr_c042_beta_un_.tsv and I_licr_c042_beta_vn_.tsv: tab delimited arrays of coefficients. The outer-product [I_licr_c042_beta_] := [I_licr_c042_beta_un_]*[I_licr_c042_beta_vn_] is a coefficient matrix for the linear model [Covariate-Rank] = [1 , Intron-Gene-Licr]*[I_licr_c042_beta_]. The ''1'' in the previous expression refers to a vector of all ones (i.e., the constant term in the linear model).\n');
fprintf(fp_readme,'E_c042_CLabel_pair_.nsv: newline delimited list of cluster-pairs for use with AB_E_c042_C_absZ_.tsv, etc.\n');
fprintf(fp_readme,'I_c042_CLabel_pair_.nsv: newline delimited list of cluster-pairs for use with AB_I_c042_C_absZ_.tsv, etc.. Should be identical to E_c042_CLabel_pair_.nsv.\n');
fprintf(fp_readme,'AB_E_c042_C_absZ_.tsv: tab delimited array of cluster-pairs (rows) by covariate (columns). Each array entry indicates the absolute-value of the z-score associated with the (raw) differential-expression of that particular covariate-rank over that cluster pair.\n');
fprintf(fp_readme,'AB_E_c042_K_absZ_.tsv: tab delimited array of cluster-pairs (rows) by covariate (columns). Each array entry indicates the absolute-value of the z-score associated with the (relative) differential-expression of that particular covariate-rank over that cluster pair. In this context ''relative'' means corrected for the linear effect of the E gene-ranks.\n');
fprintf(fp_readme,'AB_E_c042_Z_absZ_.tsv: tab delimited array of cluster-pairs (rows) by exon genes (columns). Each array entry indicates the absolute-value of the z-score associated with the (raw) differential-expression of that particular gene-rank over that cluster pair.\n');
fprintf(fp_readme,'AB_E_c042_H_absZ_.tsv: tab delimited array of cluster-pairs (rows) by exon genes (columns). Each array entry indicates the absolute-value of the z-score associated with the (relative) differential-expression of that particular gene-rank over that cluster pair. In this context ''relative'' means corrected for the linear effect of the covariate-rank.\n');
fprintf(fp_readme,'AB_I_c042_C_absZ_.tsv: tab delimited array of cluster-pairs (rows) by covariate (columns). Each array entry indicates the absolute-value of the z-score associated with the (raw) differential-expression of that particular covariate-rank over that cluster pair.\n');
fprintf(fp_readme,'AB_I_c042_K_absZ_.tsv: tab delimited array of cluster-pairs (rows) by covariate (columns). Each array entry indicates the absolute-value of the z-score associated with the (relative) differential-expression of that particular covariate-rank over that cluster pair. In this context ''relative'' means corrected for the linear effect of the I gene-ranks.\n');
fprintf(fp_readme,'AB_I_c042_Z_absZ_.tsv: tab delimited array of cluster-pairs (rows) by intron genes (columns). Each array entry indicates the absolute-value of the z-score associated with the (raw) differential-expression of that particular gene-rank over that cluster pair.\n');
fprintf(fp_readme,'AB_I_c042_H_absZ_.tsv: tab delimited array of cluster-pairs (rows) by intron genes (columns). Each array entry indicates the absolute-value of the z-score associated with the (relative) differential-expression of that particular gene-rank over that cluster pair. In this context ''relative'' means corrected for the linear effect of the covariate-rank.\n');
fprintf(fp_readme,'AB_E_c042_C_rawZ_.tsv: tab delimited array of cluster-pairs (rows) by covariate (columns). Each array entry indicates the raw z-score associated with the (raw) differential-expression of that particular covariate-rank over that cluster pair.\n');
fprintf(fp_readme,'AB_E_c042_K_rawZ_.tsv: tab delimited array of cluster-pairs (rows) by covariate (columns). Each array entry indicates the raw z-score associated with the (relative) differential-expression of that particular covariate-rank over that cluster pair. In this context ''relative'' means corrected for the linear effect of the E gene-ranks.\n');
fprintf(fp_readme,'AB_E_c042_Z_rawZ_.tsv: tab delimited array of cluster-pairs (rows) by exon genes (columns). Each array entry indicates the raw z-score associated with the (raw) differential-expression of that particular gene-rank over that cluster pair.\n');
fprintf(fp_readme,'AB_E_c042_H_rawZ_.tsv: tab delimited array of cluster-pairs (rows) by exon genes (columns). Each array entry indicates the raw z-score associated with the (relative) differential-expression of that particular gene-rank over that cluster pair. In this context ''relative'' means corrected for the linear effect of the covariate-rank.\n');
fprintf(fp_readme,'AB_I_c042_C_rawZ_.tsv: tab delimited array of cluster-pairs (rows) by covariate (columns). Each array entry indicates the raw z-score associated with the (raw) differential-expression of that particular covariate-rank over that cluster pair.\n');
fprintf(fp_readme,'AB_I_c042_K_rawZ_.tsv: tab delimited array of cluster-pairs (rows) by covariate (columns). Each array entry indicates the raw z-score associated with the (relative) differential-expression of that particular covariate-rank over that cluster pair. In this context ''relative'' means corrected for the linear effect of the I gene-ranks.\n');
fprintf(fp_readme,'AB_I_c042_Z_rawZ_.tsv: tab delimited array of cluster-pairs (rows) by intron genes (columns). Each array entry indicates the raw z-score associated with the (raw) differential-expression of that particular gene-rank over that cluster pair.\n');
fprintf(fp_readme,'AB_I_c042_H_rawZ_.tsv: tab delimited array of cluster-pairs (rows) by intron genes (columns). Each array entry indicates the raw z-score associated with the (relative) differential-expression of that particular gene-rank over that cluster pair. In this context ''relative'' means corrected for the linear effect of the covariate-rank.\n');
%%%%%%%%;
tmp_ = C_rank_c042_;
fname_tsv = sprintf('%s/dir_mat/C_rank_c042_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
%%%%%%%%;
if flag_E;
tmp_ = E_limp_c042_zeta_un_(:,1:n_E_limp_c042_zeta);
fname_tsv = sprintf('%s/dir_mat/E_limp_c042_zeta_un_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = E_limp_c042_zeta_vn_(:,1:n_E_limp_c042_zeta);
fname_tsv = sprintf('%s/dir_mat/E_limp_c042_zeta_vn_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = E_limp_c042_beta_un_(:,1:n_E_limp_c042_beta);
fname_tsv = sprintf('%s/dir_mat/E_limp_c042_beta_un_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = E_limp_c042_beta_vn_(:,1:n_E_limp_c042_beta);
fname_tsv = sprintf('%s/dir_mat/E_limp_c042_beta_vn_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
end;%if flag_E;
%%%%%%%%;
if flag_I;
tmp_ = I_limp_c042_zeta_un_(:,1:n_I_limp_c042_zeta);
fname_tsv = sprintf('%s/dir_mat/I_limp_c042_zeta_un_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = I_limp_c042_zeta_vn_(:,1:n_I_limp_c042_zeta);
fname_tsv = sprintf('%s/dir_mat/I_limp_c042_zeta_vn_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = I_limp_c042_beta_un_(:,1:n_I_limp_c042_beta);
fname_tsv = sprintf('%s/dir_mat/I_limp_c042_beta_un_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = I_limp_c042_beta_vn_(:,1:n_I_limp_c042_beta);
fname_tsv = sprintf('%s/dir_mat/I_limp_c042_beta_vn_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
end;%if flag_I;
%%%%%%%%;
if flag_E;
tmp_ = E_licl_c042_zeta_un_(:,1:n_E_licl_c042_zeta);
fname_tsv = sprintf('%s/dir_mat/E_licl_c042_zeta_un_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = E_licl_c042_zeta_vn_(:,1:n_E_licl_c042_zeta);
fname_tsv = sprintf('%s/dir_mat/E_licl_c042_zeta_vn_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = E_licl_c042_beta_un_(:,1:n_E_licl_c042_beta);
fname_tsv = sprintf('%s/dir_mat/E_licl_c042_beta_un_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = E_licl_c042_beta_vn_(:,1:n_E_licl_c042_beta);
fname_tsv = sprintf('%s/dir_mat/E_licl_c042_beta_vn_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
end;%if flag_E;
%%%%%%%%;
if flag_I;
tmp_ = I_licl_c042_zeta_un_(:,1:n_I_licl_c042_zeta);
fname_tsv = sprintf('%s/dir_mat/I_licl_c042_zeta_un_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = I_licl_c042_zeta_vn_(:,1:n_I_licl_c042_zeta);
fname_tsv = sprintf('%s/dir_mat/I_licl_c042_zeta_vn_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = I_licl_c042_beta_un_(:,1:n_I_licl_c042_beta);
fname_tsv = sprintf('%s/dir_mat/I_licl_c042_beta_un_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = I_licl_c042_beta_vn_(:,1:n_I_licl_c042_beta);
fname_tsv = sprintf('%s/dir_mat/I_licl_c042_beta_vn_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
end;%if flag_I;
%%%%%%%%;
if flag_E;
tmp_ = E_licr_c042_zeta_un_(:,1:n_E_licr_c042_zeta);
fname_tsv = sprintf('%s/dir_mat/E_licr_c042_zeta_un_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = E_licr_c042_zeta_vn_(:,1:n_E_licr_c042_zeta);
fname_tsv = sprintf('%s/dir_mat/E_licr_c042_zeta_vn_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = E_licr_c042_beta_un_(:,1:n_E_licr_c042_beta);
fname_tsv = sprintf('%s/dir_mat/E_licr_c042_beta_un_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = E_licr_c042_beta_vn_(:,1:n_E_licr_c042_beta);
fname_tsv = sprintf('%s/dir_mat/E_licr_c042_beta_vn_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
end;%if flag_E;
%%%%%%%%;
if flag_I;
tmp_ = I_licr_c042_zeta_un_(:,1:n_I_licr_c042_zeta);
fname_tsv = sprintf('%s/dir_mat/I_licr_c042_zeta_un_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = I_licr_c042_zeta_vn_(:,1:n_I_licr_c042_zeta);
fname_tsv = sprintf('%s/dir_mat/I_licr_c042_zeta_vn_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = I_licr_c042_beta_un_(:,1:n_I_licr_c042_beta);
fname_tsv = sprintf('%s/dir_mat/I_licr_c042_beta_un_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = I_licr_c042_beta_vn_(:,1:n_I_licr_c042_beta);
fname_tsv = sprintf('%s/dir_mat/I_licr_c042_beta_vn_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
end;%if flag_I;
%%%%%%%%;
if flag_E;
AB_E_c042_AB_C_absZ_ = AB_E_c042_.AB_C_absZ_;
fname_tsv = sprintf('%s/dir_mat/AB_E_c042_C_absZ_.tsv',dir_trunk);
save(fname_tsv,'AB_E_c042_AB_C_absZ_','-ascii','-tabs');
AB_E_c042_AB_K_absZ_ = AB_E_c042_.AB_K_absZ_;
fname_tsv = sprintf('%s/dir_mat/AB_E_c042_K_absZ_.tsv',dir_trunk);
save(fname_tsv,'AB_E_c042_AB_K_absZ_','-ascii','-tabs');
AB_E_c042_AB_Z_absZ_ = AB_E_c042_.AB_Z_absZ_;
fname_tsv = sprintf('%s/dir_mat/AB_E_c042_Z_absZ_.tsv',dir_trunk);
save(fname_tsv,'AB_E_c042_AB_Z_absZ_','-ascii','-tabs');
AB_E_c042_AB_H_absZ_ = AB_E_c042_.AB_H_absZ_;
fname_tsv = sprintf('%s/dir_mat/AB_E_c042_H_absZ_.tsv',dir_trunk);
save(fname_tsv,'AB_E_c042_AB_H_absZ_','-ascii','-tabs');
end;%if flag_E;
%%%%%%%%;
if flag_I;
AB_I_c042_AB_C_absZ_ = AB_I_c042_.AB_C_absZ_;
fname_tsv = sprintf('%s/dir_mat/AB_I_c042_C_absZ_.tsv',dir_trunk);
save(fname_tsv,'AB_I_c042_AB_C_absZ_','-ascii','-tabs');
AB_I_c042_AB_K_absZ_ = AB_I_c042_.AB_K_absZ_;
fname_tsv = sprintf('%s/dir_mat/AB_I_c042_K_absZ_.tsv',dir_trunk);
save(fname_tsv,'AB_I_c042_AB_K_absZ_','-ascii','-tabs');
AB_I_c042_AB_Z_absZ_ = AB_I_c042_.AB_Z_absZ_;
fname_tsv = sprintf('%s/dir_mat/AB_I_c042_Z_absZ_.tsv',dir_trunk);
save(fname_tsv,'AB_I_c042_AB_Z_absZ_','-ascii','-tabs');
AB_I_c042_AB_H_absZ_ = AB_I_c042_.AB_H_absZ_;
fname_tsv = sprintf('%s/dir_mat/AB_I_c042_H_absZ_.tsv',dir_trunk);
save(fname_tsv,'AB_I_c042_AB_H_absZ_','-ascii','-tabs');
end;%if flag_I;
%%%%%%%%;
if flag_E;
AB_E_c042_AB_C_rawZ_ = AB_E_c042_.AB_C_rawZ_;
fname_tsv = sprintf('%s/dir_mat/AB_E_c042_C_rawZ_.tsv',dir_trunk);
save(fname_tsv,'AB_E_c042_AB_C_rawZ_','-ascii','-tabs');
AB_E_c042_AB_K_rawZ_ = AB_E_c042_.AB_K_rawZ_;
fname_tsv = sprintf('%s/dir_mat/AB_E_c042_K_rawZ_.tsv',dir_trunk);
save(fname_tsv,'AB_E_c042_AB_K_rawZ_','-ascii','-tabs');
AB_E_c042_AB_Z_rawZ_ = AB_E_c042_.AB_Z_rawZ_;
fname_tsv = sprintf('%s/dir_mat/AB_E_c042_Z_rawZ_.tsv',dir_trunk);
save(fname_tsv,'AB_E_c042_AB_Z_rawZ_','-ascii','-tabs');
AB_E_c042_AB_H_rawZ_ = AB_E_c042_.AB_H_rawZ_;
fname_tsv = sprintf('%s/dir_mat/AB_E_c042_H_rawZ_.tsv',dir_trunk);
save(fname_tsv,'AB_E_c042_AB_H_rawZ_','-ascii','-tabs');
end;%if flag_E;
%%%%%%%%;
if flag_I;
AB_I_c042_AB_C_rawZ_ = AB_I_c042_.AB_C_rawZ_;
fname_tsv = sprintf('%s/dir_mat/AB_I_c042_C_rawZ_.tsv',dir_trunk);
save(fname_tsv,'AB_I_c042_AB_C_rawZ_','-ascii','-tabs');
AB_I_c042_AB_K_rawZ_ = AB_I_c042_.AB_K_rawZ_;
fname_tsv = sprintf('%s/dir_mat/AB_I_c042_K_rawZ_.tsv',dir_trunk);
save(fname_tsv,'AB_I_c042_AB_K_rawZ_','-ascii','-tabs');
AB_I_c042_AB_Z_rawZ_ = AB_I_c042_.AB_Z_rawZ_;
fname_tsv = sprintf('%s/dir_mat/AB_I_c042_Z_rawZ_.tsv',dir_trunk);
save(fname_tsv,'AB_I_c042_AB_Z_rawZ_','-ascii','-tabs');
AB_I_c042_AB_H_rawZ_ = AB_I_c042_.AB_H_rawZ_;
fname_tsv = sprintf('%s/dir_mat/AB_I_c042_H_rawZ_.tsv',dir_trunk);
save(fname_tsv,'AB_I_c042_AB_H_rawZ_','-ascii','-tabs');
end;%if flag_I;
%%%%%%%
if flag_I; 
fname_mat = sprintf('%s/dir_mat/AB_I_c042_.AB_X_absZ_.mat',dir_trunk); 
AB_I_c042_n_u = AB_I_c042_.n_u;
AB_I_c042_n_CLabel = AB_I_c042_.n_CLabel;
AB_I_c042_n_CCOV = AB_I_c042_.n_CCOV;
AB_I_c042_n_Z_GENE = AB_I_c042_.n_Z_GENE;
AB_I_c042_CLabel_pair_ = AB_I_c042_.CLabel_pair_;
AB_I_c042_AB_C_absZ_ = AB_I_c042_.AB_C_absZ_;
AB_I_c042_AB_K_absZ_ = AB_I_c042_.AB_K_absZ_;
AB_I_c042_AB_Z_absZ_ = AB_I_c042_.AB_Z_absZ_;
AB_I_c042_AB_H_absZ_ = AB_I_c042_.AB_H_absZ_;
disp(sprintf(' %% writing %s',fname_mat));
%save(fname_mat,'AB_I_c042_n_u','AB_I_c042_n_CLabel','AB_I_c042_n_CCOV','AB_I_c042_n_Z_GENE','AB_I_c042_CLabel_pair_','AB_I_c042_AB_C_absZ_','AB_I_c042_AB_K_absZ_','AB_I_c042_AB_Z_absZ_','AB_I_c042_AB_H_absZ_')
save(fname_mat,'AB_I_c042_n_u','AB_I_c042_n_CLabel','AB_I_c042_n_CCOV','AB_I_c042_n_Z_GENE','AB_I_c042_CLabel_pair_','AB_I_c042_AB_C_absZ_','AB_I_c042_AB_K_absZ_')
fname_tsv = sprintf('%s/dir_mat/AB_I_c042_CLabel_pair_.tsv',dir_trunk);
fp=fopen(fname_tsv,'w');
for ns=1:numel(AB_I_c042_CLabel_pair_);
fprintf(fp,'%s\n',AB_I_c042_CLabel_pair_{ns});
end;%for ns=1:numel(AB_I_c042_CLabel_pair_);
fclose(fp);
end;%if flag_I; 
%%%%%%%%;
if flag_E; 
fname_mat = sprintf('%s/dir_mat/AB_E_c042_.AB_X_absZ_.mat',dir_trunk); 
AB_E_c042_n_u = AB_E_c042_.n_u;
AB_E_c042_n_CLabel = AB_E_c042_.n_CLabel;
AB_E_c042_n_CCOV = AB_E_c042_.n_CCOV;
AB_E_c042_n_Z_GENE = AB_E_c042_.n_Z_GENE;
AB_E_c042_CLabel_pair_ = AB_E_c042_.CLabel_pair_;
AB_E_c042_AB_C_absZ_ = AB_E_c042_.AB_C_absZ_;
AB_E_c042_AB_K_absZ_ = AB_E_c042_.AB_K_absZ_;
AB_E_c042_AB_Z_absZ_ = AB_E_c042_.AB_Z_absZ_;
AB_E_c042_AB_H_absZ_ = AB_E_c042_.AB_H_absZ_;
disp(sprintf(' %% writing %s',fname_mat));
%save(fname_mat,'AB_E_c042_n_u','AB_E_c042_n_CLabel','AB_E_c042_n_CCOV','AB_E_c042_n_Z_GENE','AB_E_c042_CLabel_pair_','AB_E_c042_AB_C_absZ_','AB_E_c042_AB_K_absZ_','AB_E_c042_AB_Z_absZ_','AB_E_c042_AB_H_absZ_')
save(fname_mat,'AB_E_c042_n_u','AB_E_c042_n_CLabel','AB_E_c042_n_CCOV','AB_E_c042_n_Z_GENE','AB_E_c042_CLabel_pair_','AB_E_c042_AB_C_absZ_','AB_E_c042_AB_K_absZ_')
fname_tsv = sprintf('%s/dir_mat/AB_E_c042_CLabel_pair_.tsv',dir_trunk);
fp=fopen(fname_tsv,'w');
for ns=1:numel(AB_E_c042_CLabel_pair_);
fprintf(fp,'%s\n',AB_E_c042_CLabel_pair_{ns});
end;%for ns=1:numel(AB_E_c042_CLabel_pair_);
fclose(fp);
end;%if flag_E; 
%%%%%%%%;
%%%%%%%
if flag_I; 
fname_mat = sprintf('%s/dir_mat/AB_I_c042_.AB_X_rawZ_.mat',dir_trunk); 
AB_I_c042_n_u = AB_I_c042_.n_u;
AB_I_c042_n_CLabel = AB_I_c042_.n_CLabel;
AB_I_c042_n_CCOV = AB_I_c042_.n_CCOV;
AB_I_c042_n_Z_GENE = AB_I_c042_.n_Z_GENE;
AB_I_c042_CLabel_pair_ = AB_I_c042_.CLabel_pair_;
AB_I_c042_AB_C_rawZ_ = AB_I_c042_.AB_C_rawZ_;
AB_I_c042_AB_K_rawZ_ = AB_I_c042_.AB_K_rawZ_;
AB_I_c042_AB_Z_rawZ_ = AB_I_c042_.AB_Z_rawZ_;
AB_I_c042_AB_H_rawZ_ = AB_I_c042_.AB_H_rawZ_;
disp(sprintf(' %% writing %s',fname_mat));
%save(fname_mat,'AB_I_c042_n_u','AB_I_c042_n_CLabel','AB_I_c042_n_CCOV','AB_I_c042_n_Z_GENE','AB_I_c042_CLabel_pair_','AB_I_c042_AB_C_rawZ_','AB_I_c042_AB_K_rawZ_','AB_I_c042_AB_Z_rawZ_','AB_I_c042_AB_H_rawZ_')
save(fname_mat,'AB_I_c042_n_u','AB_I_c042_n_CLabel','AB_I_c042_n_CCOV','AB_I_c042_n_Z_GENE','AB_I_c042_CLabel_pair_','AB_I_c042_AB_C_rawZ_','AB_I_c042_AB_K_rawZ_')
end;%if flag_I; 
%%%%%%%%;
if flag_E; 
fname_mat = sprintf('%s/dir_mat/AB_E_c042_.AB_X_rawZ_.mat',dir_trunk); 
AB_E_c042_n_u = AB_E_c042_.n_u;
AB_E_c042_n_CLabel = AB_E_c042_.n_CLabel;
AB_E_c042_n_CCOV = AB_E_c042_.n_CCOV;
AB_E_c042_n_Z_GENE = AB_E_c042_.n_Z_GENE;
AB_E_c042_CLabel_pair_ = AB_E_c042_.CLabel_pair_;
AB_E_c042_AB_C_rawZ_ = AB_E_c042_.AB_C_rawZ_;
AB_E_c042_AB_K_rawZ_ = AB_E_c042_.AB_K_rawZ_;
AB_E_c042_AB_Z_rawZ_ = AB_E_c042_.AB_Z_rawZ_;
AB_E_c042_AB_H_rawZ_ = AB_E_c042_.AB_H_rawZ_;
disp(sprintf(' %% writing %s',fname_mat));
%save(fname_mat,'AB_E_c042_n_u','AB_E_c042_n_CLabel','AB_E_c042_n_CCOV','AB_E_c042_n_Z_GENE','AB_E_c042_CLabel_pair_','AB_E_c042_AB_C_rawZ_','AB_E_c042_AB_K_rawZ_','AB_E_c042_AB_Z_rawZ_','AB_E_c042_AB_H_rawZ_')
save(fname_mat,'AB_E_c042_n_u','AB_E_c042_n_CLabel','AB_E_c042_n_CCOV','AB_E_c042_n_Z_GENE','AB_E_c042_CLabel_pair_','AB_E_c042_AB_C_rawZ_','AB_E_c042_AB_K_rawZ_')
end;%if flag_E; 
%%%%%%%%;

%%%%%%%%;
fprintf(fp_readme,'C_rank_c127_.tsv: tab delimited array of samples (rows) by covariate ranks (columns).\n');
fprintf(fp_readme,'E_limp_c127_zeta_un_.tsv and E_limp_c127_zeta_vn_.tsv: tab delimited arrays of coefficients. The outer-product [E_limp_c127_zeta_] := [E_limp_c127_zeta_un_]*[E_limp_c127_zeta_vn_] is a coefficient matrix for the linear model [Exon-Gene-Limp] = [1 , Covariate-Rank]*[E_limp_c127_zeta_]. The ''1'' in the previous expression refers to a vector of all ones (i.e., the constant term in the linear model).\n');
fprintf(fp_readme,'E_limp_c127_beta_un_.tsv and E_limp_c127_beta_vn_.tsv: tab delimited arrays of coefficients. The outer-product [E_limp_c127_beta_] := [E_limp_c127_beta_un_]*[E_limp_c127_beta_vn_] is a coefficient matrix for the linear model [Covariate-Rank] = [1 , Exon-Gene-Limp]*[E_limp_c127_beta_]. The ''1'' in the previous expression refers to a vector of all ones (i.e., the constant term in the linear model).\n');
fprintf(fp_readme,'I_limp_c127_zeta_un_.tsv and I_limp_c127_zeta_vn_.tsv: tab delimited arrays of coefficients. The outer-product [I_limp_c127_zeta_] := [I_limp_c127_zeta_un_]*[I_limp_c127_zeta_vn_] is a coefficient matrix for the linear model [Intron-Gene-Limp] = [1 , Covariate-Rank]*[I_limp_c127_zeta_]. The ''1'' in the previous expression refers to a vector of all ones (i.e., the constant term in the linear model).\n');
fprintf(fp_readme,'I_limp_c127_beta_un_.tsv and I_limp_c127_beta_vn_.tsv: tab delimited arrays of coefficients. The outer-product [I_limp_c127_beta_] := [I_limp_c127_beta_un_]*[I_limp_c127_beta_vn_] is a coefficient matrix for the linear model [Covariate-Rank] = [1 , Intron-Gene-Limp]*[I_limp_c127_beta_]. The ''1'' in the previous expression refers to a vector of all ones (i.e., the constant term in the linear model).\n');
fprintf(fp_readme,'E_licl_c127_zeta_un_.tsv and E_licl_c127_zeta_vn_.tsv: tab delimited arrays of coefficients. The outer-product [E_licl_c127_zeta_] := [E_licl_c127_zeta_un_]*[E_licl_c127_zeta_vn_] is a coefficient matrix for the linear model [Exon-Gene-Licl] = [1 , Covariate-Rank]*[E_licl_c127_zeta_]. The ''1'' in the previous expression refers to a vector of all ones (i.e., the constant term in the linear model).\n');
fprintf(fp_readme,'E_licl_c127_beta_un_.tsv and E_licl_c127_beta_vn_.tsv: tab delimited arrays of coefficients. The outer-product [E_licl_c127_beta_] := [E_licl_c127_beta_un_]*[E_licl_c127_beta_vn_] is a coefficient matrix for the linear model [Covariate-Rank] = [1 , Exon-Gene-Licl]*[E_licl_c127_beta_]. The ''1'' in the previous expression refers to a vector of all ones (i.e., the constant term in the linear model).\n');
fprintf(fp_readme,'I_licl_c127_zeta_un_.tsv and I_licl_c127_zeta_vn_.tsv: tab delimited arrays of coefficients. The outer-product [I_licl_c127_zeta_] := [I_licl_c127_zeta_un_]*[I_licl_c127_zeta_vn_] is a coefficient matrix for the linear model [Intron-Gene-Licl] = [1 , Covariate-Rank]*[I_licl_c127_zeta_]. The ''1'' in the previous expression refers to a vector of all ones (i.e., the constant term in the linear model).\n');
fprintf(fp_readme,'I_licl_c127_beta_un_.tsv and I_licl_c127_beta_vn_.tsv: tab delimited arrays of coefficients. The outer-product [I_licl_c127_beta_] := [I_licl_c127_beta_un_]*[I_licl_c127_beta_vn_] is a coefficient matrix for the linear model [Covariate-Rank] = [1 , Intron-Gene-Licl]*[I_licl_c127_beta_]. The ''1'' in the previous expression refers to a vector of all ones (i.e., the constant term in the linear model).\n');
fprintf(fp_readme,'E_licr_c127_zeta_un_.tsv and E_licr_c127_zeta_vn_.tsv: tab delimited arrays of coefficients. The outer-product [E_licr_c127_zeta_] := [E_licr_c127_zeta_un_]*[E_licr_c127_zeta_vn_] is a coefficient matrix for the linear model [Exon-Gene-Licr] = [1 , Covariate-Rank]*[E_licr_c127_zeta_]. The ''1'' in the previous expression refers to a vector of all ones (i.e., the constant term in the linear model).\n');
fprintf(fp_readme,'E_licr_c127_beta_un_.tsv and E_licr_c127_beta_vn_.tsv: tab delimited arrays of coefficients. The outer-product [E_licr_c127_beta_] := [E_licr_c127_beta_un_]*[E_licr_c127_beta_vn_] is a coefficient matrix for the linear model [Covariate-Rank] = [1 , Exon-Gene-Licr]*[E_licr_c127_beta_]. The ''1'' in the previous expression refers to a vector of all ones (i.e., the constant term in the linear model).\n');
fprintf(fp_readme,'I_licr_c127_zeta_un_.tsv and I_licr_c127_zeta_vn_.tsv: tab delimited arrays of coefficients. The outer-product [I_licr_c127_zeta_] := [I_licr_c127_zeta_un_]*[I_licr_c127_zeta_vn_] is a coefficient matrix for the linear model [Intron-Gene-Licr] = [1 , Covariate-Rank]*[I_licr_c127_zeta_]. The ''1'' in the previous expression refers to a vector of all ones (i.e., the constant term in the linear model).\n');
fprintf(fp_readme,'I_licr_c127_beta_un_.tsv and I_licr_c127_beta_vn_.tsv: tab delimited arrays of coefficients. The outer-product [I_licr_c127_beta_] := [I_licr_c127_beta_un_]*[I_licr_c127_beta_vn_] is a coefficient matrix for the linear model [Covariate-Rank] = [1 , Intron-Gene-Licr]*[I_licr_c127_beta_]. The ''1'' in the previous expression refers to a vector of all ones (i.e., the constant term in the linear model).\n');
fprintf(fp_readme,'E_c127_CLabel_pair_.nsv: newline delimited list of cluster-pairs for use with AB_E_c127_C_absZ_.tsv, etc.\n');
fprintf(fp_readme,'I_c127_CLabel_pair_.nsv: newline delimited list of cluster-pairs for use with AB_I_c127_C_absZ_.tsv, etc.. Should be identical to E_c127_CLabel_pair_.nsv.\n');
fprintf(fp_readme,'AB_E_c127_C_absZ_.tsv: tab delimited array of cluster-pairs (rows) by covariate (columns). Each array entry indicates the absolute-value of the z-score associated with the (raw) differential-expression of that particular covariate-rank over that cluster pair.\n');
fprintf(fp_readme,'AB_E_c127_K_absZ_.tsv: tab delimited array of cluster-pairs (rows) by covariate (columns). Each array entry indicates the absolute-value of the z-score associated with the (relative) differential-expression of that particular covariate-rank over that cluster pair. In this context ''relative'' means corrected for the linear effect of the E gene-ranks.\n');
fprintf(fp_readme,'AB_E_c127_Z_absZ_.tsv: tab delimited array of cluster-pairs (rows) by exon genes (columns). Each array entry indicates the absolute-value of the z-score associated with the (raw) differential-expression of that particular gene-rank over that cluster pair.\n');
fprintf(fp_readme,'AB_E_c127_H_absZ_.tsv: tab delimited array of cluster-pairs (rows) by exon genes (columns). Each array entry indicates the absolute-value of the z-score associated with the (relative) differential-expression of that particular gene-rank over that cluster pair. In this context ''relative'' means corrected for the linear effect of the covariate-rank.\n');
fprintf(fp_readme,'AB_I_c127_C_absZ_.tsv: tab delimited array of cluster-pairs (rows) by covariate (columns). Each array entry indicates the absolute-value of the z-score associated with the (raw) differential-expression of that particular covariate-rank over that cluster pair.\n');
fprintf(fp_readme,'AB_I_c127_K_absZ_.tsv: tab delimited array of cluster-pairs (rows) by covariate (columns). Each array entry indicates the absolute-value of the z-score associated with the (relative) differential-expression of that particular covariate-rank over that cluster pair. In this context ''relative'' means corrected for the linear effect of the I gene-ranks.\n');
fprintf(fp_readme,'AB_I_c127_Z_absZ_.tsv: tab delimited array of cluster-pairs (rows) by intron genes (columns). Each array entry indicates the absolute-value of the z-score associated with the (raw) differential-expression of that particular gene-rank over that cluster pair.\n');
fprintf(fp_readme,'AB_I_c127_H_absZ_.tsv: tab delimited array of cluster-pairs (rows) by intron genes (columns). Each array entry indicates the absolute-value of the z-score associated with the (relative) differential-expression of that particular gene-rank over that cluster pair. In this context ''relative'' means corrected for the linear effect of the covariate-rank.\n');
fprintf(fp_readme,'AB_E_c127_C_rawZ_.tsv: tab delimited array of cluster-pairs (rows) by covariate (columns). Each array entry indicates the raw z-score associated with the (raw) differential-expression of that particular covariate-rank over that cluster pair.\n');
fprintf(fp_readme,'AB_E_c127_K_rawZ_.tsv: tab delimited array of cluster-pairs (rows) by covariate (columns). Each array entry indicates the raw z-score associated with the (relative) differential-expression of that particular covariate-rank over that cluster pair. In this context ''relative'' means corrected for the linear effect of the E gene-ranks.\n');
fprintf(fp_readme,'AB_E_c127_Z_rawZ_.tsv: tab delimited array of cluster-pairs (rows) by exon genes (columns). Each array entry indicates the raw z-score associated with the (raw) differential-expression of that particular gene-rank over that cluster pair.\n');
fprintf(fp_readme,'AB_E_c127_H_rawZ_.tsv: tab delimited array of cluster-pairs (rows) by exon genes (columns). Each array entry indicates the raw z-score associated with the (relative) differential-expression of that particular gene-rank over that cluster pair. In this context ''relative'' means corrected for the linear effect of the covariate-rank.\n');
fprintf(fp_readme,'AB_I_c127_C_rawZ_.tsv: tab delimited array of cluster-pairs (rows) by covariate (columns). Each array entry indicates the raw z-score associated with the (raw) differential-expression of that particular covariate-rank over that cluster pair.\n');
fprintf(fp_readme,'AB_I_c127_K_rawZ_.tsv: tab delimited array of cluster-pairs (rows) by covariate (columns). Each array entry indicates the raw z-score associated with the (relative) differential-expression of that particular covariate-rank over that cluster pair. In this context ''relative'' means corrected for the linear effect of the I gene-ranks.\n');
fprintf(fp_readme,'AB_I_c127_Z_rawZ_.tsv: tab delimited array of cluster-pairs (rows) by intron genes (columns). Each array entry indicates the raw z-score associated with the (raw) differential-expression of that particular gene-rank over that cluster pair.\n');
fprintf(fp_readme,'AB_I_c127_H_rawZ_.tsv: tab delimited array of cluster-pairs (rows) by intron genes (columns). Each array entry indicates the raw z-score associated with the (relative) differential-expression of that particular gene-rank over that cluster pair. In this context ''relative'' means corrected for the linear effect of the covariate-rank.\n');
%%%%%%%%;
tmp_ = C_rank_c127_;
fname_tsv = sprintf('%s/dir_mat/C_rank_c127_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
%%%%%%%%;
if flag_E;
tmp_ = E_limp_c127_zeta_un_(:,1:n_E_limp_c127_zeta);
fname_tsv = sprintf('%s/dir_mat/E_limp_c127_zeta_un_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = E_limp_c127_zeta_vn_(:,1:n_E_limp_c127_zeta);
fname_tsv = sprintf('%s/dir_mat/E_limp_c127_zeta_vn_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = E_limp_c127_beta_un_(:,1:n_E_limp_c127_beta);
fname_tsv = sprintf('%s/dir_mat/E_limp_c127_beta_un_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = E_limp_c127_beta_vn_(:,1:n_E_limp_c127_beta);
fname_tsv = sprintf('%s/dir_mat/E_limp_c127_beta_vn_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
end;%if flag_E;
%%%%%%%%;
if flag_I;
tmp_ = I_limp_c127_zeta_un_(:,1:n_I_limp_c127_zeta);
fname_tsv = sprintf('%s/dir_mat/I_limp_c127_zeta_un_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = I_limp_c127_zeta_vn_(:,1:n_I_limp_c127_zeta);
fname_tsv = sprintf('%s/dir_mat/I_limp_c127_zeta_vn_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = I_limp_c127_beta_un_(:,1:n_I_limp_c127_beta);
fname_tsv = sprintf('%s/dir_mat/I_limp_c127_beta_un_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = I_limp_c127_beta_vn_(:,1:n_I_limp_c127_beta);
fname_tsv = sprintf('%s/dir_mat/I_limp_c127_beta_vn_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
end;%if flag_I;
%%%%%%%%;
if flag_E;
tmp_ = E_licl_c127_zeta_un_(:,1:n_E_licl_c127_zeta);
fname_tsv = sprintf('%s/dir_mat/E_licl_c127_zeta_un_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = E_licl_c127_zeta_vn_(:,1:n_E_licl_c127_zeta);
fname_tsv = sprintf('%s/dir_mat/E_licl_c127_zeta_vn_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = E_licl_c127_beta_un_(:,1:n_E_licl_c127_beta);
fname_tsv = sprintf('%s/dir_mat/E_licl_c127_beta_un_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = E_licl_c127_beta_vn_(:,1:n_E_licl_c127_beta);
fname_tsv = sprintf('%s/dir_mat/E_licl_c127_beta_vn_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
end;%if flag_E;
%%%%%%%%;
if flag_I;
tmp_ = I_licl_c127_zeta_un_(:,1:n_I_licl_c127_zeta);
fname_tsv = sprintf('%s/dir_mat/I_licl_c127_zeta_un_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = I_licl_c127_zeta_vn_(:,1:n_I_licl_c127_zeta);
fname_tsv = sprintf('%s/dir_mat/I_licl_c127_zeta_vn_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = I_licl_c127_beta_un_(:,1:n_I_licl_c127_beta);
fname_tsv = sprintf('%s/dir_mat/I_licl_c127_beta_un_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = I_licl_c127_beta_vn_(:,1:n_I_licl_c127_beta);
fname_tsv = sprintf('%s/dir_mat/I_licl_c127_beta_vn_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
end;%if flag_I;
%%%%%%%%;
if flag_E;
tmp_ = E_licr_c127_zeta_un_(:,1:n_E_licr_c127_zeta);
fname_tsv = sprintf('%s/dir_mat/E_licr_c127_zeta_un_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = E_licr_c127_zeta_vn_(:,1:n_E_licr_c127_zeta);
fname_tsv = sprintf('%s/dir_mat/E_licr_c127_zeta_vn_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = E_licr_c127_beta_un_(:,1:n_E_licr_c127_beta);
fname_tsv = sprintf('%s/dir_mat/E_licr_c127_beta_un_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = E_licr_c127_beta_vn_(:,1:n_E_licr_c127_beta);
fname_tsv = sprintf('%s/dir_mat/E_licr_c127_beta_vn_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
end;%if flag_E;
%%%%%%%%;
if flag_I;
tmp_ = I_licr_c127_zeta_un_(:,1:n_I_licr_c127_zeta);
fname_tsv = sprintf('%s/dir_mat/I_licr_c127_zeta_un_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = I_licr_c127_zeta_vn_(:,1:n_I_licr_c127_zeta);
fname_tsv = sprintf('%s/dir_mat/I_licr_c127_zeta_vn_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = I_licr_c127_beta_un_(:,1:n_I_licr_c127_beta);
fname_tsv = sprintf('%s/dir_mat/I_licr_c127_beta_un_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
tmp_ = I_licr_c127_beta_vn_(:,1:n_I_licr_c127_beta);
fname_tsv = sprintf('%s/dir_mat/I_licr_c127_beta_vn_.tsv',dir_trunk);
save(fname_tsv,'tmp_','-ascii','-tabs');
end;%if flag_I;
%%%%%%%%;
if flag_E;
AB_E_c127_AB_C_absZ_ = AB_E_c127_.AB_C_absZ_;
fname_tsv = sprintf('%s/dir_mat/AB_E_c127_C_absZ_.tsv',dir_trunk);
save(fname_tsv,'AB_E_c127_AB_C_absZ_','-ascii','-tabs');
AB_E_c127_AB_K_absZ_ = AB_E_c127_.AB_K_absZ_;
fname_tsv = sprintf('%s/dir_mat/AB_E_c127_K_absZ_.tsv',dir_trunk);
save(fname_tsv,'AB_E_c127_AB_K_absZ_','-ascii','-tabs');
AB_E_c127_AB_Z_absZ_ = AB_E_c127_.AB_Z_absZ_;
fname_tsv = sprintf('%s/dir_mat/AB_E_c127_Z_absZ_.tsv',dir_trunk);
save(fname_tsv,'AB_E_c127_AB_Z_absZ_','-ascii','-tabs');
AB_E_c127_AB_H_absZ_ = AB_E_c127_.AB_H_absZ_;
fname_tsv = sprintf('%s/dir_mat/AB_E_c127_H_absZ_.tsv',dir_trunk);
save(fname_tsv,'AB_E_c127_AB_H_absZ_','-ascii','-tabs');
end;%if flag_E;
%%%%%%%%;
if flag_I;
AB_I_c127_AB_C_absZ_ = AB_I_c127_.AB_C_absZ_;
fname_tsv = sprintf('%s/dir_mat/AB_I_c127_C_absZ_.tsv',dir_trunk);
save(fname_tsv,'AB_I_c127_AB_C_absZ_','-ascii','-tabs');
AB_I_c127_AB_K_absZ_ = AB_I_c127_.AB_K_absZ_;
fname_tsv = sprintf('%s/dir_mat/AB_I_c127_K_absZ_.tsv',dir_trunk);
save(fname_tsv,'AB_I_c127_AB_K_absZ_','-ascii','-tabs');
AB_I_c127_AB_Z_absZ_ = AB_I_c127_.AB_Z_absZ_;
fname_tsv = sprintf('%s/dir_mat/AB_I_c127_Z_absZ_.tsv',dir_trunk);
save(fname_tsv,'AB_I_c127_AB_Z_absZ_','-ascii','-tabs');
AB_I_c127_AB_H_absZ_ = AB_I_c127_.AB_H_absZ_;
fname_tsv = sprintf('%s/dir_mat/AB_I_c127_H_absZ_.tsv',dir_trunk);
save(fname_tsv,'AB_I_c127_AB_H_absZ_','-ascii','-tabs');
end;%if flag_I;
%%%%%%%%;
if flag_E;
AB_E_c127_AB_C_rawZ_ = AB_E_c127_.AB_C_rawZ_;
fname_tsv = sprintf('%s/dir_mat/AB_E_c127_C_rawZ_.tsv',dir_trunk);
save(fname_tsv,'AB_E_c127_AB_C_rawZ_','-ascii','-tabs');
AB_E_c127_AB_K_rawZ_ = AB_E_c127_.AB_K_rawZ_;
fname_tsv = sprintf('%s/dir_mat/AB_E_c127_K_rawZ_.tsv',dir_trunk);
save(fname_tsv,'AB_E_c127_AB_K_rawZ_','-ascii','-tabs');
AB_E_c127_AB_Z_rawZ_ = AB_E_c127_.AB_Z_rawZ_;
fname_tsv = sprintf('%s/dir_mat/AB_E_c127_Z_rawZ_.tsv',dir_trunk);
save(fname_tsv,'AB_E_c127_AB_Z_rawZ_','-ascii','-tabs');
AB_E_c127_AB_H_rawZ_ = AB_E_c127_.AB_H_rawZ_;
fname_tsv = sprintf('%s/dir_mat/AB_E_c127_H_rawZ_.tsv',dir_trunk);
save(fname_tsv,'AB_E_c127_AB_H_rawZ_','-ascii','-tabs');
end;%if flag_E;
%%%%%%%%;
if flag_I;
AB_I_c127_AB_C_rawZ_ = AB_I_c127_.AB_C_rawZ_;
fname_tsv = sprintf('%s/dir_mat/AB_I_c127_C_rawZ_.tsv',dir_trunk);
save(fname_tsv,'AB_I_c127_AB_C_rawZ_','-ascii','-tabs');
AB_I_c127_AB_K_rawZ_ = AB_I_c127_.AB_K_rawZ_;
fname_tsv = sprintf('%s/dir_mat/AB_I_c127_K_rawZ_.tsv',dir_trunk);
save(fname_tsv,'AB_I_c127_AB_K_rawZ_','-ascii','-tabs');
AB_I_c127_AB_Z_rawZ_ = AB_I_c127_.AB_Z_rawZ_;
fname_tsv = sprintf('%s/dir_mat/AB_I_c127_Z_rawZ_.tsv',dir_trunk);
save(fname_tsv,'AB_I_c127_AB_Z_rawZ_','-ascii','-tabs');
AB_I_c127_AB_H_rawZ_ = AB_I_c127_.AB_H_rawZ_;
fname_tsv = sprintf('%s/dir_mat/AB_I_c127_H_rawZ_.tsv',dir_trunk);
save(fname_tsv,'AB_I_c127_AB_H_rawZ_','-ascii','-tabs');
end;%if flag_I;
%%%%%%%
if flag_I; 
fname_mat = sprintf('%s/dir_mat/AB_I_c127_.AB_X_absZ_.mat',dir_trunk); 
AB_I_c127_n_u = AB_I_c127_.n_u;
AB_I_c127_n_CLabel = AB_I_c127_.n_CLabel;
AB_I_c127_n_CCOV = AB_I_c127_.n_CCOV;
AB_I_c127_n_Z_GENE = AB_I_c127_.n_Z_GENE;
AB_I_c127_CLabel_pair_ = AB_I_c127_.CLabel_pair_;
AB_I_c127_AB_C_absZ_ = AB_I_c127_.AB_C_absZ_;
AB_I_c127_AB_K_absZ_ = AB_I_c127_.AB_K_absZ_;
AB_I_c127_AB_Z_absZ_ = AB_I_c127_.AB_Z_absZ_;
AB_I_c127_AB_H_absZ_ = AB_I_c127_.AB_H_absZ_;
disp(sprintf(' %% writing %s',fname_mat));
%save(fname_mat,'AB_I_c127_n_u','AB_I_c127_n_CLabel','AB_I_c127_n_CCOV','AB_I_c127_n_Z_GENE','AB_I_c127_CLabel_pair_','AB_I_c127_AB_C_absZ_','AB_I_c127_AB_K_absZ_','AB_I_c127_AB_Z_absZ_','AB_I_c127_AB_H_absZ_')
save(fname_mat,'AB_I_c127_n_u','AB_I_c127_n_CLabel','AB_I_c127_n_CCOV','AB_I_c127_n_Z_GENE','AB_I_c127_CLabel_pair_','AB_I_c127_AB_C_absZ_','AB_I_c127_AB_K_absZ_')
fname_tsv = sprintf('%s/dir_mat/AB_I_c127_CLabel_pair_.tsv',dir_trunk);
fp=fopen(fname_tsv,'w');
for ns=1:numel(AB_I_c127_CLabel_pair_);
fprintf(fp,'%s\n',AB_I_c127_CLabel_pair_{ns});
end;%for ns=1:numel(AB_I_c127_CLabel_pair_);
fclose(fp);
end;%if flag_I; 
%%%%%%%%;
if flag_E; 
fname_mat = sprintf('%s/dir_mat/AB_E_c127_.AB_X_absZ_.mat',dir_trunk); 
AB_E_c127_n_u = AB_E_c127_.n_u;
AB_E_c127_n_CLabel = AB_E_c127_.n_CLabel;
AB_E_c127_n_CCOV = AB_E_c127_.n_CCOV;
AB_E_c127_n_Z_GENE = AB_E_c127_.n_Z_GENE;
AB_E_c127_CLabel_pair_ = AB_E_c127_.CLabel_pair_;
AB_E_c127_AB_C_absZ_ = AB_E_c127_.AB_C_absZ_;
AB_E_c127_AB_K_absZ_ = AB_E_c127_.AB_K_absZ_;
AB_E_c127_AB_Z_absZ_ = AB_E_c127_.AB_Z_absZ_;
AB_E_c127_AB_H_absZ_ = AB_E_c127_.AB_H_absZ_;
disp(sprintf(' %% writing %s',fname_mat));
%save(fname_mat,'AB_E_c127_n_u','AB_E_c127_n_CLabel','AB_E_c127_n_CCOV','AB_E_c127_n_Z_GENE','AB_E_c127_CLabel_pair_','AB_E_c127_AB_C_absZ_','AB_E_c127_AB_K_absZ_','AB_E_c127_AB_Z_absZ_','AB_E_c127_AB_H_absZ_')
save(fname_mat,'AB_E_c127_n_u','AB_E_c127_n_CLabel','AB_E_c127_n_CCOV','AB_E_c127_n_Z_GENE','AB_E_c127_CLabel_pair_','AB_E_c127_AB_C_absZ_','AB_E_c127_AB_K_absZ_')
fname_tsv = sprintf('%s/dir_mat/AB_E_c127_CLabel_pair_.tsv',dir_trunk);
fp=fopen(fname_tsv,'w');
for ns=1:numel(AB_E_c127_CLabel_pair_);
fprintf(fp,'%s\n',AB_E_c127_CLabel_pair_{ns});
end;%for ns=1:numel(AB_E_c127_CLabel_pair_);
fclose(fp);
end;%if flag_E; 
%%%%%%%%;
%%%%%%%
if flag_I; 
fname_mat = sprintf('%s/dir_mat/AB_I_c127_.AB_X_rawZ_.mat',dir_trunk); 
AB_I_c127_n_u = AB_I_c127_.n_u;
AB_I_c127_n_CLabel = AB_I_c127_.n_CLabel;
AB_I_c127_n_CCOV = AB_I_c127_.n_CCOV;
AB_I_c127_n_Z_GENE = AB_I_c127_.n_Z_GENE;
AB_I_c127_CLabel_pair_ = AB_I_c127_.CLabel_pair_;
AB_I_c127_AB_C_rawZ_ = AB_I_c127_.AB_C_rawZ_;
AB_I_c127_AB_K_rawZ_ = AB_I_c127_.AB_K_rawZ_;
AB_I_c127_AB_Z_rawZ_ = AB_I_c127_.AB_Z_rawZ_;
AB_I_c127_AB_H_rawZ_ = AB_I_c127_.AB_H_rawZ_;
disp(sprintf(' %% writing %s',fname_mat));
%save(fname_mat,'AB_I_c127_n_u','AB_I_c127_n_CLabel','AB_I_c127_n_CCOV','AB_I_c127_n_Z_GENE','AB_I_c127_CLabel_pair_','AB_I_c127_AB_C_rawZ_','AB_I_c127_AB_K_rawZ_','AB_I_c127_AB_Z_rawZ_','AB_I_c127_AB_H_rawZ_')
save(fname_mat,'AB_I_c127_n_u','AB_I_c127_n_CLabel','AB_I_c127_n_CCOV','AB_I_c127_n_Z_GENE','AB_I_c127_CLabel_pair_','AB_I_c127_AB_C_rawZ_','AB_I_c127_AB_K_rawZ_')
end;%if flag_I; 
%%%%%%%%;
if flag_E; 
fname_mat = sprintf('%s/dir_mat/AB_E_c127_.AB_X_rawZ_.mat',dir_trunk); 
AB_E_c127_n_u = AB_E_c127_.n_u;
AB_E_c127_n_CLabel = AB_E_c127_.n_CLabel;
AB_E_c127_n_CCOV = AB_E_c127_.n_CCOV;
AB_E_c127_n_Z_GENE = AB_E_c127_.n_Z_GENE;
AB_E_c127_CLabel_pair_ = AB_E_c127_.CLabel_pair_;
AB_E_c127_AB_C_rawZ_ = AB_E_c127_.AB_C_rawZ_;
AB_E_c127_AB_K_rawZ_ = AB_E_c127_.AB_K_rawZ_;
AB_E_c127_AB_Z_rawZ_ = AB_E_c127_.AB_Z_rawZ_;
AB_E_c127_AB_H_rawZ_ = AB_E_c127_.AB_H_rawZ_;
disp(sprintf(' %% writing %s',fname_mat));
%save(fname_mat,'AB_E_c127_n_u','AB_E_c127_n_CLabel','AB_E_c127_n_CCOV','AB_E_c127_n_Z_GENE','AB_E_c127_CLabel_pair_','AB_E_c127_AB_C_rawZ_','AB_E_c127_AB_K_rawZ_','AB_E_c127_AB_Z_rawZ_','AB_E_c127_AB_H_rawZ_')
save(fname_mat,'AB_E_c127_n_u','AB_E_c127_n_CLabel','AB_E_c127_n_CCOV','AB_E_c127_n_Z_GENE','AB_E_c127_CLabel_pair_','AB_E_c127_AB_C_rawZ_','AB_E_c127_AB_K_rawZ_')
end;%if flag_E; 
%%%%%%%%;

fclose(fp_readme);

disp('returning');return;



