% testing a loader for table data ;
clear;
setup;
dir_trunk = sprintf('/data/rangan/dir_bcc/dir_jamison');
dir_data = sprintf('%s/data_summary_20190730',dir_trunk);
flag_load=0;
if flag_load;
str_table_name = sprintf('%s/20161026_covariate_table.format.txt',dir_data);
disp(sprintf(' %% reading %s',str_table_name));
C_ = readtable(str_table_name);
disp(sprintf(' %% saving %s',str_table_name));
save(sprintf('%s/20161026_covariate_table.format.mat',dir_data),'C_');
str_table_name = sprintf('%s/EXON.Gx_50421.Cx_50.brain_table_merge_output.CPM.NotCtrl.NotEmpty.txt',dir_data);
disp(sprintf(' %% reading %s',str_table_name));
E_ = readtable(str_table_name);
disp(sprintf(' %% writing %s',str_table_name));
save(sprintf('%s/EXON.Gx_50421.Cx_50.brain_table_merge_output.CPM.NotCtrl.NotEmpty.mat',dir_data),'E_');
str_table_name = sprintf('%s/INTRON_INTERGENIC.Gx_25998.Cx_50.brain_table_merge_output.CPM.NotCtrl.NotEmpty.txt',dir_data);
disp(sprintf(' %% reading %s',str_table_name));
I_ = readtable(str_table_name);
disp(sprintf(' %% writing %s',str_table_name));
save(sprintf('%s/INTRON_INTERGENIC.Gx_25998.Cx_50.brain_table_merge_output.CPM.NotCtrl.NotEmpty.mat',dir_data),'I_');
end;%if flag_load;
load(sprintf('%s/EXON.Gx_50421.Cx_50.brain_table_merge_output.CPM.NotCtrl.NotEmpty.mat',dir_data),'E_');
load(sprintf('%s/INTRON_INTERGENIC.Gx_25998.Cx_50.brain_table_merge_output.CPM.NotCtrl.NotEmpty.mat',dir_data),'I_');
load(sprintf('%s/20161026_covariate_table.format.mat',dir_data),'C_');

Label_ID_ = unique(C_.Cluster_ID_20161007);
n_Label_ID = length(Label_ID_);
n_Label_ID_ = zeros(n_Label_ID,1);
for nLabel_ID = 1:n_Label_ID;
n_Label_ID_(nLabel_ID) = length(find(strcmp(C_.Cluster_ID_20161007,Label_ID_(nLabel_ID))));
end;%for nLabel_ID = 1:n_Label_ID;
flag_plot=1;
if flag_plot;
bar(1:n_Label_ID,n_Label_ID_);
set(gca,'XTick',1:n_Label_ID,'XTickLabel',Label_ID_); xtickangle(90);
xlabel('cluster label');
ylabel('number');
title('histogram of cluster label counts');
set(gcf,'Position',1+[0,0,1024*2,1024]);
fname_base = sprintf('%s/dir_jpg/label_count_C',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
end;%if flag_plot;

C_ID_ = C_{:,1}; 
%%%%%%%%;
E_ID_ = E_{:,1};
[~,~,C_to_E_ID_] = intersect(E_ID_,C_ID_,'stable');
C_by_E_xref_ = sparse(C_to_E_ID_,1:length(E_ID_),1,length(C_ID_),length(E_ID_));
E_by_C_xref_ = sparse(1:length(E_ID_),C_to_E_ID_,1,length(E_ID_),length(C_ID_));
flag_time=0;
if flag_time;
n_i = 1024;
% find 2 is much faster than find 1;
tic; for ni=1:n_i; find(C_by_E_xref_(:,max(1,min(length(E_ID_),floor(length(E_ID_)*rand()))))); end;%for ni=1:n_i; 
disp(sprintf(' %% C_by_E_xref_ find 2: %f',toc));
tic; for ni=1:n_i; find(C_by_E_xref_(max(1,min(length(C_ID_),floor(length(C_ID_)*rand()))),:)); end;%for ni=1:n_i; 
disp(sprintf(' %% C_by_E_xref_ find 1: %f',toc));
tic; for ni=1:n_i; find(E_by_C_xref_(:,max(1,min(length(C_ID_),floor(length(C_ID_)*rand()))))); end;%for ni=1:n_i; 
disp(sprintf(' %% E_by_C_xref_ find 2: %f',toc));
tic; for ni=1:n_i; find(E_by_C_xref_(max(1,min(length(E_ID_),floor(length(E_ID_)*rand()))),:)); end;%for ni=1:n_i; 
disp(sprintf(' %% E_by_C_xref_ find 1: %f',toc));
end;%if flag_time;
E_to_C_ID_ = zeros(length(E_ID_),1);
for nE_ID=1:length(E_ID_);
E_to_C_ID_(nE_ID) = find(C_by_E_xref_(:,nE_ID));
end;%for nE_ID=1:length(E_ID_);
flag_test = 0;
if flag_test;
disp(sprintf(' %% testing E_to_C_ID_'));
n_i = 1024;
for ni=1:n_i;
nE_ID = max(1,min(length(E_ID_),floor(length(E_ID_)*rand())));
nC_ID = E_to_C_ID_(nE_ID);
assert(strcmp(C_ID_(nC_ID),E_ID_(nE_ID)));
end;%for ni=1:n_i;
disp(sprintf(' %% finished testing E_to_C_ID_'));
end;%if flag_test;
%%%%%%%%;
I_ID_ = I_{:,1};
[~,~,C_to_I_ID_] = intersect(I_ID_,C_ID_,'stable');
C_by_I_xref_ = sparse(C_to_I_ID_,1:length(I_ID_),1,length(C_ID_),length(I_ID_));
I_by_C_xref_ = sparse(1:length(I_ID_),C_to_I_ID_,1,length(I_ID_),length(C_ID_));
flag_time=0;
if flag_time;
n_i = 1024;
% find 2 is much faster than find 1;
tic; for ni=1:n_i; find(C_by_I_xref_(:,max(1,min(length(I_ID_),floor(length(I_ID_)*rand()))))); end;%for ni=1:n_i; 
disp(sprintf(' %% C_by_I_xref_ find 2: %f',toc));
tic; for ni=1:n_i; find(C_by_I_xref_(max(1,min(length(C_ID_),floor(length(C_ID_)*rand()))),:)); end;%for ni=1:n_i; 
disp(sprintf(' %% C_by_I_xref_ find 1: %f',toc));
tic; for ni=1:n_i; find(I_by_C_xref_(:,max(1,min(length(C_ID_),floor(length(C_ID_)*rand()))))); end;%for ni=1:n_i; 
disp(sprintf(' %% I_by_C_xref_ find 2: %f',toc));
tic; for ni=1:n_i; find(I_by_C_xref_(max(1,min(length(I_ID_),floor(length(I_ID_)*rand()))),:)); end;%for ni=1:n_i; 
disp(sprintf(' %% I_by_C_xref_ find 1: %f',toc));
end;%if flag_time;
I_to_C_ID_ = zeros(length(I_ID_),1);
for nI_ID=1:length(I_ID_);
I_to_C_ID_(nI_ID) = find(C_by_I_xref_(:,nI_ID));
end;%for nI_ID=1:length(I_ID_);
flag_test = 0;
if flag_test;
disp(sprintf(' %% testing I_to_C_ID_'));
n_i = 1024;
for ni=1:n_i;
nI_ID = max(1,min(length(I_ID_),floor(length(I_ID_)*rand())));
nC_ID = I_to_C_ID_(nI_ID);
assert(strcmp(C_ID_(nC_ID),I_ID_(nI_ID)));
end;%for ni=1:n_i;
disp(sprintf(' %% finished testing I_to_C_ID_'));
end;%if flag_test;
%%%%%%%%;

nE_ID = length(E_to_C_ID_);
nI_ID = length(I_to_C_ID_);

Label_ID_ = unique(C_.Cluster_ID_20161007(I_to_C_ID_));
n_Label_ID = length(Label_ID_);
n_Label_ID_ = zeros(n_Label_ID,1);
for nLabel_ID = 1:n_Label_ID;
n_Label_ID_(nLabel_ID) = length(find(strcmp(C_.Cluster_ID_20161007(I_to_C_ID_),Label_ID_(nLabel_ID))));
end;%for nLabel_ID = 1:n_Label_ID;
flag_plot=1;
if flag_plot;
bar(1:n_Label_ID,n_Label_ID_);
set(gca,'XTick',1:n_Label_ID,'XTickLabel',Label_ID_); xtickangle(90);
xlabel('cluster label');
ylabel('number');
title('histogram of cluster label counts');
set(gcf,'Position',1+[0,0,1024*2,1024]);
fname_base = sprintf('%s/dir_jpg/label_count_I',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
end;%if flag_plot;

I_col_val_ = 51:size(I_,2)-1;
I_val_ = decostand_total_0(I_{:,I_col_val_},'col');
n_GENE = size(I_val_,2);
n_sample = size(I_val_,1);
I_rank_ = rank_normalize_0(I_val_,'row');;

flag_test=1;
if flag_test;
flag_same=1; for ni=1:length(I_ID_); flag_same=flag_same*strcmp(I_ID_{ni},C_ID_{I_to_C_ID_(ni)}); end;
disp(sprintf(' %% testing I_ID_{:} vs C_ID_{I_to_C_ID_(:)}: flag_same %d',flag_same));
end;%if flag_test;

%%%%%%%%;
% Extracting categorical covariates. ;
%%%%%%%%;
B_col_val_ = setdiff(7:23,[9,10,11,13,15,16,21,22,23]);
% 09 --> cell [1] x3ClassPrediction: 
% 10 <-- FailConfidencSum (double);
% 13 <-- SampleCount (double) ;
% 11 --> cell [47] max_leaf: 
% 15 --> cell [283] well: 
% 16 --> cell [9] batch: 
% 21 --> double [48] SequencingLane: 
% 22 --> double [3] FailState: 
% 23 --> double [12] RunID: 
n_BCOV = length(B_col_val_);
disp(sprintf(' %% %% %% %% '));
for nB=1:n_BCOV;
nc = B_col_val_(nB);
tmp_str = C_.Properties.VariableNames{nc};
tmp_type = class(C_{I_to_C_ID_,nc});
tmp_u_ = unique(C_{I_to_C_ID_,nc});
disp(sprintf(' %% %0.2d --> %s [%d] %s: ',nc,tmp_type,length(tmp_u_),tmp_str));
for nu=1:length(tmp_u_);
if strcmp(tmp_type,'cell');   disp(sprintf(' %% %% %s: %d',tmp_u_{nu},length(find(strcmp(C_{I_to_C_ID_,nc},tmp_u_{nu}))))); end;
if strcmp(tmp_type,'double'); disp(sprintf(' %% %% %d: %d',tmp_u_(nu),length(find(C_{I_to_C_ID_,nc} == tmp_u_(nu))))); end;
end;%for nu=1:length(tmp_u_);
disp(sprintf(' %% %% %% %% '));
end;%for nB=1:n_BCOV;

%%%%%%%%;
n_FACTOR = 0; B_val_ = zeros(nI_ID,0); B_VariableName_ = cell(0);
%%%%%%%%;
% Cluster_Grp_20161007:
%%%%%%%%;
nc=7; tmp_str = 'exc'; 
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(strcmp(C_{I_to_C_ID_,nc},tmp_str)); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
nc=7; tmp_str = 'glia'; 
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(strcmp(C_{I_to_C_ID_,nc},tmp_str)); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
nc=7; tmp_str = 'inh'; 
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(strcmp(C_{I_to_C_ID_,nc},tmp_str)); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
%%%%%%%%;
% IsOutlier_20161007: 
%%%%%%%%;
nc=8; tmp_str = 'no'; 
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(strcmp(C_{I_to_C_ID_,nc},tmp_str)); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
nc=8; tmp_str = 'yes'; 
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(strcmp(C_{I_to_C_ID_,nc},tmp_str)); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
%%%%%%%%;
% cell_class: 
%%%%%%%%;
nc=12; tmp_str = 'GABAergic'; 
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(strcmp(C_{I_to_C_ID_,nc},tmp_str)); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
nc=12; tmp_str = 'Glutamatergic'; 
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(strcmp(C_{I_to_C_ID_,nc},tmp_str)); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
nc=12; tmp_str = 'Non-neuronal'; 
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(strcmp(C_{I_to_C_ID_,nc},tmp_str)); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
%%%%%%%%;
% BatchCount: 
%%%%%%%%;
nc=14; tmp_d = 1;
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(C_{I_to_C_ID_,nc}==tmp_d); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
nc=14; tmp_d = 2;
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(C_{I_to_C_ID_,nc}==tmp_d); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
nc=14; tmp_d = 3;
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(C_{I_to_C_ID_,nc}==tmp_d); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
%%%%%%%%;
% neun:
%%%%%%%%;
nc=17; tmp_str = '1NeuNN'; 
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(strcmp(C_{I_to_C_ID_,nc},tmp_str)); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
nc=17; tmp_str = '1NeuNP'; 
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(strcmp(C_{I_to_C_ID_,nc},tmp_str)); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
%%%%%%%%;
% patient_id: 
%%%%%%%%;
nc=18; tmp_str1 = 'H200-1025'; tmp_str2 = 'H200.1025'; 
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(strcmp(C_{I_to_C_ID_,nc},tmp_str1) | strcmp(C_{I_to_C_ID_,nc},tmp_str2)); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
nc=18; tmp_str1 = 'H200-1030'; tmp_str2 = 'H200.1030'; 
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(strcmp(C_{I_to_C_ID_,nc},tmp_str1) | strcmp(C_{I_to_C_ID_,nc},tmp_str2)); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
%%%%%%%%;
% region:
%%%%%%%%;
nc=19; tmp_str = 'FI'; 
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(strcmp(C_{I_to_C_ID_,nc},tmp_str)); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
nc=19; tmp_str = 'MTG'; 
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(strcmp(C_{I_to_C_ID_,nc},tmp_str)); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
%%%%%%%%;
% layer: 
%%%%%%%%;
nc=20; tmp_str = '1'; 
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(strcmp(C_{I_to_C_ID_,nc},tmp_str)); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;
nc=20; tmp_str = '5'; 
B_VariableName_{1+n_FACTOR} = sprintf('%s_%s',C_.Properties.VariableNames{nc},tmp_str); tmp_ij_ = find(strcmp(C_{I_to_C_ID_,nc},tmp_str)); B_val_(tmp_ij_,1+n_FACTOR)=1; n_FACTOR = n_FACTOR+1;

%%%%%%%%;
% Ranking categorical covariates. ;
%%%%%%%%;
B_rank_ = rank_normalize_0(B_val_); n_BCOV = size(B_rank_,2);

%%%%%%%%;
% Extracting continuous covariates. ;
%%%%%%%%;
D_col_val_ = [10,13,24:size(C_,2)];
str_exclude_ = {'fastQCResult','x_P_E__RawSeq__','x_Num_1_NumberOfInputCoreGenes_CoreGenes_','x_Num_2_NumberOfInputCoreGenes_CoreGenes_','x_MitoCore_NumberOfInputCoreGenes_CoreGenes_','x_MitoCore13_NumberOfInputCoreGenes_CoreGenes_','x_P_E__Pretrimmed_ERCCAligned_'};
for ne=1:length(str_exclude_);
nx = find(strcmp(C_.Properties.VariableNames,str_exclude_{ne}));
disp(sprintf(' %% excluding %s <-- %d <-- %s',str_exclude_{ne},nx,C_.Properties.VariableNames{nx}));
D_col_val_ = setdiff(D_col_val_,nx);
end;%for ne=1:length(str_exclude_);
%%%%%%%%;
n_D_col_val = length(D_col_val_); n_DCOV = n_D_col_val;
D_val_ = zeros(nI_ID,n_DCOV);
D_VariableName_ = cell(n_D_col_val,1);
%for nc=1:n_D_col_val;
%D_col_val = D_col_val_(nc);
%tmp_D_val_ = C_(I_to_C_ID_,D_col_val); 
%disp(sprintf(' %% nc %d D_col_val %d class %s',nc,D_col_val,class(tmp_D_val_{1,1})));
%end;%for nc=1:n_D_col_val;
for nc=1:n_D_col_val;
D_col_val = D_col_val_(nc);
D_VariableName_{nc} = C_.Properties.VariableNames{D_col_val};
tmp_D_val_ = C_(I_to_C_ID_,D_col_val); 
if strcmp(class(tmp_D_val_{1,1}),'double'); D_val_(:,nc) = tmp_D_val_{1:end,1};
elseif strcmp(class(tmp_D_val_{1,1}),'cell'); D_val_(:,nc) = cellfun(@str2num,tmp_D_val_{1:end,1}); 
else disp(sprintf(' %% nc %d D_col_val %d class %s',nc,D_col_val,class(tmp_D_val_{1,1}))); end;
end;%for nc=1:n_D_col_val;
D_rank_ = rank_normalize_0(D_val_);

%%%%%%%%;
% Stacking together B_rank_ and D_rank_. ;
%%%%%%%%;
n_CCOV = n_BCOV + n_DCOV;
C_VariableName_ = {B_VariableName_{:},D_VariableName_{:}};
C_val_ = [B_val_ , D_val_];
C_rank_ = [B_rank_ , D_rank_];

%%%%%%%%;
% Now measure correlation across samples of genes and covariates. ;
%%%%%%%%;
tmp_rank_avg_ = mean(C_rank_,1); tmp_rank_std_ = std(C_rank_,1,1);
tmp_C_ = (C_rank_ - repmat(tmp_rank_avg_,nI_ID,1))./repmat(tmp_rank_std_,nI_ID,1);
tmp_rank_avg_ = mean(I_rank_,1); tmp_rank_std_ = std(I_rank_,1,1);
tmp_I_ = (I_rank_ - repmat(tmp_rank_avg_,nI_ID,1))./repmat(tmp_rank_std_,nI_ID,1);
clear tmp_rank_avg_ tmp_rank_std_;
XX_rank_ = transpose(tmp_C_)*tmp_I_ / nI_ID;
[tmp_U_,tmp_S_,tmp_V_] = svds(XX_rank_,1); [~,XX_rank_U_ij_] = sort(tmp_U_,'descend'); [~,XX_rank_V_ij_] = sort(tmp_V_,'descend');
XX_rank_ori_ = XX_rank_(XX_rank_U_ij_,XX_rank_V_ij_);
clear XX_rank_ tmp_U_ tmp_S_ tmp_V_ ;
flag_disp=1;
if flag_disp;
colormap(colormap_beach()); 
imagesc(transpose(XX_rank_ori_),[-1,+1]); 
set(gca,'XTick',1:n_CCOV,'XTickLabel',C_VariableName_(XX_rank_U_ij_),'TickLabelInterpreter','none'); xtickangle(90);
set(gca,'FontSize',7);
xlabel('covariates'); ylabel('genes'); title('Correlation between Genes and Covariates');
set(gcf,'Position',1+[0,0,1024*2,1024]);
colorbar;
fname_base = sprintf('%s/dir_jpg/gene_covariate_correlation_ori',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
end;%if flag_disp;
n_iteration = 32;
XX_rank_avg_ = zeros(n_CCOV,n_GENE);
XX_rank_std_ = zeros(n_CCOV,n_GENE);
for niteration=1:n_iteration;
if (mod(niteration,10)==0); disp(sprintf(' %% niteration %d/%d',niteration,n_iteration)); end;
[tmp_Q_,~] = qr(randn(nI_ID));
tmp_XX_rank_ = transpose(tmp_C_)*tmp_Q_*tmp_I_ / nI_ID;
[tmp_U_,tmp_S_,tmp_V_] = svds(tmp_XX_rank_,1); [~,tmp_XX_rank_U_ij_] = sort(tmp_U_,'descend'); [~,tmp_XX_rank_V_ij_] = sort(tmp_V_,'descend');
XX_rank_avg_ = XX_rank_avg_ + tmp_XX_rank_(tmp_XX_rank_U_ij_,tmp_XX_rank_V_ij_);
XX_rank_std_ = XX_rank_std_ + tmp_XX_rank_(tmp_XX_rank_U_ij_,tmp_XX_rank_V_ij_).^2;
clear tmp_XX_rank_ tmp_U_ tmp_S_ tmp_V_ tmp_XX_rank_U_ij_ tmp_XX_rank_V_ij_ ;
end;%for niteration=1:n_iteration;
XX_rank_avg_ = XX_rank_avg_/n_iteration;
XX_rank_std_ = sqrt(XX_rank_std_/n_iteration - XX_rank_avg_.^2);
XX_rank_Z_ = ( XX_rank_ori_ - XX_rank_avg_ ) ./ XX_rank_std_ ;
%XX_rank_p_ = 0.5 * erfc( XX_rank_Z_ / sqrt(2) ) ;
XX_rank_p_ = 1.0 * erfc( abs(XX_rank_Z_) / sqrt(2) ) ; %<-- two sided. ;
clear tmp_C_ tmp_I_;
flag_disp=1;
if flag_disp;
colormap(colormap_beach()); 
imagesc(transpose(-log10(XX_rank_p_)),[0,+15]); 
set(gca,'XTick',1:n_CCOV,'XTickLabel',C_VariableName_(XX_rank_U_ij_),'TickLabelInterpreter','none'); xtickangle(90);
set(gca,'FontSize',7);
xlabel('covariates'); ylabel('genes'); title('log10(p-value) of Correlation between Genes and Covariates');
set(gcf,'Position',1+[0,0,1024*2,1024]);
colorbar;
fname_base = sprintf('%s/dir_jpg/gene_covariate_correlation_p',dir_trunk);
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
end;%if flag_disp;

%%%%%%%%;
% Can we estimate the link I_rank_ * beta_ = C_rank_ using a low-rank beta_ ?
%%%%%%%%;
n_rank = 28;
beta_un_ = zeros(n_GENE,n_rank);
beta_vn_ = zeros(n_CCOV,n_rank);
tmp_Bn_ = pinv(I_rank_);
tmp_Yn_ = C_rank_;
for nrank=1:n_rank;
[tmp_un_,tmp_vn_] = rrr_0(I_rank_,tmp_Yn_,tmp_Bn_);
beta_un_(:,nrank) = tmp_un_;
beta_vn_(:,nrank) = tmp_vn_;
tmp_Yn_ = tmp_Yn_ - (I_rank_*beta_un_(:,nrank))*transpose(beta_vn_(:,nrank));
clear tmp_un_ tmp_vn_;
end;%for nrank=1:n_rank;
clear tmp_Yn_ tmp_Bn_;

subplot(2,2,1); imagesc(C_rank_);
subplot(2,2,2); imagesc((I_rank_*beta_un_)*transpose(beta_vn_));
subplot(2,2,3); imagesc(transpose(I_rank_)*C_rank_);
subplot(2,2,4); imagesc(transpose(I_rank_)*((I_rank_*beta_un_)*transpose(beta_vn_)));

%%%%%%%%;
% Now measure rank-differences. ;
%%%%%%%%;
I_Label_ = C_.Cluster_ID_20161007(I_to_C_ID_);
Label_ID_ = unique(I_Label_); n_Label_ID = length(Label_ID_);
I_aucX__ = zeros(n_Label_ID,n_Label_ID,n_GENE);
C_aucX__ = zeros(n_Label_ID,n_Label_ID,n_CCOV);
I_rank_avg_ = zeros(n_Label_ID,n_GENE);
C_rank_avg_ = zeros(n_Label_ID,n_CCOV);
%%%%%%%%;
for nA = 1:n_Label_ID;
disp(sprintf(' %% Rank average for Label %d (%s):',nA,Label_ID_{nA}));
tmp_Label_A_ij_ = find(strcmp(I_Label_,Label_ID_{nA})); tmp_n_A = length(tmp_Label_A_ij_);
I_rank_avg_(nA,:) = mean(I_rank_(tmp_Label_A_ij_,:),1);
C_rank_avg_(nA,:) = mean(C_rank_(tmp_Label_A_ij_,:),1);
end;%for nA = 1:n_Label_ID;
%%%%%%%%;
for nA = 1:n_Label_ID;
for nB = nA+1:n_Label_ID;
disp(sprintf(' %% Comparing Label %d (%s) and %d (%s):',nA,Label_ID_{nA},nB,Label_ID_{nB}));
I_aucX__(nA,nB,:) = I_rank_avg_(nA,:) - I_rank_avg_(nB,:);
I_aucX__(nB,nA,:) = -I_aucX__(nA,nB,:);
C_aucX__(nA,nB,:) = C_rank_avg_(nA,:) - C_rank_avg_(nB,:);
C_aucX__(nB,nA,:) = -C_aucX__(nA,nB,:);
end;%for nB = nA+1:n_Label_ID;
end;%for nA = 1:n_Label_ID;

flag_test=0;
if flag_test;
%%%%%%%;
% Now we can test a pair of labels: ;
%%%%%%%%;
nA=find(strcmp(Label_ID_,'28')); nB=find(strcmp(Label_ID_,'33'));
disp(sprintf(' %% Comparing Label %d (%s) and %d (%s):',nA,Label_ID_{nA},nB,Label_ID_{nB}));
tmp_Label_A_ij_ = find(strcmp(I_Label_,Label_ID_{nA})); tmp_n_A = length(tmp_Label_A_ij_);
tmp_Label_B_ij_ = find(strcmp(I_Label_,Label_ID_{nB})); tmp_n_B = length(tmp_Label_B_ij_);
%%%%%%%%;
% Now sort genes by aucX and plot heatmap: ;
%%%%%%%%;
[~,tmp_I_ij_] = sort(I_aucX__(nA,nB,:));
tmp_AB_ = [I_rank_(tmp_Label_A_ij_,tmp_I_ij_) ; I_rank_(tmp_Label_B_ij_,tmp_I_ij_)];
tmp_AB_ = decostand_total_0(tmp_AB_,'row');
clim_ = mean(tmp_AB_(:)) + 1.5*std(tmp_AB_(:))*[-1,+1];
figure(1); clf;
subplot(5,1,[1:2]); imagesc(tmp_AB_(0*tmp_n_A + (1:tmp_n_A),:),clim_); ylabel(sprintf('label %s',Label_ID_{nA}));
subplot(5,1,[3:4]); imagesc(tmp_AB_(1*tmp_n_A + (1:tmp_n_B),:),clim_); ylabel(sprintf('label %s',Label_ID_{nB}));
subplot(5,1,5); plot(1:n_GENE,mean(I_rank_(tmp_Label_A_ij_,tmp_I_ij_),1) - mean(I_rank_(tmp_Label_B_ij_,tmp_I_ij_),1),'r-',1:n_GENE,0*(1:n_GENE),'k:');
xlim([1,n_GENE]); xlabel('gene'); ylabel('rank diff');
%%%%%%%%;
% Now sort covariates by p-value and plot heatmap: ;
%%%%%%%%;
[~,tmp_C_ij_] = sort(C_aucX__(nA,nB,:));
tmp_AB_ = [C_val_(tmp_Label_A_ij_,tmp_C_ij_) ; C_val_(tmp_Label_B_ij_,tmp_C_ij_)];
tmp_AB_ = decostand_total_0(tmp_AB_,'row');
clim_ = mean(tmp_AB_(:)) + 1.5*std(tmp_AB_(:))*[-1,+1];
figure(2); clf;
subplot(5,1,[1:2]); imagesc(tmp_AB_(0*tmp_n_A + (1:tmp_n_A),:),clim_); ylabel(sprintf('label %s',Label_ID_{nA}));
subplot(5,1,[3:4]); imagesc(tmp_AB_(1*tmp_n_A + (1:tmp_n_B),:),clim_); ylabel(sprintf('label %s',Label_ID_{nB}));
subplot(5,1,5); plot(1:n_CCOV,mean(C_rank_(tmp_Label_A_ij_,tmp_C_ij_),1) - mean(C_rank_(tmp_Label_B_ij_,tmp_C_ij_),1),'r-',1:n_CCOV,0*(1:n_CCOV),'k:');
xlim([1,n_CCOV]); xlabel('ccov'); ylabel('rank diff');
end;%if flag_test;

%%%%%%%%;
% For each gene and covariate, we can record the sorted-list of Label-pairs from I_aucX__ and C_aucX__. ;
% We can compare this to the distribution of sorted-lists obtained in a (Label-Label) permutation-test. ;
% Similarly, for each Label-pair, we can record the sorted-list of genes and covariates from I_aucX__ and C_aucX__. ;
% Again, we can compare this to the distribution of sorted-lists obtained in a (Label-Label) permutation-test. ;
%%%%%%%%;
AB_I_sort_list_ori__ = zeros(n_Label_ID,n_Label_ID,n_GENE);
AB_C_sort_list_ori__ = zeros(n_Label_ID,n_Label_ID,n_CCOV);
I_AB_sort_list_ori__ = zeros(n_Label_ID.^2,n_GENE);
C_AB_sort_list_ori__ = zeros(n_Label_ID.^2,n_CCOV);
AB_I_sort_list_ij__ = zeros(n_Label_ID,n_Label_ID,n_GENE);
AB_C_sort_list_ij__ = zeros(n_Label_ID,n_Label_ID,n_CCOV);
I_AB_sort_list_ij__ = zeros(n_Label_ID.^2,n_GENE);
C_AB_sort_list_ij__ = zeros(n_Label_ID.^2,n_CCOV);
n_iteration = 64;
AB_I_sort_list_avg__ = zeros(n_Label_ID,n_Label_ID,n_GENE);
AB_C_sort_list_avg__ = zeros(n_Label_ID,n_Label_ID,n_CCOV);
I_AB_sort_list_avg__ = zeros(n_Label_ID.^2,n_GENE);
C_AB_sort_list_avg__ = zeros(n_Label_ID.^2,n_CCOV);
AB_I_sort_list_std__ = zeros(n_Label_ID,n_Label_ID,n_GENE);
AB_C_sort_list_std__ = zeros(n_Label_ID,n_Label_ID,n_CCOV);
I_AB_sort_list_std__ = zeros(n_Label_ID.^2,n_GENE);
C_AB_sort_list_std__ = zeros(n_Label_ID.^2,n_CCOV);
%%%%%%%%;
AB_I_sort_list_p__ = zeros(n_Label_ID,n_Label_ID,n_GENE);
AB_C_sort_list_p__ = zeros(n_Label_ID,n_Label_ID,n_CCOV);
I_AB_sort_list_p__ = zeros(n_Label_ID.^2,n_GENE);
C_AB_sort_list_p__ = zeros(n_Label_ID.^2,n_CCOV);
%%%%%%%%;
I_Label_ = C_.Cluster_ID_20161007(I_to_C_ID_);
Label_ID_ = unique(I_Label_); n_Label_ID = length(Label_ID_);
rng(1);
for niteration=0:n_iteration;
if (mod(niteration,1)==0); disp(sprintf(' %% niteration %d/%d',niteration,n_iteration)); end;
if (niteration==0); tmp_p_ = 1:nI_ID; else; tmp_p_ = randperm(nI_ID); end;
tmp_I_aucX__ = zeros(n_Label_ID,n_Label_ID,n_GENE);
tmp_C_aucX__ = zeros(n_Label_ID,n_Label_ID,n_CCOV);
tmp_I_rank_avg_ = zeros(n_Label_ID,n_GENE);
tmp_C_rank_avg_ = zeros(n_Label_ID,n_CCOV);
%%%%%%%%;
for nA = 1:n_Label_ID;
tmp_Label_A_ij_ = find(strcmp(I_Label_(tmp_p_),Label_ID_{nA})); tmp_n_A = length(tmp_Label_A_ij_);
tmp_I_rank_avg_(nA,:) = mean(I_rank_(tmp_Label_A_ij_,:),1);
tmp_C_rank_avg_(nA,:) = mean(C_rank_(tmp_Label_A_ij_,:),1);
end;%for nA = 1:n_Label_ID;
%%%%%%%%;
for nA = 1:n_Label_ID;
for nB = nA+1:n_Label_ID;
tmp_I_aucX__(nA,nB,:) = tmp_I_rank_avg_(nA,:) - tmp_I_rank_avg_(nB,:);
tmp_I_aucX__(nB,nA,:) = -tmp_I_aucX__(nA,nB,:);
tmp_C_aucX__(nA,nB,:) = tmp_C_rank_avg_(nA,:) - tmp_C_rank_avg_(nB,:);
tmp_C_aucX__(nB,nA,:) = -tmp_C_aucX__(nA,nB,:);
end;%for nB = nA+1:n_Label_ID;
end;%for nA = 1:n_Label_ID;
%%%%%%%%;
[tmp_AB_I_sort_list__,tmp_AB_I_sort_ij__] = sort(tmp_I_aucX__,3,'ascend');
[tmp_AB_C_sort_list__,tmp_AB_C_sort_ij__] = sort(tmp_C_aucX__,3,'ascend');
[tmp_I_AB_sort_list__,tmp_I_AB_sort_ij__] = sort(reshape(tmp_I_aucX__,n_Label_ID.^2,n_GENE),2,'ascend');
[tmp_C_AB_sort_list__,tmp_C_AB_sort_ij__] = sort(reshape(tmp_C_aucX__,n_Label_ID.^2,n_CCOV),2,'ascend');
%%%%%%%%;
if (niteration==0); 
AB_I_sort_list_ori__ = tmp_AB_I_sort_list__;
AB_C_sort_list_ori__ = tmp_AB_C_sort_list__;
I_AB_sort_list_ori__ = tmp_I_AB_sort_list__;
C_AB_sort_list_ori__ = tmp_C_AB_sort_list__;
AB_I_sort_list_ij__ = tmp_AB_I_sort_ij__;
AB_C_sort_list_ij__ = tmp_AB_C_sort_ij__;
I_AB_sort_list_ij__ = tmp_I_AB_sort_ij__;
C_AB_sort_list_ij__ = tmp_C_AB_sort_ij__;
end; %if (niteration==0);
if (niteration>0);
AB_I_sort_list_avg__ = AB_I_sort_list_avg__ + tmp_AB_I_sort_list__;
AB_C_sort_list_avg__ = AB_C_sort_list_avg__ + tmp_AB_C_sort_list__;
I_AB_sort_list_avg__ = I_AB_sort_list_avg__ + tmp_I_AB_sort_list__;
C_AB_sort_list_avg__ = C_AB_sort_list_avg__ + tmp_C_AB_sort_list__;
AB_I_sort_list_std__ = AB_I_sort_list_std__ + tmp_AB_I_sort_list__.^2;
AB_C_sort_list_std__ = AB_C_sort_list_std__ + tmp_AB_C_sort_list__.^2;
I_AB_sort_list_std__ = I_AB_sort_list_std__ + tmp_I_AB_sort_list__.^2;
C_AB_sort_list_std__ = C_AB_sort_list_std__ + tmp_C_AB_sort_list__.^2;
end;%if (niteration>0);
%%%%%%%%;
clear tmp_I_aucX__ tmp_C_aucX__ tmp_I_rank_avg_ tmp_C_rank_avg_ ;
clear tmp_Label_A_ij_ tmp_n_A tmp_I_rank_avg_ tmp_C_rank_avg_ ;
clear tmp_I_aucX__ tmp_C_aucX__ ;
clear tmp_AB_I_sort_list__ tmp_AB_C_sort_list__ tmp_I_AB_sort_list__ tmp_C_AB_sort_list__ ;
clear tmp_AB_I_sort_ij__ tmp_AB_C_sort_ij__ tmp_I_AB_sort_ij__ tmp_C_AB_sort_ij__ ;
end;%for niteration=0:n_iteration;
AB_I_sort_list_avg__ = AB_I_sort_list_avg__/n_iteration;
AB_C_sort_list_avg__ = AB_C_sort_list_avg__/n_iteration;
I_AB_sort_list_avg__ = I_AB_sort_list_avg__/n_iteration;
C_AB_sort_list_avg__ = C_AB_sort_list_avg__/n_iteration;
AB_I_sort_list_std__ = sqrt(AB_I_sort_list_std__/n_iteration - AB_I_sort_list_avg__.^2);
AB_C_sort_list_std__ = sqrt(AB_C_sort_list_std__/n_iteration - AB_C_sort_list_avg__.^2);
I_AB_sort_list_std__ = sqrt(I_AB_sort_list_std__/n_iteration - I_AB_sort_list_avg__.^2);
C_AB_sort_list_std__ = sqrt(C_AB_sort_list_std__/n_iteration - C_AB_sort_list_avg__.^2);
%%%%%%%%;
AB_I_sort_list_p__ = erfc( abs(AB_I_sort_list_ori__ - AB_I_sort_list_avg__)./AB_I_sort_list_std__ / sqrt(2) );
AB_C_sort_list_p__ = erfc( abs(AB_C_sort_list_ori__ - AB_C_sort_list_avg__)./AB_C_sort_list_std__ / sqrt(2) );
I_AB_sort_list_p__ = erfc( abs(I_AB_sort_list_ori__ - I_AB_sort_list_avg__)./I_AB_sort_list_std__ / sqrt(2) );
C_AB_sort_list_p__ = erfc( abs(C_AB_sort_list_ori__ - C_AB_sort_list_avg__)./C_AB_sort_list_std__ / sqrt(2) );

flag_test=0;
if flag_test;
%%%%%%%;
% Now we can test a pair of labels: ;
%%%%%%%%;
for nl=1:3;
if nl==1; nA=find(strcmp(Label_ID_,'28')); nB=find(strcmp(Label_ID_,'33')); end;
if nl==2; nA=find(strcmp(Label_ID_,'22')); nB=find(strcmp(Label_ID_,'11')); end;
if nl==3; nA=find(strcmp(Label_ID_,'19')); nB=find(strcmp(Label_ID_,'15')); end;
disp(sprintf(' %% Comparing Label %d (%s) and %d (%s):',nA,Label_ID_{nA},nB,Label_ID_{nB}));
clf; hold on;
plot(squeeze(AB_C_sort_list_avg__(nA,nB,:)+2.0*AB_C_sort_list_std__(nA,nB,:)),'k','LineWidth',0.5);
plot(squeeze(AB_C_sort_list_avg__(nA,nB,:)+0.0*AB_C_sort_list_std__(nA,nB,:)),'k','LineWidth',1.0);
plot(squeeze(AB_C_sort_list_avg__(nA,nB,:)-2.0*AB_C_sort_list_std__(nA,nB,:)),'k','LineWidth',0.5);
plot(squeeze(AB_C_sort_list_ori__(nA,nB,:)),'r','LineWidth',2.0);
xlim([1,n_CCOV]); xlabel('covariate'); ylabel('rank difference (auc)'); title(sprintf('sorted auc of covariates influencing labels %s-vs-%s',Label_ID_{nA},Label_ID_{nB}));
set(gca,'XTick',1:n_CCOV,'XTickLabel',C_VariableName_(AB_C_sort_list_ij__(nA,nB,:)),'TickLabelInterpreter','none'); xtickangle(90);
set(gca,'FontSize',7);
set(gcf,'Position',1+[0,0,1024*2,1024]);
fname_base = sprintf('%s/dir_jpg/AB_C_sort_list_ori_%s_vs_%s',dir_trunk,Label_ID_{nA},Label_ID_{nB});
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
hold off;
%%%%%%%%;
clf; hold on;
plot(-log10(squeeze(AB_C_sort_list_p__(nA,nB,:))),'r','LineWidth',2.0);
xlim([1,n_CCOV]); xlabel('covariate'); ylim([0,15]); ylabel('-log10(p)'); title(sprintf('-log10(p-value) for sorted auc of covariates influencing labels %s-vs-%s',Label_ID_{nA},Label_ID_{nB}));
set(gca,'XTick',1:n_CCOV,'XTickLabel',C_VariableName_(AB_C_sort_list_ij__(nA,nB,:)),'TickLabelInterpreter','none'); xtickangle(90);
set(gca,'FontSize',7);
set(gcf,'Position',1+[0,0,1024*2,1024]);
fname_base = sprintf('%s/dir_jpg/AB_C_sort_list_p_%s_vs_%s',dir_trunk,Label_ID_{nA},Label_ID_{nB});
disp(sprintf(' %% writing %s.jpg',fname_base));
print('-djpeg',sprintf('%s.jpg',fname_base));
print('-depsc',sprintf('%s.eps',fname_base));
hold off;
%%%%%%%%;
end;%for nl=1:3;
end;%if flag_test;

%%%%%%%%;
% Now run through the cluster pairs, ;
% accumulating the covariates which contribute most to the differences. ;
%%%%%%%%;


disp('returning'); return;



