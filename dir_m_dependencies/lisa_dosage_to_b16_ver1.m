function lisa_dosage_to_b16_ver1(cl_num,flag_local,flag_fam,flag_bim,flag_stop,flag_crop);
% extract/convert some information from bed files to b16 files. ;
% rsync -anvu rangan@access1.cims.nyu.edu:/data/rangan/dir_bcc/dir_PGC_20180304/dir_m/ /home/grouther/dir_PGC_20190328/dir_m/ ;
% rsync -anvu dir_PGC_cl1_maf01/ rangan@access1.cims.nyu.edu:/data/rangan/dir_bcc/dir_PGC_20190328/dir_PGC_cl1_maf01/ --exclude '*A_??_?.b16' --exclude 'dir_tmp' ;
ni=1;
if nargin<ni; cl_num = input('cluster number? [i.e., 1,2,...]'); end; ni = ni+1;
if nargin<ni; flag_local = input(' set flag_local? [0=rangan, 1=grouther]'); end; ni = ni+1;
if nargin<ni; flag_fam = input(' generate fam file? [1=yes, 0=no]'); end; ni = ni+1;
if nargin<ni; flag_bim = input(' generate bim file? [1=yes, 0=no]'); end; ni = ni+1;
if nargin<ni; flag_stop = input(' set flag_stop? [2=after mds, 0=after mr]'); end; ni = ni+1;
if nargin<ni; flag_crop = input(' set flag_crop so that only a subset of ~1000 snps are considered? [1=yes, 0=no]'); end; ni = ni+1;
% clear; cl_num = 6; flag_local = 0; flag_fam=1; flag_bim=1; flag_stop = 0; flag_crop = 0; 
male_tag=1; fema_tag=2; case_tag=2; ctrl_tag=1; 
bitj=16; bit8=8; bit4=4; 
snp_and_tag=3; snp_xor_tag=2; snp_nor_tag=0; snp_mss_tag=1; snp_not_tag=5; %<-- for bed files. ;

ent_cutoff = 0.03; %<-- entropy cutoff for snp inclusion. ;
frq_cutoff = 0.01; %<-- minor allele frequency cutoff for snp inclusion. ;
mss_cutoff = 0.02; %<-- missingess fraction cutoff for snp inclusion (not used). ;

[study_dosage_trunk_,study_dosage_name_,study_fam_name_,n_study] = lisa_define_study_dosage_ver1(cl_num);

if (flag_crop==0);
tmp = sprintf('PGC_cl%d_maf%.2d',cl_num,floor(100*frq_cutoff));
end;%if (flag_crop==0);
if (flag_crop==1);
tmp = sprintf('PGC_cl%d_maf%.2d_crop',cl_num,floor(100*frq_cutoff));
end;%if (flag_crop==0);
snp_pre = sprintf('%s_',tmp);
if flag_local==1; dir_pre = sprintf('%s','/home/grouther/dir_PGC_20190328'); end;
if flag_local==0; dir_pre = sprintf('%s','/data/rangan/dir_bcc/dir_PGC_20180304'); end;
dir_out = sprintf('%s/dir_%s',dir_pre,tmp); if ~exist(dir_out,'dir'); disp(sprintf(' %% creating %s',dir_out)); mkdir(dir_out); end;
disp(sprintf('%% snp_pre %s\n%% dir_out %s\n%% tmp_char %s/%s\n',snp_pre,dir_out,dir_out,snp_pre));
if flag_local==1; dir_tmp = sprintf('%s/dir_tmp',dir_out); if ~exist(dir_tmp,'dir'); disp(sprintf(' %% creating %s',dir_tmp)); mkdir(dir_tmp); end; end;
if flag_local==0; dir_tmp = '/data/rangan/dir_bcc/dir_PGC_20180304/dir_misc'; end;

if (flag_crop);
n_snp_crop_ = 1000 + [1:n_study];
end;%if (flag_crop);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
disp(sprintf('%% ; '));
disp(sprintf('%% Loading mds.mat ;'));
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
load(sprintf('%s/mds.mat',dir_pre));

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
disp(sprintf('%% ; '));
disp(sprintf('%% Loading data ;'));
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
fn_fam_ = cell(n_study,1); fp_fam_ = cell(n_study,1); 
fn_dsg_ = cell(n_study,1); fp_dsg_ = cell(n_study,1); 
fam_ = cell(n_study,1); fam_name_ = cell(n_study,1);
n_patient_ = zeros(n_study,1); n_patient_rup_ = zeros(n_study,1); n_dosage_patient_keep_ = zeros(n_study,1);
rij_male_ = cell(n_study,1);
rij_fema_ = cell(n_study,1);
rij_case_ = cell(n_study,1);
rij_ctrl_ = cell(n_study,1);
n_and_ = cell(n_study,1); n_xor_ = cell(n_study,1); n_nor_ = cell(n_study,1); n_mss_ = cell(n_study,1);
m_and_ = cell(n_study,1);;m_xor_ = cell(n_study,1);;m_nor_ = cell(n_study,1);;m_mss_ = cell(n_study,1);;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
% Reading fam ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
for ns=1:n_study;
disp(sprintf('%% ns %d: Reading fam file %s (patients) ;',ns,study_fam_name_{ns}));
fn_fam_{ns} = sprintf('%s',study_fam_name_{ns}); fcheck(fn_fam_{ns});
fp_fam_{ns} = fopen(fn_fam_{ns}); fam_{ns} = textscan(fp_fam_{ns},'%s %s %s %s %d %d'); fclose(fp_fam_{ns});
n_patient_(ns) = length(fam_{ns}{1}); 
tmp_rem = mod(n_patient_(ns),bit4); tmp_quo = (n_patient_(ns)-tmp_rem)/bit4;
n_patient_rup_(ns) = tmp_quo + (tmp_rem>0);
rij_male_{ns} = find(fam_{ns}{5}==male_tag);rij_fema_{ns} = find(fam_{ns}{5}==fema_tag);
rij_case_{ns} = find(fam_{ns}{6}==case_tag);rij_ctrl_{ns} = find(fam_{ns}{6}==ctrl_tag);
for np=1:n_patient_(ns);
fam_name_{ns}{np} = sprintf('%s%s%s',fam_{ns}{1}{np},'&',fam_{ns}{2}{np});
end;%for np=1:n_patient_(ns);
end;%for ns=1:n_study;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
% First we read the dosage header ;
% Immediately afterwards, we read the first 3 fields of the dosage data. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
n_dosage_patient_ = zeros(n_study,1);
dosage_fam_name_ = cell(n_study,1);
snp__id_ = cell(n_study,1); snp_al1_ = cell(n_study,1); snp_al2_ = cell(n_study,1);
for ns=1:n_study;
%%%%%%%%;
% first open file. ;
%%%%%%%%;
if flag_local & n_study>0;
str_command = sprintf('gunzip -c %s/%s.gz > %s/%s',study_dosage_trunk_{ns},study_dosage_name_{ns},dir_tmp,study_dosage_name_{ns}); 
disp(str_command); system(str_command);
end;%if flag_local & n_study>0;
%%%%%%%%;
fn_dsg_{ns} = sprintf('%s/%s',dir_tmp,study_dosage_name_{ns}); fcheck(fn_dsg_{ns});
fp_dsg_{ns} = fopen(fn_dsg_{ns});
%%%%%%%%;
% First get header line. ;
%%%%%%%%;
tmp_line_ = fgetl(fp_dsg_{ns});
tmp_dosage_patient_ = strsplit(tmp_line_);
assert(strcmp(tmp_dosage_patient_{1},'SNP'));
assert(strcmp(tmp_dosage_patient_{2},'A1'));
assert(strcmp(tmp_dosage_patient_{3},'A2'));
n_dosage_patient_(ns) = floor((length(tmp_dosage_patient_)-3)/2);
n_dosage_patient = n_dosage_patient_(ns);
tmp_rem = mod(n_dosage_patient_(ns),bit4); tmp_quo = (n_dosage_patient_(ns)-tmp_rem)/bit4;
n_dosage_patient_rup_(ns) = tmp_quo + (tmp_rem>0);
dosage_fam_name_{ns} = cell(n_dosage_patient,1);
for ndosage_patient=1:n_dosage_patient;
dosage_fam_name_{ns}{ndosage_patient} = sprintf('%s&%s',strtrim(tmp_dosage_patient_{2 + 2*ndosage_patient}),strtrim(tmp_dosage_patient_{3 + 2*ndosage_patient}));
end;%for ndosage_patient=1:n_dosage_patient;
%%%%%%%%;
% Now get remaining lines. ;
%%%%%%%%;
n_snp_(ns) = wc_0(fn_dsg_{ns})-1;
snp__id_{ns} = cell(n_snp_(ns),1);
snp_al1_{ns} = zeros(n_snp_(ns),1);
snp_al2_{ns} = zeros(n_snp_(ns),1);
for nsnp=1:n_snp_(ns);
tmp_line_ = fgetl(fp_dsg_{ns});
tmp_dosage_snp_ = textscan(tmp_line_,'%s',3);
snp__id_{ns}{nsnp} = tmp_dosage_snp_{1}{1};
snp_al1_{ns}(nsnp) = tmp_dosage_snp_{1}{2};
snp_al2_{ns}(nsnp) = tmp_dosage_snp_{1}{3};
end;%for nsnp=1:n_snp_(ns);
%%%%%%%%;
% Now close fid. ;
%%%%%%%%;
fclose(fp_dsg_{ns});
%%%%%%%%;
% clean up. ;
%%%%%%%%;
if flag_local & n_study>1;
str_command = sprintf('rm -rf %s/%s',dir_tmp,study_dosage_name_{ns}); 
disp(str_command); system(str_command);
end;%if flag_local & n_study>1;
%%%%%%%%;
end;%for ns=1:n_study;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;

%%%%%%%%;
% Now create cross-reference for fam. ;
%%%%%%%%;
guf_ = fam_name_;
gud_ = dosage_fam_name_;
hux_ = cell(n_study,1);
hux_to_guf_ = cell(n_study,1);
hux_to_gud_ = cell(n_study,1);
guf_by_hux_xref_ = cell(n_study,1);
gud_by_hux_xref_ = cell(n_study,1);
gud_keep_ = cell(n_study,1);
guf_keep_ = cell(n_study,1);
for ns=1:n_study;
hux_{ns} = setdiff(intersect(guf_{ns},gud_{ns},'stable'),famex_name_former_,'stable');
[~,~,hux_to_guf_{ns}] = intersect(hux_{ns},guf_{ns},'stable');
guf_by_hux_xref_{ns} = sparse(hux_to_guf_{ns},1:length(hux_{ns}),1,length(guf_{ns}),length(hux_{ns}));
guf_keep_{ns} = hux_to_guf_{ns};
[~,~,hux_to_gud_{ns}] = intersect(hux_{ns},gud_{ns},'stable');
gud_by_hux_xref_{ns} = sparse(hux_to_gud_{ns},1:length(hux_{ns}),1,length(gud_{ns}),length(hux_{ns}));
gud_keep_{ns} = hux_to_gud_{ns};
n_dosage_patient_keep_(ns) = length(gud_keep_{ns});
disp(sprintf(' %% found total: n_patient %d (%d males, %d femas, %d cases, %d ctrls) --> %d',n_patient_(ns),length(rij_male_{ns}),length(rij_fema_{ns}),length(rij_case_{ns}),length(rij_ctrl_{ns}),n_patient_rup_(ns)));
tmp_ij_ = find(sum(guf_by_hux_xref_{ns}(:,:),2));
disp(sprintf(' %% will keep:   n_patient %d (%d males, %d femas, %d cases, %d ctrls) --> %d',n_dosage_patient_keep_(ns),length(intersect(tmp_ij_,rij_male_{ns})),length(intersect(tmp_ij_,rij_fema_{ns})),length(intersect(tmp_ij_,rij_case_{ns})),length(intersect(tmp_ij_,rij_ctrl_{ns})),n_dosage_patient_rup_(ns)));
end;%for ns=1:n_study;
%%%%%%%%;
% now crop snp-list if requested. ;
%%%%%%%%;
if (flag_crop);
for ns=1:n_study;
snp__id_{ns} = snp__id_{ns}{1:n_snp_crop_(ns)};
snp_al1_{ns} = snp_al1_{ns}(1:n_snp_crop_(ns));
snp_al2_{ns} = snp_al2_{ns}(1:n_snp_crop_(ns));
n_snp_(ns) = n_snp_crop_(ns); 
end;%for ns=1:n_study;
end%if (flag_crop);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
disp(sprintf('%% ; '));
disp(sprintf('%% Calculating intersection (i.e., cap) of snps ;'));
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
[snp_cap_] = intersectall(snp__id_); n_snp_cap = length(snp_cap_);
snp_cap__ = cell(n_study,1);
for ns=1:n_study; [~,~,snp_cap__{ns}] = intersect(snp_cap_,snp__id_{ns},'stable'); end;%for ns=1:n_study;
disp(sprintf(' %% n_snp_cap %d',n_snp_cap));
disp_flag=0;
if disp_flag;
figure;cla; 
for ns1=1:n_study;
for ns2=ns1+1:n_study;
subplot(1,2,1); hold on;
plot(1:n_snp_cap,snp_pos_{ns1}(snp_cap__{ns1}),'ro',1:n_snp_cap,snp_pos_{ns2}(snp_cap__{ns2}),'b.'); xlabel('snp index number'); ylabel('snp pos'); title('snp ij vs pos');
subplot(1,2,2); hold on;
plot(snp_pos_{ns1}(snp_cap__{ns1}),snp_pos_{ns2}(snp_cap__{ns2}),'.'); xlabel('snp pos'); ylabel('snp pos'); title('pos vs pos');
end;%for ns2=ns1+1:n_study;
end;%for ns1=1:n_study;
end;%if disp_flag;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
% now checking to see if the snps in each study are unique or appear multiple times. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
for ns=1:n_study; 
disp(sprintf('study %d: length(unique(snp__id_{ns}))-length(unique(snp__id_{ns})) = %d',ns,length(unique(snp__id_{ns}))-length(snp__id_{ns}))); 
end;%for ns=1:n_study; 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
% now checking to see if the snps in the intersection are consistent across studies. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
snp_an1_ = zeros(n_snp_cap,n_study); snp_an2_ = zeros(n_snp_cap,n_study);
for ns=1:n_study;
tmp_an1_ = snp_al1_{ns}(snp_cap__{ns});
tmp_an2_ = snp_al2_{ns}(snp_cap__{ns});
tmp_an1_ = 1 * (tmp_an1_=='A') + 2 * (tmp_an1_=='C') + 3 * (tmp_an1_=='G') + 4 * (tmp_an1_=='T');
tmp_an2_ = 1 * (tmp_an2_=='A') + 2 * (tmp_an2_=='C') + 3 * (tmp_an2_=='G') + 4 * (tmp_an2_=='T');
snp_an1_(:,ns) = tmp_an1_; snp_an2_(:,ns) = tmp_an2_;
end;%for ns=1:n_study;
snp_an1 = mode(snp_an1_,2); snp_an2 = mode(snp_an2_,2);
snp_ad1_ = abs(snp_an1_ - repmat(snp_an1,1,n_study))>0; snp_ad2_ = abs(snp_an2_ - repmat(snp_an2,1,n_study))>0;
snp_adx_ = snp_ad1_ + snp_ad2_;
% Now compute hamming distance;
disp(sprintf(' %% fraction of snps with mismatch: %d/%d = %0.4f',length(find(sum(snp_adx_,2))),n_snp_cap,length(find(sum(snp_adx_,2)))/n_snp_cap));
disp(sprintf(' %% fraction of mismatches (within %d-x-%d data-array) %d/%d = %0.4f',n_snp_cap,n_study,sum(snp_adx_(:)>0),n_snp_cap*n_study,sum(snp_adx_(:)>0)/n_snp_cap*n_study));

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
disp(sprintf('%% ns %d: Reading dsg file %s (ascii snp data) ;',ns,study_dosage_name_{ns}));
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
m_and_ = cell(n_study,1); n_and_ = cell(n_study,1);
m_xor_ = cell(n_study,1); n_xor_ = cell(n_study,1);
m_nor_ = cell(n_study,1); n_nor_ = cell(n_study,1);
for ns=1:n_study;
tic;
%%%%%%%%;
% open file. ;
%%%%%%%%;
if flag_local & n_study>1;
str_command = sprintf('gunzip -c %s/%s.gz > %s/%s',study_dosage_trunk_{ns},study_dosage_name_{ns},dir_tmp,study_dosage_name_{ns}); 
disp(str_command); system(str_command);
end;%if flag_local & n_study>1;
%%%%%%%%;
fn_dsg_{ns} = sprintf('%s/%s',dir_tmp,study_dosage_name_{ns}); fcheck(fn_dsg_{ns});
fp_dsg_{ns} = fopen(fn_dsg_{ns}); 
tmp_line_ = fgetl(fp_dsg_{ns}); %<-- skip header line. ;
m_and_{ns} = zeros(n_dosage_patient_keep_(ns),1); n_and_{ns} = zeros(n_snp_(ns),1);
m_xor_{ns} = zeros(n_dosage_patient_keep_(ns),1); n_xor_{ns} = zeros(n_snp_(ns),1);
m_nor_{ns} = zeros(n_dosage_patient_keep_(ns),1); n_nor_{ns} = zeros(n_snp_(ns),1);
for nsnp=1:n_snp_(ns);
if (mod(nsnp,10000)==0); disp(sprintf(' %% ns %d/%d nsnp %d/%d',ns,n_study,nsnp,n_snp_(ns))); end;
tmp_line_ = fgetl(fp_dsg_{ns});
tmp_dosage_snp_ = textscan(tmp_line_,'%s',3);
tmp_dosage__id_ = tmp_dosage_snp_{1}{1};
tmp_dosage_al1_ = tmp_dosage_snp_{1}{2};
tmp_dosage_al2_ = tmp_dosage_snp_{1}{3};
assert(strcmp(tmp_dosage__id_,snp__id_{ns}{nsnp}));
assert(tmp_dosage_al1_==snp_al1_{ns}(nsnp));
assert(tmp_dosage_al2_==snp_al2_{ns}(nsnp));
tmp_length = sum(cellfun('length',tmp_dosage_snp_{1})) + length(tmp_dosage_snp_{1});
tmp_dosage_imputed_val_ = sscanf(tmp_line_(tmp_length:end),'%f');
assert(length(tmp_dosage_imputed_val_)/2==n_dosage_patient_(ns));
tmp_dosage_imputed_val_nor_ = tmp_dosage_imputed_val_(1:2:end-1);
tmp_dosage_imputed_val_xor_ = tmp_dosage_imputed_val_(2:2:end-0);
tmp_dosage_imputed_val_and_ = ones(n_dosage_patient_(ns),1) - tmp_dosage_imputed_val_nor_ - tmp_dosage_imputed_val_xor_;
tmp_dosage_imputed_val_nor_ = tmp_dosage_imputed_val_nor_(gud_keep_{ns});
tmp_dosage_imputed_val_xor_ = tmp_dosage_imputed_val_xor_(gud_keep_{ns});
tmp_dosage_imputed_val_and_ = tmp_dosage_imputed_val_and_(gud_keep_{ns});
tmp_dosage_rounded_val_nor_ = max(0,min(1,1 - round(1 - tmp_dosage_imputed_val_nor_)));
tmp_dosage_rounded_val_xor_ = max(0,min(1,0 - round(0 - tmp_dosage_imputed_val_xor_)));
tmp_dosage_rounded_val_and_ = ones(n_dosage_patient_keep_(ns),1) - tmp_dosage_rounded_val_nor_ - tmp_dosage_rounded_val_xor_;
n_and_{ns}(nsnp) = n_and_{ns}(nsnp) + sum(tmp_dosage_rounded_val_and_);
n_xor_{ns}(nsnp) = n_xor_{ns}(nsnp) + sum(tmp_dosage_rounded_val_xor_);
n_nor_{ns}(nsnp) = n_nor_{ns}(nsnp) + sum(tmp_dosage_rounded_val_nor_);
m_and_{ns} = m_and_{ns} + tmp_dosage_rounded_val_and_;
m_xor_{ns} = m_xor_{ns} + tmp_dosage_rounded_val_xor_;
m_nor_{ns} = m_nor_{ns} + tmp_dosage_rounded_val_nor_;
end;%for nsnp=1:n_snp_(ns);
fclose(fp_dsg_{ns});
%%%%%%%%;
% clean up. ;
%%%%%%%%;
if flag_local & n_study>1;
str_command = sprintf('rm -rf %s/%s',dir_tmp,study_dosage_name_{ns}); 
disp(str_command); system(str_command);
end;%if flag_local & n_study>1;
tmp_t = toc; disp(sprintf(' %% ns %d/%d: m_xxx_ and n_xxx_: time %0.2f',ns,n_study,tmp_t));
end;%for ns=1:n_study;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
disp(sprintf('%% ; '));
disp(sprintf('%% Calculating relative-entropy (i.e., KL-divergence) for each snp within study. ;'));
disp(sprintf('%% If we assume that a snp has minor allele frequency q and major allele frequency p, ;'));
disp(sprintf('%% then the distribution of (n_and,n_xor,n_nor) should be proportional to: ;'));
disp(sprintf('%% (p*p, 2*p*q, q*q), respectively. ;'));
disp(sprintf('%% If the true distribution is given by (frq_and,frq_xor,frq_nor) = (n_and,n_xor,n_nor)/n_dosage_patient_keep, ;'));
disp(sprintf('%% then the relative entropy between the true distribution and the expected distribution is: ;'));
disp(sprintf('%% I = frq_and*log(frq_and/p^2) + frq_xor*log(frq_xor/(2*p*q)) + frq_nor*log(frq_nor/q^2). ;'));
disp(sprintf('%% The derivative of I with respect to p is: ;'));
disp(sprintf('%% dI/dp = -2*frq_and/p - (q-p)*frq_xor/(p*q) + 2*frq_nor/q. ;'));
disp(sprintf('%% Setting this to 0, we see that the optimal p and q are given by: ;'));
disp(sprintf('%% 2*p*frq_nor - 2*q*frq_and = (q-p)*frq_xor, ;'));
disp(sprintf('%% p*(2*frq_nor+2*frq_and+2*frq_xor) = 2*frq_and + frq_xor, ;'));
disp(sprintf('%% or simply: ;'));
disp(sprintf('%% p_opt = frq_and + 0.5*frq_xor, '));
disp(sprintf('%% q_opt = frq_nor + 0.5*frq_xor. ,'));
disp(sprintf('%% I_opt = frq_and*log(frq_and/p_opt^2) + frq_xor*log(frq_xor/(2*p_opt*q_opt)) + frq_nor*log(frq_nor/q_opt^2). ;'));
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
for ns=1:n_study;
frq_and = n_and_{ns}/n_dosage_patient_keep_(ns); frq_xor = n_xor_{ns}/n_dosage_patient_keep_(ns); frq_nor = n_nor_{ns}/n_dosage_patient_keep_(ns);
p_opt_{ns} = frq_and + 0.5*frq_xor; q_opt_{ns} = frq_nor + 0.5*frq_xor;
I_opt_{ns} = frq_and.*log(frq_and./(p_opt_{ns}.^2)) + ...
             frq_xor.*log(frq_xor./(2*p_opt_{ns}.*q_opt_{ns})) + ...
             frq_nor.*log(frq_nor./(q_opt_{ns}.^2)) ;
disp(sprintf(' %% ns %d: [05 25 50 75 95] percentile: ',ns));
tmp = [prctile(p_opt_{ns}, 5) , prctile(p_opt_{ns},25) , prctile(p_opt_{ns},50) , prctile(p_opt_{ns},75) , prctile(p_opt_{ns},95) ] ; 
disp(sprintf(' %% p_opt_ [%0.2f,%0.2f,%0.2f,%0.2f,%0.2f]',tmp));
tmp = [prctile(q_opt_{ns}, 5) , prctile(q_opt_{ns},25) , prctile(q_opt_{ns},50) , prctile(q_opt_{ns},75) , prctile(q_opt_{ns},95) ] ; 
disp(sprintf(' %% q_opt_ [%0.2f,%0.2f,%0.2f,%0.2f,%0.2f]',tmp));
tmp = [prctile(I_opt_{ns}, 5) , prctile(I_opt_{ns},25) , prctile(I_opt_{ns},50) , prctile(I_opt_{ns},75) , prctile(I_opt_{ns},95) ] ; 
disp(sprintf(' %% I_opt_ [%0.2f,%0.2f,%0.2f,%0.2f,%0.2f]',tmp));
end;%for ns=1:n_study;


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
disp(sprintf('%% ; '));
disp(sprintf('%% Calculating p_opt_, q_opt_ and entropy I_opt_ for each snp across studies ;'));
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
n_and_tot_ = zeros(n_snp_cap,1); n_xor_tot_ = zeros(n_snp_cap,1); n_nor_tot_ = zeros(n_snp_cap,1); I_opt_max_ = zeros(n_snp_cap,1);
for ns=1:n_study; 
n_and_tot_ = n_and_tot_ + n_and_{ns}(snp_cap__{ns}); n_xor_tot_ = n_xor_tot_ + n_xor_{ns}(snp_cap__{ns}); n_nor_tot_ = n_nor_tot_ + n_nor_{ns}(snp_cap__{ns}); 
I_opt_max_ = max(I_opt_max_,I_opt_{ns}(snp_cap__{ns}));
end;%for ns=1:n_study;
frq_and_tot_ = n_and_tot_ / sum(n_dosage_patient_keep_); frq_xor_tot_ = n_xor_tot_ / sum(n_dosage_patient_keep_); frq_nor_tot_ = n_nor_tot_ / sum(n_dosage_patient_keep_); 
fr2_and_tot_ = frq_and_tot_; fr2_xor_tot_ = frq_xor_tot_; fr2_nor_tot_ = frq_nor_tot_; fr2_mode_ = zeros(n_snp_cap,1);
tmp_ij = find(frq_and_tot_ >frq_xor_tot_ & frq_and_tot_ >frq_nor_tot_); fr2_mode_(tmp_ij) = snp_and_tag;
tmp_ij = find(frq_xor_tot_>=frq_and_tot_ & frq_xor_tot_>=frq_nor_tot_); fr2_mode_(tmp_ij) = snp_xor_tag;
tmp_ij = find(frq_nor_tot_>=frq_and_tot_ & frq_nor_tot_ >frq_xor_tot_); fr2_mode_(tmp_ij) = snp_nor_tag;
clear tmp_ij;
p_opt_tot_ = fr2_and_tot_ + 0.5*fr2_xor_tot_;
q_opt_tot_ = fr2_nor_tot_ + 0.5*fr2_xor_tot_;
I_opt_tot_ = fr2_nor_tot_.*log(fr2_nor_tot_./(q_opt_tot_.^2)) ...
  + fr2_xor_tot_.*log(fr2_xor_tot_./(2*p_opt_tot_.*q_opt_tot_)) ...
  + fr2_and_tot_.*log(fr2_and_tot_./(p_opt_tot_.^2));
I_opt_tot_(find(fr2_nor_tot_==0))=0;
disp(sprintf(' %% all studies: [05 25 50 75 95] percentile: ',ns));
tmp = [prctile(p_opt_tot_, 5) , prctile(p_opt_tot_,25) , prctile(p_opt_tot_,50) , prctile(p_opt_tot_,75) , prctile(p_opt_tot_,95) ] ; 
disp(sprintf(' %% p_opt_tot_ [%0.2f,%0.2f,%0.2f,%0.2f,%0.2f]',tmp));
tmp = [prctile(q_opt_tot_, 5) , prctile(q_opt_tot_,25) , prctile(q_opt_tot_,50) , prctile(q_opt_tot_,75) , prctile(q_opt_tot_,95) ] ; 
disp(sprintf(' %% q_opt_tot_ [%0.2f,%0.2f,%0.2f,%0.2f,%0.2f]',tmp));
tmp = [prctile(I_opt_tot_, 5) , prctile(I_opt_tot_,25) , prctile(I_opt_tot_,50) , prctile(I_opt_tot_,75) , prctile(I_opt_tot_,95) ] ; 
disp(sprintf(' %% I_opt_tot_ [%0.2f,%0.2f,%0.2f,%0.2f,%0.2f]',tmp));

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
disp(sprintf('%% ; '));
disp(sprintf('%% Calculating subset of col-intersection which satisfies cutoffs. ; '));
disp(sprintf('%% This calculation does not involve patients which are excluded via famex. ; '));
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
snp_cap_sub_ = find(I_opt_tot_ < ent_cutoff & I_opt_max_ < ent_cutoff & min(p_opt_tot_,q_opt_tot_) > frq_cutoff ); n_snp_cap_sub = length(snp_cap_sub_);
disp(sprintf(' %% retaining %d/%d snps',length(snp_cap_sub_),n_snp_cap));
snp_cap_sub__ = cell(n_study,1);
for ns=1:n_study; snp_cap_sub__{ns} = snp_cap__{ns}(snp_cap_sub_); end;%for ns=1:n_study;
disp_flag=0;
if disp_flag;
figure;cla; 
for ns1=1:n_study;
for ns2=ns1+1:n_study;
subplot(1,2,1); hold on;
plot(1:n_snp_cap_sub,snp_pos_{ns1}(snp_cap_sub__{ns1}),'ro',1:n_snp_cap_sub,snp_pos_{ns2}(snp_cap_sub__{ns2}),'b.'); xlabel('snp index number'); ylabel('snp pos'); title('snp cij vs pos');
subplot(1,2,2); hold on;
plot(snp_pos_{ns1}(snp_cap_sub__{ns1}),snp_pos_{ns2}(snp_cap_sub__{ns2}),'.'); xlabel('snp pos'); ylabel('snp pos'); title('pos vs pos');
end;%for ns2=ns1+1:n_study;
end;%for ns1=1:n_study;
end;%if disp_flag;

brk=3; col_fr2 = n_study+1; col_srt = n_study+2; col_trs = n_study+3;
cij_index_array_ = zeros(3*n_snp_cap_sub,n_study+brk);
cij_and = 0*n_snp_cap_sub + transpose(1:n_snp_cap_sub);
cij_xor = 1*n_snp_cap_sub + transpose(1:n_snp_cap_sub);
cij_nor = 2*n_snp_cap_sub + transpose(1:n_snp_cap_sub);
for ns=1:n_study; 
cij_index_array_(cij_and,ns) = snp_cap_sub__{ns}; 
cij_index_array_(cij_xor,ns) = snp_cap_sub__{ns}; 
cij_index_array_(cij_nor,ns) = snp_cap_sub__{ns}; 
end;% for ns=1:n_study;
cij_index_array_(cij_and,col_fr2) = fr2_and_tot_(snp_cap_sub_);
cij_index_array_(cij_xor,col_fr2) = fr2_xor_tot_(snp_cap_sub_);
cij_index_array_(cij_nor,col_fr2) = fr2_nor_tot_(snp_cap_sub_);
[~,tmp_r] = sort(cij_index_array_(:,col_fr2),'ascend');
cij_index_array_(:,col_srt) = tmp_r;
[~,tmp_s] = sort(tmp_r,'ascend');
cij_index_array_(:,col_trs) = tmp_s;
cij_and_rpl_ = cij_index_array_(cij_and,col_trs);
cij_xor_rpl_ = cij_index_array_(cij_xor,col_trs);
cij_nor_rpl_ = cij_index_array_(cij_nor,col_trs);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
disp(sprintf('%% ; '));
disp(sprintf('%% Calculating subset of rows which satisfies cutoffs. ; '));
disp(sprintf('%% This calculation does involve all the snps when calculating missing fraction, ;'));
disp(sprintf('%% including those which have been excluded above. ; '));
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
rij_cap_ = cell(n_study,1);
n_rij_cap_ = zeros(n_study,1);
for ns=1:n_study; 
rij_cap_{ns} = guf_keep_{ns};
n_rij_cap_(ns) = length(rij_cap_{ns});
disp(sprintf(' %% ns %d: retaining %d/%d/%d patients',ns,n_rij_cap_(ns),n_dosage_patient_keep_(ns),n_patient_(ns)));
end;%for ns=1:n_study;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
disp(sprintf('%% ; '));
disp(sprintf('%% Grabbing mds_ components ; '));
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
nrows_T_full=0; ncols_Tn = 1 + size(mds_,2);
for ns=1:n_study;
tmp_fam_ = cell(n_rij_cap_(ns),1);
for np=1:n_rij_cap_(ns); 
tmp_fam_{np} = sprintf('%s%s%s',fam_{ns}{1}{rij_cap_{ns}(np)},'&',fam_{ns}{2}{rij_cap_{ns}(np)}); 
end;%for np=1:n_rij_cap_(ns);
[~,tmp_r,tmp_m] = intersect(tmp_fam_,mds_name_,'stable');
if length(tmp_r)<n_rij_cap_(ns); 
disp(sprintf(' %% Warning! ns %d, tmp_r length %d/%d',ns,length(tmp_r),n_rij_cap_(ns))); 
rij_cap_{ns} = rij_cap_{ns}(tmp_r);
else; disp(sprintf(' %% ns %d, tmp_r %d == n_rij_cap_(ns) %d',ns,length(tmp_r),n_rij_cap_(ns)));
end;%if length(tmp_r)<n_rij_cap_(ns); 
T_{ns} = mds_(tmp_m,:);
nrows_T_full = nrows_T_full + length(tmp_r);
end;%for ns=1:n_study;
T_full_ = zeros(nrows_T_full,size(mds_,2));
nrows_T_sum=0;
for ns=1:n_study;
T_full_(nrows_T_sum + (1:size(T_{ns},1)),1:size(T_{ns},2)) = T_{ns};
nrows_T_sum = nrows_T_sum + size(T_{ns},1);
end;%for ns=1:n_study;
T_med_ = median(T_full_);
T_full_ = T_full_ - repmat(T_med_,nrows_T_sum,1);
for ns=1:n_study;
T_{ns} = T_{ns} - repmat(T_med_,n_rij_cap_(ns),1);
end;%for ns=1:n_study;
mc_T = ones(ncols_Tn,1);
tmpchar = sprintf('%s/%smc_T.b16',dir_out,snp_pre); tutorial_binary_compress(bitj,mc_T(:)>0,tmpchar); 
tmpchar = sprintf('%s/%sT_full_n.b16',dir_out,snp_pre);tutorial_binary_compress(bitj,[ones(nrows_T_sum,1) , (T_full_>0)],tmpchar);
tmpchar = sprintf('%s/%sT_full_t.b16',dir_out,snp_pre);tutorial_binary_compress(bitj,transpose([ones(nrows_T_sum,1) , (T_full_>0)]),tmpchar);
for ns=1:n_study;
tmpchar = sprintf('%s/%sT_%.2d_n.b16',dir_out,snp_pre,ns);tutorial_binary_compress(bitj,[ones(n_rij_cap_(ns),1) , (T_{ns}>0)],tmpchar);
tmpchar = sprintf('%s/%sT_%.2d_t.b16',dir_out,snp_pre,ns);tutorial_binary_compress(bitj,transpose([ones(n_rij_cap_(ns),1) , (T_{ns}>0)]),tmpchar);
end;%for ns=1:n_study;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
disp(sprintf('%% ; '));
disp(sprintf('%% creating mds_m2rx ; '));
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
T_m2rz_med_ = transpose(adi_median(transpose(T_full_(:,1:2)),1e-9,1));
disp(sprintf('T_m2rz_med_: %0.6f,%0.6f',T_m2rz_med_));
T_m2rz_full_ = T_full_(:,1:2) - repmat(T_m2rz_med_,nrows_T_sum,1);
for ns=1:n_study;
T_m2rz_{ns} = T_{ns}(:,1:2) - repmat(T_m2rz_med_,n_rij_cap_(ns),1);
end;%for ns=1:n_study;
n_z=4;
for nz=1:n_z;
T_m2rx_full_ = zeros(size(T_m2rz_full_,1),size(T_m2rz_full_,2)*nz);
T_m2rx_full_(:,1:2) = T_m2rz_full_;
for ns=1:n_study;
T_m2rx_{ns} = zeros(size(T_m2rz_{ns},1),size(T_m2rz_{ns},2)*nz);
T_m2rx_{ns}(:,1:2) = T_m2rz_{ns};
end;%for ns=1:n_study;
w_tmp = pi/2/nz; R_tmp = [cos(w_tmp),+sin(w_tmp);-sin(w_tmp),cos(w_tmp)];
for nx=2:nz;
T_m2rx_full_(:,(1:2) + (nx-1)*2) = T_m2rx_full_(:,(1:2) + (nx-2)*2)*R_tmp;
for ns=1:n_study;
T_m2rx_{ns}(:,(1:2) + (nx-1)*2) = T_m2rx_{ns}(:,(1:2) + (nx-2)*2)*R_tmp;
end;%for ns=1:n_study;
end;%for nx=2:nz;
mc_T_m2rx = ones(1 + 2*nz,1);
tmpchar = sprintf('%s/%smc_T_m2r%d.b16',dir_out,snp_pre,nz); disp(sprintf(' %% Writing %s of size %d sum %d',tmpchar,length(mc_T_m2rx),sum(mc_T_m2rx>0))); tutorial_binary_compress(bitj,mc_T_m2rx(:)>0,tmpchar);
tmpchar = sprintf('%s/%sT_m2r%d_full_n.b16',dir_out,snp_pre,nz); disp(sprintf(' %% Writing %s of size %d-x%d',tmpchar,size(T_m2rx_full_,1),1+size(T_m2rx_full_,2))); tutorial_binary_compress(bitj,[ones(nrows_T_sum,1) , (T_m2rx_full_>0)],tmpchar);
tmpchar = sprintf('%s/%sT_m2r%d_full_t.b16',dir_out,snp_pre,nz); disp(sprintf(' %% Writing %s of size %d-x%d',tmpchar,1+size(T_m2rx_full_,2),size(T_m2rx_full_,1))); tutorial_binary_compress(bitj,transpose([ones(nrows_T_sum,1) , (T_m2rx_full_>0)]),tmpchar);
save(sprintf('%s/%sT_m2r%d_full_n.mat',dir_out,snp_pre,nz),'T_m2rz_med_','T_m2rz_full_','T_m2rx_full_','w_tmp','R_tmp');
for ns=1:n_study;
tmpchar = sprintf('%s/%sT_m2r%d_%.2d_n.b16',dir_out,snp_pre,nz,ns); disp(sprintf(' %% Writing %s of size %d-x%d',tmpchar,size(T_m2rx_{ns},1),1+size(T_m2rx_{ns},2))); tutorial_binary_compress(bitj,[ones(n_rij_cap_(ns),1) , (T_m2rx_{ns}>0)],tmpchar);
tmpchar = sprintf('%s/%sT_m2r%d_%.2d_t.b16',dir_out,snp_pre,nz,ns); disp(sprintf(' %% Writing %s of size %d-x%d',tmpchar,1+size(T_m2rx_{ns},2),size(T_m2rx_{ns},1))); tutorial_binary_compress(bitj,transpose([ones(n_rij_cap_(ns),1) , (T_m2rx_{ns}>0)]),tmpchar);
end;%for ns=1:n_study;
save(sprintf('%s/%sT_m2r%d_xx_n.mat',dir_out,snp_pre,nz),'T_m2rz_med_','T_m2rz_','T_m2rx_','w_tmp','R_tmp');
tmp_M = size(T_m2rz_full_,1); tmp_NT = size(T_m2rx_full_,2);
tmp_b_ = 2*(T_m2rx_full_>0)-1;
tmp_d = sum(sum(tmp_b_(:,:),1).^2)/(tmp_M*tmp_M*tmp_NT);
tmp_c_ = zeros(tmp_M,1);
for nr=1:tmp_M;
u_ = T_m2rz_full_(nr,:); u_ = u_/norm(u_);
tmp_ij = find((T_m2rz_full_*transpose(u_))>0); tmp_m = length(tmp_ij);
tmp_c_(nr) = sum(sum(tmp_b_(tmp_ij,:),1).^2)/(tmp_m*tmp_m*tmp_NT);
end;%for nr=1:tmp_M;
tmpchar = sprintf('%s/%sT_m2r%d_kappa.txt',dir_out,snp_pre,nz);
tmp_fp = fopen(tmpchar,'w'); fprintf(tmp_fp,'%0.16f\n',mean(tmp_c_)); fclose(tmp_fp);
disp(sprintf(' %% nx %d: kappa^2 = %0.6f (versus %0.6f) --> writing to %s',nz,mean(tmp_c_),tmp_d,tmpchar));
end;%for nz=1:n_z;

if flag_stop>2;
disp('returning at line 454'); return; 
end;%if flag_stop>2;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
disp(sprintf('%% ; '));
disp(sprintf('%% defining ncols_An, nrows_An_ and nrows_A_n_full_ ;'));
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%ncols_An = 2*n_snp_cap_sub; 
ncols_An = 3*n_snp_cap_sub; 
ncols_An_extend = mod(bitj - mod(ncols_An,bitj),bitj); lcols_An = (ncols_An + ncols_An_extend)/bit8;
nrows_An_ = zeros(1,n_study);
for ns=1:n_study;
nrows_An_(ns) = n_rij_cap_(ns); nrows_An_extend_(ns) = mod(bitj - mod(nrows_An_(ns),bitj),bitj); lrows_An_(ns) = (nrows_An_(ns) + nrows_An_extend_(ns))/bit8;
disp(sprintf(' %% nrows_An_(%d): %d',ns,nrows_An_(ns)));
end;%for ns=1:n_study;
nrows_An_full = sum(nrows_An_); nrows_An_full_extend = mod(bitj - mod(nrows_An_full,bitj),bitj); lrows_An_full = (nrows_An_full + nrows_An_full_extend)/bit8;
disp(sprintf(' %% nrows_An_full: %d',nrows_An_full));
nrows_An_csum_ = cumsum([0,nrows_An_]);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
disp(sprintf('%% ; '));
disp(sprintf('%% Writing extended bim and fam files (i.e., bim.ex2 and fam.ex2). ; '));
disp(sprintf('%% ; '));
disp(sprintf('%% Bim: ; '));
disp(sprintf('%% This has the same structure as a typical bim file, ; '));
disp(sprintf('%% with four extra fields. ; '));
disp(sprintf('%% field 3+1: allele type. ; '));
disp(sprintf('%% field 3+2: total relative entropy across (nonexcluded) patients. ; '));
disp(sprintf('%% field 3+3: frequency of allele type (i.e., sparsity of column). ; '));
disp(sprintf('%% field 3+4: minor-allele-frequency of that snp. ; '));
disp(sprintf('%% Moreover, the allele-ordering should be sorted in terms of column-sparsity. ; '));
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if flag_bim;
tmp_bim_ = cell(3 + 5);
tmp_bim_{ 1} = cell(ncols_An,1);
tmp_bim_{ 2} = zeros(ncols_An,1);
tmp_bim_{ 3} = zeros(ncols_An,1);
tmp_bim_{ 4} = cell(ncols_An,1);
tmp_bim_{ 5} = zeros(ncols_An,1);
tmp_bim_{ 6} = zeros(ncols_An,1);
tmp_bim_{ 7} = zeros(ncols_An,1);
for nl3=1:n_snp_cap_sub; 
nl2 = snp_cap_sub_(nl3);
ns=1; nla = snp_cap_sub__{ns}(nl3); nlb = snp_cap__{ns}(nl2); assert(nla==nlb); nl1=nla;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
tmp_bim_{ 1}(cij_and_rpl_(nl3)) = snp__id_{ns}(nl1);
tmp_bim_{ 2}(cij_and_rpl_(nl3)) = snp_al1_{ns}(nl1);
tmp_bim_{ 3}(cij_and_rpl_(nl3)) = snp_al2_{ns}(nl1);
tmp_bim_{ 4}(cij_and_rpl_(nl3)) = {'and'};
tmp_bim_{ 5}(cij_and_rpl_(nl3)) = I_opt_tot_(nl2);
tmp_bim_{ 6}(cij_and_rpl_(nl3)) = fr2_and_tot_(nl2);
tmp_bim_{ 7}(cij_and_rpl_(nl3)) = min(p_opt_tot_(nl2),q_opt_tot_(nl2));
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
tmp_bim_{ 1}(cij_xor_rpl_(nl3)) = snp__id_{ns}(nl1);
tmp_bim_{ 2}(cij_xor_rpl_(nl3)) = snp_al1_{ns}(nl1);
tmp_bim_{ 3}(cij_xor_rpl_(nl3)) = snp_al2_{ns}(nl1);
tmp_bim_{ 4}(cij_xor_rpl_(nl3)) = {'xor'};
tmp_bim_{ 5}(cij_xor_rpl_(nl3)) = I_opt_tot_(nl2);
tmp_bim_{ 6}(cij_xor_rpl_(nl3)) = fr2_xor_tot_(nl2);
tmp_bim_{ 7}(cij_xor_rpl_(nl3)) = min(p_opt_tot_(nl2),q_opt_tot_(nl2));
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
tmp_bim_{ 1}(cij_nor_rpl_(nl3)) = snp__id_{ns}(nl1);
tmp_bim_{ 2}(cij_nor_rpl_(nl3)) = snp_al1_{ns}(nl1);
tmp_bim_{ 3}(cij_nor_rpl_(nl3)) = snp_al2_{ns}(nl1);
tmp_bim_{ 4}(cij_nor_rpl_(nl3)) = {'nor'};
tmp_bim_{ 5}(cij_nor_rpl_(nl3)) = I_opt_tot_(nl2);
tmp_bim_{ 6}(cij_nor_rpl_(nl3)) = fr2_nor_tot_(nl2);
tmp_bim_{ 7}(cij_nor_rpl_(nl3)) = min(p_opt_tot_(nl2),q_opt_tot_(nl2));
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%;
end;%for nl3=1:n_snp_cap_sub;
tmpchar = sprintf('%s/%sbim.ex2',dir_out,snp_pre);
fid = fopen(tmpchar,'w');
for nc=1:ncols_An;
fprintf(fid,'%s\t%s\t%s\t%s\t%f\t%f\t%f\n',tmp_bim_{ 1}{nc},tmp_bim_{ 2}(nc),tmp_bim_{ 3}(nc),tmp_bim_{ 4}{nc},tmp_bim_{ 5}(nc),tmp_bim_{ 6}(nc),tmp_bim_{ 7}(nc));
end;%for nc=1:ncols_An;
fclose(fid);
end;% if flag_bim;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
disp(sprintf('%% ; '));
disp(sprintf('%% Fam: ; '));
disp(sprintf('%% This has the same structure as a typical fam file, ; '));
disp(sprintf('%% with one extra field. ; '));
disp(sprintf('%% field 6+1: directory and filename from which fam file was drawn . ; '));
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if flag_fam;
tmp_fam = cell(6 + 1);
tmp_fam{1} = cell(nrows_An_full,1);
tmp_fam{2} = cell(nrows_An_full,1);
tmp_fam{3} = cell(nrows_An_full,1);
tmp_fam{4} = cell(nrows_An_full,1);
tmp_fam{5} = zeros(nrows_An_full,1);
tmp_fam{6} = zeros(nrows_An_full,1);
tmp_fam{7} = cell(nrows_An_full,1);
nr=1;
for ns=1:n_study;
for np2=1:nrows_An_(ns);
np1 = rij_cap_{ns}(np2);
tmp_fam{1}(nr) = fam_{ns}{1}(np1);
tmp_fam{2}(nr) = fam_{ns}{2}(np1);
tmp_fam{3}(nr) = fam_{ns}{3}(np1);
tmp_fam{4}(nr) = fam_{ns}{4}(np1);
tmp_fam{5}(nr) = fam_{ns}{5}(np1);
tmp_fam{6}(nr) = fam_{ns}{6}(np1);
tmp_fam{7}(nr) = {sprintf('%s',study_fam_name_{ns})};
nr = nr+1;
end;%for np2=1:nrows_An_(ns);
end;%for ns=1:n_study;
tmpchar = sprintf('%s/%sfam.ex2',dir_out,snp_pre);
fid = fopen(tmpchar,'w');
for nr=1:nrows_An_full;
fprintf(fid,'%s\t%s\t%s\t%s\t%d\t%d\t%s\n',tmp_fam{1}{nr},tmp_fam{2}{nr},tmp_fam{3}{nr},tmp_fam{4}{nr},tmp_fam{5}(nr),tmp_fam{6}(nr),tmp_fam{7}{nr});
end;%for nr=1:nrows_An_full;
fclose(fid);
end;%if flag_fam;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
disp(sprintf('%% ; '));
disp(sprintf('%% Writing mc and mr masks ; '));
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
mc_A = ones(ncols_An,1);
tmpchar = sprintf('%s/%smc_A.b16',dir_out,snp_pre); tutorial_binary_compress(bitj,mc_A(:)>0,tmpchar); 
mr_A_full = zeros(nrows_An_full,1); mr_Z_full = zeros(nrows_An_full,1); 
for ns=1:n_study;
mr_A_{ns} = zeros(nrows_An_(ns),1); mr_Z_{ns} = zeros(nrows_An_(ns),1);
tmp_ij = find(fam_{ns}{6}(rij_cap_{ns})==case_tag);
mr_A_{ns}(tmp_ij) = 1; mr_A_full(nrows_An_csum_(ns) + tmp_ij) = 1;
tmp_ij = find(fam_{ns}{6}(rij_cap_{ns})==ctrl_tag);
mr_Z_{ns}(tmp_ij) = 1; mr_Z_full(nrows_An_csum_(ns) + tmp_ij) = 1;
end;%for ns=1:n_study;
tmpchar = sprintf('%s/%smr_A_full.b16',dir_out,snp_pre);disp(sprintf(' %% Writing %s of size %d sum %d',tmpchar,length(mr_A_full),sum(mr_A_full>0)));tutorial_binary_compress(bitj,mr_A_full(:)>0,tmpchar); pause(1);
tmpchar = sprintf('%s/%smr_Z_full.b16',dir_out,snp_pre);disp(sprintf(' %% Writing %s of size %d sum %d',tmpchar,length(mr_Z_full),sum(mr_Z_full>0)));tutorial_binary_compress(bitj,mr_Z_full(:)>0,tmpchar); pause(1);
for ns=1:n_study;
tmpchar = sprintf('%s/%smr_A_%.2d.b16',dir_out,snp_pre,ns);disp(sprintf(' %% Writing %s of size %d sum %d',tmpchar,length(mr_A_{ns}),sum(mr_A_{ns}>0)));tutorial_binary_compress(bitj,mr_A_{ns}(:)>0,tmpchar); pause(1);
tmpchar = sprintf('%s/%smr_Z_%.2d.b16',dir_out,snp_pre,ns);disp(sprintf(' %% Writing %s of size %d sum %d',tmpchar,length(mr_Z_{ns}),sum(mr_Z_{ns}>0)));tutorial_binary_compress(bitj,mr_Z_{ns}(:)>0,tmpchar); pause(1);
end;%for ns=1:n_study;

if flag_stop>1;
disp('returning at line 619'); return; 
end;%if flag_stop>1;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
disp(sprintf('%% ; '));
disp(sprintf('%% Initializing An_ and At_ ;'));
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
clear A_n_ A_n_full A_t_ A_t_full;
An_full = zeros(lrows_An_full,ncols_An,'uint8');
At_full = zeros(lcols_An,nrows_An_full,'uint8');
for ns=1:n_study;
An_{ns} = zeros(lrows_An_(ns),ncols_An,'uint8');
At_{ns} = zeros(lcols_An,nrows_An_(ns),'uint8');
end;%for ns=1:n_study;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
disp(sprintf('%% ; '));
disp(sprintf('%% Writing An_ and At_ ; '));
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
for ns=1:n_study;
disp(sprintf(' %% ns %d: %s',ns,study_dosage_name_{ns}));
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% reading bed file (binarized snp data) ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
ver_flag=0;
if ver_flag==0;
disp(sprintf(' %% version 0: simultaneous read (assuming more than 8G of ram)... '));tic;
%uchar_11111111 = zeros(n_snp_(ns),n_dosage_patient_rup_(ns),'uint8');
uchar_11111111 = zeros(n_dosage_patient_rup_(ns),n_snp_(ns),'uint8');
stride1_ = 1:4:n_dosage_patient_(ns);
stride2_ = 2:4:n_dosage_patient_(ns);
stride3_ = 3:4:n_dosage_patient_(ns);
stride4_ = 4:4:n_dosage_patient_(ns);
tmp_00000011 = cast(bin2dec('00000011'),'uint8'); tmp_00001100 = cast(bin2dec('00001100'),'uint8'); tmp_00110000 = cast(bin2dec('00110000'),'uint8'); tmp_11000000 = cast(bin2dec('11000000'),'uint8');
tmp_00000010 = cast(bin2dec('00000010'),'uint8'); tmp_00001000 = cast(bin2dec('00001000'),'uint8'); tmp_00100000 = cast(bin2dec('00100000'),'uint8'); tmp_10000000 = cast(bin2dec('10000000'),'uint8');
tmp_00000001 = cast(bin2dec('00000001'),'uint8'); tmp_00000100 = cast(bin2dec('00000100'),'uint8'); tmp_00010000 = cast(bin2dec('00010000'),'uint8'); tmp_01000000 = cast(bin2dec('01000000'),'uint8');
tmp_00000000 = cast(bin2dec('00000000'),'uint8'); tmp_00000000 = cast(bin2dec('00000000'),'uint8'); tmp_00000000 = cast(bin2dec('00000000'),'uint8'); tmp_00000000 = cast(bin2dec('00000000'),'uint8');
tic;
%%%%%%%%;
% open file. ;
%%%%%%%%;
if flag_local & n_study>1;
str_command = sprintf('gunzip -c %s/%s.gz > %s/%s',study_dosage_trunk_{ns},study_dosage_name_{ns},dir_tmp,study_dosage_name_{ns}); 
disp(str_command); system(str_command);
end;%if flag_local & n_study>1;
%%%%%%%%;
fn_dsg_{ns} = sprintf('%s/%s',dir_tmp,study_dosage_name_{ns});
fp_dsg_{ns} = fopen(fn_dsg_{ns}); 
tmp_line_ = fgetl(fp_dsg_{ns}); %<-- skip header line. ;
for nsnp=1:n_snp_(ns);
if (mod(nsnp,10000)==0); disp(sprintf(' %% ns %d/%d nsnp %d/%d',ns,n_study,nsnp,n_snp_(ns))); end;
tmp_line_ = fgetl(fp_dsg_{ns});
tmp_dosage_snp_ = textscan(tmp_line_,'%s',3);
tmp_dosage__id_ = tmp_dosage_snp_{1}{1};
tmp_dosage_al1_ = tmp_dosage_snp_{1}{2};
tmp_dosage_al2_ = tmp_dosage_snp_{1}{3};
assert(strcmp(tmp_dosage__id_,snp__id_{ns}{nsnp}));
assert(tmp_dosage_al1_==snp_al1_{ns}(nsnp));
assert(tmp_dosage_al2_==snp_al2_{ns}(nsnp));
tmp_length = sum(cellfun('length',tmp_dosage_snp_{1})) + length(tmp_dosage_snp_{1});
tmp_dosage_imputed_val_ = sscanf(tmp_line_(tmp_length:end),'%f');
assert(length(tmp_dosage_imputed_val_)/2==n_dosage_patient_(ns));
tmp_dosage_imputed_val_nor_ = tmp_dosage_imputed_val_(1:2:end-1);
tmp_dosage_imputed_val_xor_ = tmp_dosage_imputed_val_(2:2:end-0);
tmp_dosage_imputed_val_and_ = ones(n_dosage_patient_(ns),1) - tmp_dosage_imputed_val_nor_ - tmp_dosage_imputed_val_xor_;
tmp_dosage_rounded_val_nor_ = max(0,min(1,1 - round(1 - tmp_dosage_imputed_val_nor_)));
tmp_dosage_rounded_val_xor_ = max(0,min(1,0 - round(0 - tmp_dosage_imputed_val_xor_)));
tmp_dosage_rounded_val_and_ = ones(n_dosage_patient_(ns),1) - tmp_dosage_rounded_val_nor_ - tmp_dosage_rounded_val_xor_;
tmp_uchar_ = zeros(n_dosage_patient_rup_(ns),1,'uint8');
tmp_nor_ = cast(tmp_dosage_rounded_val_nor_,'uint8');
tmp_xor_ = cast(tmp_dosage_rounded_val_xor_,'uint8');
tmp_and_ = cast(tmp_dosage_rounded_val_and_,'uint8');
tmp_uchar_(1:length(stride1_)) = tmp_uchar_(1:length(stride1_)) + tmp_nor_(stride1_)*tmp_00000000 + tmp_xor_(stride1_)*tmp_00000010 + tmp_and_(stride1_)*tmp_00000011 ;
tmp_uchar_(1:length(stride2_)) = tmp_uchar_(1:length(stride2_)) + tmp_nor_(stride2_)*tmp_00000000 + tmp_xor_(stride2_)*tmp_00001000 + tmp_and_(stride2_)*tmp_00001100 ;
tmp_uchar_(1:length(stride3_)) = tmp_uchar_(1:length(stride3_)) + tmp_nor_(stride3_)*tmp_00000000 + tmp_xor_(stride3_)*tmp_00100000 + tmp_and_(stride3_)*tmp_00110000 ;
tmp_uchar_(1:length(stride4_)) = tmp_uchar_(1:length(stride4_)) + tmp_nor_(stride4_)*tmp_00000000 + tmp_xor_(stride4_)*tmp_10000000 + tmp_and_(stride4_)*tmp_11000000 ;
%uchar_11111111(nsnp,:) = transpose(tmp_uchar_);
uchar_11111111(:,nsnp) = tmp_uchar_;
end;%for nsnp=1:n_snp_(ns);
fclose(fp_dsg_{ns});
%%%%%%%%;
% final clean up. ;
%%%%%%%%;
if flag_local & n_study>0;
str_command = sprintf('rm -rf %s/%s',dir_tmp,study_dosage_name_{ns}); 
disp(str_command); system(str_command);
end;%if flag_local & n_study>0;
%%%%%%%%;
uchar_11111111 = transpose(uchar_11111111);
tmp_t = toc; disp(sprintf(' %% ns %d/%d: uchar_11111111: time %0.2f',ns,n_study,tmp_t));
disp(sprintf(' %% reading 4 allele pairs per byte... ')); tic;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
% these commands use mod, which is very slow. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
%uchar_00000011 = mod(uchar_11111111,  4);
%uchar_00001111 = mod(uchar_11111111, 16); uchar_00001100 = idivide(uchar_00001111 - uchar_00000011, 4) ; 
%uchar_00111111 = mod(uchar_11111111, 64); uchar_00110000 = idivide(uchar_00111111 - uchar_00001111,16) ; clear uchar_00001111;
%                                          uchar_11000000 = idivide(uchar_11111111 - uchar_00111111,64) ; clear uchar_00111111;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
% these commands use bitshifts, which are much faster. ;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
uchar_00000011 = bitshift(bitshift(uchar_11111111,+6),-6);
uchar_00001100 = bitshift(bitshift(bitshift(uchar_11111111,-2),+6),-6);
uchar_00110000 = bitshift(bitshift(bitshift(uchar_11111111,-4),+6),-6);
uchar_11000000 = bitshift(uchar_11111111,-6);
clear uchar_11111111;
stride1 = 1:4:4*n_dosage_patient_rup_(ns); [~,tmp_ij] = setdiff(stride1,gud_keep_{ns},'stable'); uchar_00000011(:,tmp_ij)=snp_not_tag; clear tmp_ij;
stride2 = 2:4:4*n_dosage_patient_rup_(ns); [~,tmp_ij] = setdiff(stride2,gud_keep_{ns},'stable'); uchar_00001100(:,tmp_ij)=snp_not_tag; clear tmp_ij;
stride3 = 3:4:4*n_dosage_patient_rup_(ns); [~,tmp_ij] = setdiff(stride3,gud_keep_{ns},'stable'); uchar_00110000(:,tmp_ij)=snp_not_tag; clear tmp_ij;
stride4 = 4:4:4*n_dosage_patient_rup_(ns); [~,tmp_ij] = setdiff(stride4,gud_keep_{ns},'stable'); uchar_11000000(:,tmp_ij)=snp_not_tag; clear tmp_ij;
disp(sprintf(' %% writing binary files... ')); t_start = tic; t_sub = tic;
br_u = zeros(1,bit8,'uint8'); br_u = cast(2.^(bit8-1:-1:0),'uint8');
br_d = zeros(1,bit8,'double'); br_d = cast(2.^(bit8-1:-1:0),'double');
for nl3=1:n_snp_cap_sub; 
bl3_and = 1+mod((cij_and_rpl_(nl3)-1),bit8); al3_and = 1+floor((cij_and_rpl_(nl3)-1)/bit8); cl3_and = 1+(cij_and_rpl_(nl3)-1);
bl3_xor = 1+mod((cij_xor_rpl_(nl3)-1),bit8); al3_xor = 1+floor((cij_xor_rpl_(nl3)-1)/bit8); cl3_xor = 1+(cij_xor_rpl_(nl3)-1);
bl3_nor = 1+mod((cij_nor_rpl_(nl3)-1),bit8); al3_nor = 1+floor((cij_nor_rpl_(nl3)-1)/bit8); cl3_nor = 1+(cij_nor_rpl_(nl3)-1);
nl2 = snp_cap_sub_(nl3);
nla = snp_cap_sub__{ns}(nl3); nlb = snp_cap__{ns}(nl2); assert(nla==nlb); nl1=nla;
if (mod(nl3,10000)==0); 
t_tmp = toc(t_sub); t_tot_tmp = t_tmp/nl3*n_snp_cap_sub; 
disp(sprintf(' %% nl3 %d/%d nl2 %d/%d nl1 %d/%d; time %0.2f seconds; estimated total time %0.2f seconds (%0.2f hours)',nl3,n_snp_cap_sub,nl2,n_snp_cap,nl1,n_snp_(ns),t_tmp,t_tot_tmp,t_tot_tmp/3600)); 
end;%if (mod(nl3,10000)==0); 
data_snp = zeros(1,4*n_dosage_patient_rup_(ns));
data_snp(stride1) = uchar_00000011(nl1,:);
data_snp(stride2) = uchar_00001100(nl1,:);
data_snp(stride3) = uchar_00110000(nl1,:);
data_snp(stride4) = uchar_11000000(nl1,:);
data_snp = data_snp(1,1:n_dosage_patient_(ns));
tmp_ij = find(data_snp==snp_mss_tag); data_snp(1,tmp_ij) = fr2_mode_(nl2); clear tmp_ij;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
data_snp_and = (data_snp==snp_and_tag) ; 
data_snp_and_sub = data_snp_and(1,gud_keep_{ns}); data_snp_and_bin_u = cast(data_snp_and_sub(1,:),'uint8');
data_snp_and_sub_full = zeros(1,nrows_An_full); data_snp_and_sub_full(1,nrows_An_csum_(ns) + (1:nrows_An_(ns))) = data_snp_and_sub;
data_snp_and_bin_d = cast(data_snp_and_sub(1,:),'double'); 
data_snp_and_full_bin_d = cast(data_snp_and_sub_full(1,:),'double'); 
An_full(1:lrows_An_full,cl3_and) = An_full(1:lrows_An_full,cl3_and) + cast(transpose(br_d*reshape([data_snp_and_full_bin_d,zeros(1,nrows_An_full_extend)],bit8,lrows_An_full)),'uint8');
At_full(al3_and,nrows_An_csum_(ns) + (1:nrows_An_(ns))) = At_full(al3_and,nrows_An_csum_(ns) + (1:nrows_An_(ns))) + br_u(bl3_and)*data_snp_and_bin_u;
An_{ns}(1:lrows_An_(ns),cl3_and) = An_{ns}(1:lrows_An_(ns),cl3_and) + cast(transpose(br_d*reshape([data_snp_and_bin_d,zeros(1,nrows_An_extend_(ns))],bit8,lrows_An_(ns))),'uint8');
At_{ns}(al3_and,(1:nrows_An_(ns))) = At_{ns}(al3_and,(1:nrows_An_(ns))) + br_u(bl3_and)*data_snp_and_bin_u;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
%data_snp_xor = (data_snp==snp_and_tag) | (data_snp==snp_xor_tag) ;
data_snp_xor = (data_snp==snp_xor_tag) ;
data_snp_xor_sub = data_snp_xor(1,gud_keep_{ns}); data_snp_xor_bin_u = cast(data_snp_xor_sub(1,:),'uint8');
data_snp_xor_sub_full = zeros(1,nrows_An_full); data_snp_xor_sub_full(1,nrows_An_csum_(ns) + (1:nrows_An_(ns))) = data_snp_xor_sub;
data_snp_xor_bin_d = cast(data_snp_xor_sub(1,:),'double'); 
data_snp_xor_full_bin_d = cast(data_snp_xor_sub_full(1,:),'double'); 
An_full(1:lrows_An_full,cl3_xor) = An_full(1:lrows_An_full,cl3_xor) + cast(transpose(br_d*reshape([data_snp_xor_full_bin_d,zeros(1,nrows_An_full_extend)],bit8,lrows_An_full)),'uint8');
At_full(al3_xor,nrows_An_csum_(ns) + (1:nrows_An_(ns))) = At_full(al3_xor,nrows_An_csum_(ns) + (1:nrows_An_(ns))) + br_u(bl3_xor)*data_snp_xor_bin_u;
An_{ns}(1:lrows_An_(ns),cl3_xor) = An_{ns}(1:lrows_An_(ns),cl3_xor) + cast(transpose(br_d*reshape([data_snp_xor_bin_d,zeros(1,nrows_An_extend_(ns))],bit8,lrows_An_(ns))),'uint8');
At_{ns}(al3_xor,(1:nrows_An_(ns))) = At_{ns}(al3_xor,(1:nrows_An_(ns))) + br_u(bl3_xor)*data_snp_xor_bin_u;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
data_snp_nor = (data_snp==snp_nor_tag) ;
data_snp_nor_sub = data_snp_nor(1,gud_keep_{ns}); data_snp_nor_bin_u = cast(data_snp_nor_sub(1,:),'uint8');
data_snp_nor_sub_full = zeros(1,nrows_An_full); data_snp_nor_sub_full(1,nrows_An_csum_(ns) + (1:nrows_An_(ns))) = data_snp_nor_sub;
data_snp_nor_bin_d = cast(data_snp_nor_sub(1,:),'double'); 
data_snp_nor_full_bin_d = cast(data_snp_nor_sub_full(1,:),'double'); 
An_full(1:lrows_An_full,cl3_nor) = An_full(1:lrows_An_full,cl3_nor) + cast(transpose(br_d*reshape([data_snp_nor_full_bin_d,zeros(1,nrows_An_full_extend)],bit8,lrows_An_full)),'uint8');
At_full(al3_nor,nrows_An_csum_(ns) + (1:nrows_An_(ns))) = At_full(al3_nor,nrows_An_csum_(ns) + (1:nrows_An_(ns))) + br_u(bl3_nor)*data_snp_nor_bin_u;
An_{ns}(1:lrows_An_(ns),cl3_nor) = An_{ns}(1:lrows_An_(ns),cl3_nor) + cast(transpose(br_d*reshape([data_snp_nor_bin_d,zeros(1,nrows_An_extend_(ns))],bit8,lrows_An_(ns))),'uint8');
At_{ns}(al3_nor,(1:nrows_An_(ns))) = At_{ns}(al3_nor,(1:nrows_An_(ns))) + br_u(bl3_nor)*data_snp_nor_bin_u;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ;
end;%for nl3=1:n_snp_cap_sub;
t_tmp = toc(t_start); disp(sprintf(' %% bin: time %0.2f seconds',t_tmp)); 
clear uchar_00000011;clear uchar_00001100;clear uchar_00110000;clear uchar_11000000;
clear stride1 stride2 stride3 stride4;
end;%if ver_flag==0;
end;%for ns=1:n_study;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
disp(sprintf('%% ; '));
disp(sprintf('%% writing A_n.b16 and A_t.b16 ; '));
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
tic;
tmpAnchar = sprintf('%s/%sA_full_n.b16',dir_out,snp_pre);
fid = fopen(tmpAnchar,'w');
fwrite(fid,bitj,'int');
fwrite(fid,nrows_An_full,'int');
fwrite(fid,ncols_An,'int');
fwrite(fid,An_full(:),'uint8');
fclose(fid);
tmpAtchar = sprintf('%s/%sA_full_t.b16',dir_out,snp_pre);
fid = fopen(tmpAtchar,'w');
fwrite(fid,bitj,'int');
fwrite(fid,ncols_An,'int');
fwrite(fid,nrows_An_full,'int');
fwrite(fid,At_full(:),'uint8');
fclose(fid);
for ns=1:n_study;
tmpAnchar = sprintf('%s/%sA_%.2d_n.b16',dir_out,snp_pre,ns);
fid = fopen(tmpAnchar,'w');
fwrite(fid,bitj,'int');
fwrite(fid,nrows_An_(ns),'int');
fwrite(fid,ncols_An,'int');
fwrite(fid,An_{ns}(:),'uint8');
fclose(fid);
tmpAtchar = sprintf('%s/%sA_%.2d_t.b16',dir_out,snp_pre,ns);
fid = fopen(tmpAtchar,'w');
fwrite(fid,bitj,'int');
fwrite(fid,ncols_An,'int');
fwrite(fid,nrows_An_(ns),'int');
fwrite(fid,At_{ns}(:),'uint8');
fclose(fid);
end;%for ns=1:n_study;
t_tmp = toc; disp(sprintf(' %% b16: time %0.2f seconds',t_tmp)); 

flag_check = (flag_local==0);
if flag_check;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
disp(sprintf('%% checking .b16 files for consistency ;'));
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
tmpAnchar = sprintf('%s/%sA_full_n.b16',dir_out,snp_pre);
Bn_full = tutorial_binary_uncompress(tmpAnchar,1:nrows_An_full,1:ncols_An);
tmpAtchar = sprintf('%s/%sA_full_t.b16',dir_out,snp_pre);
Bt_full = tutorial_binary_uncompress(tmpAtchar,1:ncols_An,1:nrows_An_full);
disp(sprintf(' %% ns all: size %d-x-%d, error %f',size(Bn_full),norm(Bn_full-transpose(Bt_full))));
disp_flag=0;
if disp_flag;
subplot(1,2,1);imagesc(Bn_full,[-1,1]); subplot(1,2,2);imagesc(transpose(Bt_full),[-1,1]);
print('-djpeg',sprintf('%s/%sA_full_x.jpg',dir_out,snp_pre));
end;%if disp_flag;
for ns=1:n_study;
tmpAnchar = sprintf('%s/%sA_%.2d_n.b16',dir_out,snp_pre,ns);
Bn_{ns} = tutorial_binary_uncompress(tmpAnchar,1:nrows_An_(ns),1:ncols_An);
tmpAtchar = sprintf('%s/%sA_%.2d_t.b16',dir_out,snp_pre,ns);
Bt_{ns} = tutorial_binary_uncompress(tmpAtchar,1:ncols_An,1:nrows_An_(ns));
disp(sprintf(' %% ns %d: size %d-x-%d, error %f',ns,size(Bn_{ns}),norm(Bn_{ns}-transpose(Bt_{ns}))));
disp_flag=0;
if disp_flag;
subplot(1,2,1);imagesc(Bn_{ns},[-1,1]); subplot(1,2,2);imagesc(transpose(Bt_{ns}),[-1,1]);
print('-djpeg',sprintf('%s/%sA_%.2d_x.jpg',dir_out,snp_pre,ns));
end;%if disp_flag;
end;%for ns=1:n_study;
end;%if flag_check;






