function test_svd_impute_0(n_rank);
% for n_rank = 2.^(0:8); test_svd_impute_0(n_rank); end;

flag_plot=1;
if flag_plot;
% Demonstrate spectrally consistent imputation with a low-dimensional example. ;
rng(0);
n_row = 2; n_col_sub = 1024; n_col = 3*n_col_sub; n_dim = min(n_row,n_col); omega = pi/4;
A_n_ = randn(n_row,n_col); [U_A_n_,S_A_n_,V_A_n_] = svds(A_n_,n_dim);
U_A_n_ = [cos(omega) , -sin(omega) ; +sin(omega) , cos(omega)];
S_A_n_ = diag(S_A_n_); S_A_n_(2:end) = 0.25*S_A_n_(2:end);
A_n_ = U_A_n_*diag(S_A_n_)*transpose(V_A_n_);
B_n_ = A_n_;
% Now with half missing at random, 0.25 will be all zero, which we ignore, leaving 1/3 for each other case. ;
for ncol=0:n_col_sub-1;
B_n_(1+0,1+ncol+0*n_col_sub) = 0; %<-- first third missing row 0. ;
B_n_(1+1,1+ncol+1*n_col_sub) = 0; %<-- second third missing row 1. ;
end;%for ncol=0:n_col_sub-1;
index_missed_ = efind(B_n_==0);
[C_svd_imp_,C_svd_fit_] = svd_impute_fit_3(B_n_,1+index_missed_,1);
[C_knn_imp_] = impute_knn(0,B_n_,1+index_missed_,1,'col');
[C_med_imp_] = impute_median(B_n_,1+index_missed_);
index_xor_ = efind(xor(B_n_(1+0,:),B_n_(1+1,:)));
%%%%;
% the dimension is too small to illustrate spectrum. ;
%%%%;
S_A_ = svds(A_n_,n_dim); S_B_ = svds(B_n_,n_dim);
S_C_svd_ = svds(C_svd_fit_,n_dim); S_C_knn_ = svds(C_knn_imp_,n_dim); S_C_med_ = svds(C_med_imp_,n_dim);
%%%%%%%%;
figure(1);clf;
p_row=4;p_col=5;np=0;markersize_use=4;
lim_ = 2.5*[-1,+1];
%%%%;
subplot(p_row,p_col,1+np+0*p_col); hold on;
scatter(A_n_(1+0,:),A_n_(1+1,:),markersize_use,'ko','filled');
hold off; xlabel('sample 1');ylabel('sample 2'); title('original (none missing)'); 
axisnotick; axis equal; grid on; xlim(lim_); ylim(lim_);
subplot(p_row,p_col,1+np+1*p_col); hold on;
tmp_h__ = hist2d_0(A_n_(1+0,:),A_n_(1+1,:),32,32,lim_,lim_);
hlim_ = [0,2+log(1+max(tmp_h__(:)))];
imagesc(log(1+tmp_h__),hlim_); set(gca,'Ydir','normal'); colormap('hot');
hold off; xlabel('sample 1');ylabel('sample 2'); title('original (none missing)'); 
axisnotick; axis image;
subplot(p_row,p_col,1+np+2*p_col); hold on;
scatter(A_n_(1+0,1+index_xor_),A_n_(1+1,1+index_xor_),markersize_use,'ko','filled');
hold off; xlabel('sample 1');ylabel('sample 2'); title('original (none missing)'); 
axisnotick; axis equal; grid on; xlim(lim_); ylim(lim_);
subplot(p_row,p_col,1+np+3*p_col); hold on;
tmp_h__ = hist2d_0(A_n_(1+0,1+index_xor_),A_n_(1+1,1+index_xor_),32,32,lim_,lim_);
hlim_ = [0,2+log(1+max(tmp_h__(:)))];
imagesc(log(1+tmp_h__),hlim_); set(gca,'Ydir','normal'); colormap('hot');
hold off; xlabel('sample 1');ylabel('sample 2'); title('original (none missing)'); 
axisnotick; axis image;
np=np+1;
%%%%;
subplot(p_row,p_col,1+np+0*p_col); hold on;
%line([A_n_(1+0,:);B_n_(1+0,:)],[A_n_(1+1,:);B_n_(1+1,:)],'LineWidth',0.5,'Color','k');
scatter(B_n_(1+0,:),B_n_(1+1,:),markersize_use,'ro','filled');
%scatter(A_n_(1+0,:),A_n_(1+1,:),markersize_use,'ko','filled');
hold off; xlabel('sample 1');ylabel('sample 2'); title('original perforated'); 
axisnotick; axis equal; grid on; xlim(lim_); ylim(lim_);
subplot(p_row,p_col,1+np+1*p_col); hold on;
tmp_h__ = hist2d_0(B_n_(1+0,:),B_n_(1+1,:),32,32,lim_,lim_);
hlim_ = [0,2+log(1+max(tmp_h__(:)))];
imagesc(log(1+tmp_h__),hlim_); set(gca,'Ydir','normal'); colormap('hot');
hold off; xlabel('sample 1');ylabel('sample 2'); title('original perforated'); 
axisnotick; axis image;
subplot(p_row,p_col,1+np+2*p_col); hold on;
%line([A_n_(1+0,1+index_xor_);B_n_(1+0,1+index_xor_)],[A_n_(1+1,1+index_xor_);B_n_(1+1,1+index_xor_)],'LineWidth',0.5,'Color','k');
scatter(B_n_(1+0,1+index_xor_),B_n_(1+1,1+index_xor_),markersize_use,'ro','filled');
%scatter(A_n_(1+0,1+index_xor_),A_n_(1+1,1+index_xor_),markersize_use,'ko','filled');
hold off; xlabel('sample 1');ylabel('sample 2'); title('original perforated'); 
axisnotick; axis equal; grid on; xlim(lim_); ylim(lim_);
subplot(p_row,p_col,1+np+3*p_col); hold on;
tmp_h__ = hist2d_0(B_n_(1+0,1+index_xor_),B_n_(1+1,1+index_xor_),32,32,lim_,lim_);
hlim_ = [0,2+log(1+max(tmp_h__(:)))];
imagesc(log(1+tmp_h__),hlim_); set(gca,'Ydir','normal'); colormap('hot');
hold off; xlabel('sample 1');ylabel('sample 2'); title('original perforated'); 
axisnotick; axis image;
np=np+1;
%%%%;
subplot(p_row,p_col,1+np+0*p_col); hold on;
scatter(C_knn_imp_(1+0,:),C_knn_imp_(1+1,:),markersize_use,'go','filled');
hold off; xlabel('sample 1');ylabel('sample 2'); title('knn');  
axisnotick; axis equal; grid on; xlim(lim_); ylim(lim_);
subplot(p_row,p_col,1+np+1*p_col); hold on;
tmp_h__ = hist2d_0(C_knn_imp_(1+0,:),C_knn_imp_(1+1,:),32,32,lim_,lim_);
hlim_ = [0,2+log(1+max(tmp_h__(:)))];
imagesc(log(1+tmp_h__),hlim_); set(gca,'Ydir','normal'); colormap('hot');
hold off; xlabel('sample 1');ylabel('sample 2'); title('knn'); 
axisnotick; axis image;
subplot(p_row,p_col,1+np+2*p_col); hold on;
scatter(C_knn_imp_(1+0,1+index_xor_),C_knn_imp_(1+1,1+index_xor_),markersize_use,'go','filled');
hold off; xlabel('sample 1');ylabel('sample 2'); title('knn');  
axisnotick; axis equal; grid on; xlim(lim_); ylim(lim_);
subplot(p_row,p_col,1+np+3*p_col); hold on;
tmp_h__ = hist2d_0(C_knn_imp_(1+0,1+index_xor_),C_knn_imp_(1+1,1+index_xor_),32,32,lim_,lim_);
hlim_ = [0,2+log(1+max(tmp_h__(:)))];
imagesc(log(1+tmp_h__),hlim_); set(gca,'Ydir','normal'); colormap('hot');
hold off; xlabel('sample 1');ylabel('sample 2'); title('knn'); 
axisnotick; axis image;
np=np+1;
%%%%;
subplot(p_row,p_col,1+np+0*p_col); hold on;
scatter(C_med_imp_(1+0,:),C_med_imp_(1+1,:),markersize_use,'co','filled');
hold off; xlabel('sample 1');ylabel('sample 2'); title('med');  
axisnotick; axis equal; grid on; xlim(lim_); ylim(lim_);
subplot(p_row,p_col,1+np+1*p_col); hold on;
tmp_h__ = hist2d_0(C_med_imp_(1+0,:),C_med_imp_(1+1,:),32,32,lim_,lim_);
hlim_ = [0,2+log(1+max(tmp_h__(:)))];
imagesc(log(1+tmp_h__),hlim_); set(gca,'Ydir','normal'); colormap('hot');
hold off; xlabel('sample 1');ylabel('sample 2'); title('med'); 
axisnotick; axis image;
subplot(p_row,p_col,1+np+2*p_col); hold on;
scatter(C_med_imp_(1+0,1+index_xor_),C_med_imp_(1+1,1+index_xor_),markersize_use,'co','filled');
hold off; xlabel('sample 1');ylabel('sample 2'); title('med');  
axisnotick; axis equal; grid on; xlim(lim_); ylim(lim_);
subplot(p_row,p_col,1+np+3*p_col); hold on;
tmp_h__ = hist2d_0(C_med_imp_(1+0,1+index_xor_),C_med_imp_(1+1,1+index_xor_),32,32,lim_,lim_);
hlim_ = [0,2+log(1+max(tmp_h__(:)))];
imagesc(log(1+tmp_h__),hlim_); set(gca,'Ydir','normal'); colormap('hot');
hold off; xlabel('sample 1');ylabel('sample 2'); title('med'); 
axisnotick; axis image;
np=np+1;
%%%%;
subplot(p_row,p_col,1+np+0*p_col); hold on;
scatter(C_svd_fit_(1+0,:),C_svd_fit_(1+1,:),markersize_use,'mo','filled');
hold off; xlabel('sample 1');ylabel('sample 2'); title('svd');  
axisnotick; axis equal; grid on; xlim(lim_); ylim(lim_);
subplot(p_row,p_col,1+np+1*p_col); hold on;
tmp_h__ = hist2d_0(C_svd_fit_(1+0,:),C_svd_fit_(1+1,:),32,32,lim_,lim_);
hlim_ = [0,2+log(1+max(tmp_h__(:)))];
imagesc(log(1+tmp_h__),hlim_); set(gca,'Ydir','normal'); colormap('hot');
hold off; xlabel('sample 1');ylabel('sample 2'); title('svd'); 
axisnotick; axis image;
subplot(p_row,p_col,1+np+2*p_col); hold on;
scatter(C_svd_fit_(1+0,1+index_xor_),C_svd_fit_(1+1,1+index_xor_),markersize_use,'mo','filled');
hold off; xlabel('sample 1');ylabel('sample 2'); title('svd');  
axisnotick; axis equal; grid on; xlim(lim_); ylim(lim_);
subplot(p_row,p_col,1+np+3*p_col); hold on;
tmp_h__ = hist2d_0(C_svd_fit_(1+0,1+index_xor_),C_svd_fit_(1+1,1+index_xor_),32,32,lim_,lim_);
hlim_ = [0,2+log(1+max(tmp_h__(:)))];
imagesc(log(1+tmp_h__),hlim_); set(gca,'Ydir','normal'); colormap('hot');
hold off; xlabel('sample 1');ylabel('sample 2'); title('svd'); 
axisnotick; axis image;
np=np+1;
%%%%;
figbig;
dir_jpg = '/home/rangan/dir_bcc/dir_jamison/dir_svd_impute/dir_jpg';
fig_str = sprintf('%s/test_svd_impute_lowdim_FIGA',dir_jpg);
disp(sprintf(' %% writing %s',fig_str));
print('-depsc',sprintf('%s.eps',fig_str));
print('-djpeg',sprintf('%s.jpg',fig_str));
close(gcf);
end;%if flag_plot;

flag_plot=0;
if flag_plot;
% First just make sure that marchenko-pastur law holds. ;
n_row = 128*4; n_col = 10*n_row+1; 
%n_row = 128*4; n_col = 15*n_row+1;
gamma = sqrt(n_row/n_col); gamma_p = (gamma+1)^2; gamma_n = (gamma-1)^2; beta_c = sqrt(1 + 1/gamma);
dg = gamma_p-gamma_n; gamma_lim_ = (gamma_p+gamma_n)/2 + 1.5*dg*[-1,+1];
mp = @(x) 1.0/(2*pi) .*sqrt( max(0,(gamma_p - x)) .* max(0,(x - gamma_n)) ) ./ (gamma^2*x) ;
n_h = 64; hbin_ = linspace(gamma_lim_(1),gamma_lim_(2),n_h); dh = mean(diff(hbin_));
A_n_ = randn(n_row,n_col)/sqrt(n_col);  
svs_A_ = svds(A_n_,n_row).^2; h_A_ = hist(svs_A_,hbin_); h_A_ = h_A_/(sum(h_A_)*dh);
B_n_ = randn(n_row,n_col)/sqrt(n_col); B_n_(:,1) = B_n_(:,1)*(1.10*beta_c);
svs_B_ = svds(B_n_,n_row).^2; h_B_ = hist(svs_B_,hbin_); h_B_ = h_B_/(sum(h_B_)*dh);
subplot(1,2,1); plot(hbin_,mp(hbin_),'k-',hbin_,h_A_,'bo-',hbin_,h_B_,'ro-');
xlabel('eigenvalue'); ylabel('\rho'); title('distribution of eigenvalues (\mu)');
% Now check to see what happens near the bbp-transition. ;
bv_ = linspace(0,2,64); n_bv = length(bv_);
smax_ = zeros(n_bv,1);
for nbv=1:n_bv;
bv = bv_(nbv);
B_n_ = randn(n_row,n_col)/sqrt(n_col); B_n_(:,1) = B_n_(:,1)*(bv*beta_c); %B_n_(:,2) = B_n_(:,2)*(bv*beta_c);
svs_B_ = svds(B_n_,n_row).^2; smax = max(svs_B_); smax_(nbv) = smax;
disp(sprintf(' %% bv %0.2f (%0.2f); smax %0.2f (smax-l_p %0.2f)',bv,bv*beta_c,smax,smax-gamma_p));
end;%for bv=linspace(0,2,15);
subplot(1,2,2); plot(bv_*beta_c,bv_*beta_c,'k-',bv_*beta_c,sqrt(smax_)/gamma,'ro-');
xlabel('bv*beta'); ylabel('largest eigenvalue'); title('largest eigenvalue for spike model');
legend({'bv*beta','max eigenvalue'});
figbig;
end;%if flag_plot;

flag_plot=0;
if flag_plot;
% Now check for spectral attenuation after random perforation. ;
% Note that alignment affects attenuation. ;
n_row = 128*4; n_col = 2*n_row+1; 
gamma = sqrt(n_row/n_col); gamma_p = (gamma+1)^2; gamma_n = (gamma-1)^2; beta_c = sqrt(1 + 1/gamma);
dg = gamma_p-gamma_n; gamma_lim_ = (gamma_p+gamma_n)/2 + 1.5*dg*[-1,+1];
mp = @(x) 1.0/(2*pi) .*sqrt( max(0,(gamma_p - x)) .* max(0,(x - gamma_n)) ) ./ (gamma^2*x) ;
bv = 2.25; n_k = 45;
B_n_ = randn(n_row,n_col)/sqrt(n_col); B_n_(:,1:n_k) = B_n_(:,1:n_k)*(bv*beta_c);
svs_B_ = svds(B_n_,n_row);
p_filled = 0.45; ij_filled_ = randperm(numel(B_n_)); ij_filled_ = ij_filled_(1:floor(p_filled*numel(B_n_)));
ij_missed_ = setdiff(1:numel(B_n_),ij_filled_);
% aligned position: ; 
C_n_ = B_n_; 
svs_C_pre_ = svds(C_n_,n_row);
C_n_(ij_missed_) = 0;
svs_C_ = svds(C_n_,n_row);
% semi-aligned position: ;
[tmp_Q_,~] = qr(randn(n_row)); 
c_mix_ = 1:floor(n_col/10);
[tmp_V_,~] = qr(randn(numel(c_mix_)));
D_n_ = tmp_Q_*B_n_; D_n_(:,c_mix_) = D_n_(:,c_mix_)*transpose(tmp_V_); 
svs_D_pre_ = svds(D_n_,n_row);
D_n_(ij_missed_) = 0;
svs_D_ = svds(D_n_,n_row);
% fully random position: ;
[tmp_Q_,~] = qr(randn(n_row)); [tmp_V_,~] = qr(randn(n_col)); E_n_ = tmp_Q_*B_n_*transpose(tmp_V_); 
svs_E_pre_ = svds(E_n_,n_row);
E_n_(ij_missed_) = 0;
svs_E_ = svds(E_n_,n_row);
%%%%%%%%;
x_ = (1:n_row)/n_row;
hold on;
plot(sort(svs_B_),x_,'kx');
%plot(sort(svs_C_pre_),x_,'bx-');plot(sort(svs_D_pre_),x_,'rx-');plot(sort(svs_E_pre_),x_,'mx-');
plot(sort(svs_C_)/sqrt(p_filled),x_,'bo-');
plot(sort(svs_D_)/sqrt(p_filled),x_,'ro-');
plot(sort(svs_E_)/sqrt(p_filled),x_,'mo-');
hold off;
xlabel('eigenvalue'); ylabel('cdf'); title('spectrum after perforation');
legend({'original','aligned','semi-aligned','unaligned'},'Location','SouthEast')
figbig;
end;%if flag_plot;

flag_plot=0;
if flag_plot;
% Now check for spectral attenuation of adjusted/empirical covariate-matrix after random perforation. ;
% Note that adjusted covariate-matrix is not positive semi-definite. ;
n_row = 128*4; n_col = 2*n_row+1; 
gamma = sqrt(n_row/n_col); gamma_p = (gamma+1)^2; gamma_n = (gamma-1)^2; beta_c = sqrt(1 + 1/gamma);
dg = gamma_p-gamma_n; gamma_lim_ = (gamma_p+gamma_n)/2 + 1.5*dg*[-1,+1];
mp = @(x) 1.0/(2*pi) .*sqrt( max(0,(gamma_p - x)) .* max(0,(x - gamma_n)) ) ./ (gamma^2*x) ;
bv = 2.25; n_k = 45;
B_n_ = randn(n_row,n_col)/sqrt(n_col); B_n_(:,1:n_k) = B_n_(:,1:n_k)*(bv*beta_c);
svs_B_ = svds(B_n_,n_row);
p_filled = 0.45; ij_filled_ = randperm(numel(B_n_)); ij_filled_ = ij_filled_(1:floor(p_filled*numel(B_n_)));
ij_missed_ = setdiff(1:numel(B_n_),ij_filled_);
P_n_ = zeros(size(B_n_)); P_n_(ij_filled_) = 1;
PnPt_ = P_n_*transpose(P_n_); PtPn_ = transpose(P_n_)*P_n_;
% aligned position: ; 
C_n_ = B_n_; 
svs_C_pre_ = svds(C_n_,n_row);
C_n_(ij_missed_) = 0;
svs_all_C_ = svds(C_n_,n_row);
%svs_emp_C_ = sqrt(max(0,eigs((C_n_*transpose(C_n_))./PnPt_*n_col,n_row)));
svs_emp_C_ = sqrt(abs(eigs((C_n_*transpose(C_n_))./PnPt_*n_col,n_row)));
% semi-aligned position: ;
[tmp_Q_,~] = qr(randn(n_row)); 
c_mix_ = 1:floor(n_col/10);
[tmp_V_,~] = qr(randn(numel(c_mix_)));
D_n_ = tmp_Q_*B_n_; D_n_(:,c_mix_) = D_n_(:,c_mix_)*transpose(tmp_V_); 
svs_D_pre_ = svds(D_n_,n_row);
D_n_(ij_missed_) = 0;
svs_all_D_ = svds(D_n_,n_row);
%svs_emp_D_ = sqrt(max(0,eigs((D_n_*transpose(D_n_))./PnPt_*n_col,n_row)));
svs_emp_D_ = sqrt(abs(eigs((D_n_*transpose(D_n_))./PnPt_*n_col,n_row)));
% fully random position: ;
[tmp_Q_,~] = qr(randn(n_row)); [tmp_V_,~] = qr(randn(n_col)); E_n_ = tmp_Q_*B_n_*transpose(tmp_V_); 
svs_E_pre_ = svds(E_n_,n_row);
E_n_(ij_missed_) = 0;
svs_all_E_ = svds(E_n_,n_row);
%svs_emp_E_ = sqrt(max(0,eigs((E_n_*transpose(E_n_))./PnPt_*n_col,n_row)));
svs_emp_E_ = sqrt(abs(eigs((E_n_*transpose(E_n_))./PnPt_*n_col,n_row)));
%%%%%%%%;
x_ = (1:n_row)/n_row;
subplot(1,2,1);hold on;
plot(sort(svs_B_),x_,'kx');
plot(sort(svs_all_C_)/sqrt(p_filled),x_,'bo-');
plot(sort(svs_all_D_)/sqrt(p_filled),x_,'ro-');
plot(sort(svs_all_E_)/sqrt(p_filled),x_,'mo-');
hold off;
xlabel('eigenvalue'); ylabel('cdf'); title('full spectrum after perforation');
legend({'original','aligned','semi-aligned','unaligned'},'Location','SouthEast')
subplot(1,2,2);hold on;
plot(sort(svs_B_),x_,'kx');
plot(sort(svs_emp_C_),x_,'bo-');
plot(sort(svs_emp_D_),x_,'ro-');
plot(sort(svs_emp_E_),x_,'mo-');
hold off;
xlabel('eigenvalue'); ylabel('cdf'); title('empirical spectrum after perforation');
legend({'original','aligned','semi-aligned','unaligned'},'Location','SouthEast')
figbig;
end;%if flag_plot;

flag_plot=0;
if flag_plot;
% See how alignment interacts with perforation. ;
% Generally speaking, as long as bv*beta is large enough, the singular vectors align well. ;
clear;
n_row = 128*4; n_col = 2*n_row+1; 
gamma = sqrt(n_row/n_col); gamma_p = (gamma+1)^2; gamma_n = (gamma-1)^2; beta_c = sqrt(1 + 1/gamma);
dg = gamma_p-gamma_n; gamma_lim_ = (gamma_p+gamma_n)/2 + 1.5*dg*[-1,+1];
mp = @(x) 1.0/(2*pi) .*sqrt( max(0,(gamma_p - x)) .* max(0,(x - gamma_n)) ) ./ (gamma^2*x) ;
bv = 5.25; n_k = 1;
B_n_ = randn(n_row,n_col)/sqrt(n_col); B_n_(:,1:n_k) = B_n_(:,1:n_k)*(bv*beta_c);
svs_B_ = svds(B_n_,n_row);
p_filled = 0.45; ij_filled_ = randperm(numel(B_n_)); ij_filled_ = ij_filled_(1:floor(p_filled*numel(B_n_)));
ij_missed_ = setdiff(1:numel(B_n_),ij_filled_);
% aligned position: ; 
C_n_ = B_n_; 
svs_C_pre_ = svds(C_n_,n_row);
[U_C_pre_,S_C_pre_,V_C_pre_]= svds(C_n_,n_k);
C_n_(ij_missed_) = 0;
svs_C_pos_ = svds(C_n_,n_row);
[U_C_pos_,S_C_pos_,V_C_pos_]= svds(C_n_,n_k);
% semi-aligned position: ;
col_factor_ = linspace(0,1,24).^2; n_col_factor = length(col_factor_);
svs_D_pre_ = zeros(n_row,n_col_factor);
U_D_pre_ = zeros(n_row,n_k,n_col_factor);
S_D_pre_ = zeros(n_k,n_k,n_col_factor);
V_D_pre_ = zeros(n_col,n_k,n_col_factor);
svs_D_pos_ = zeros(n_row,n_col_factor);
U_D_pos_ = zeros(n_row,n_k,n_col_factor);
S_D_pos_ = zeros(n_k,n_k,n_col_factor);
V_D_pos_ = zeros(n_col,n_k,n_col_factor);
col_factor_str_ = cell(3 + n_col_factor,1);
col_factor_str_{1} = 'original';
col_factor_str_{2} = 'aligned';
col_factor_str_{3} = 'unaligned';
for ncol_factor=1:n_col_factor;
col_factor = col_factor_(ncol_factor);
col_factor_str_{3+ncol_factor} = sprintf('%0.3f',col_factor);
[tmp_Q_,~] = qr(randn(n_row)); 
c_mix_ = 1:max(1,min(n_col,floor(n_col*col_factor)));
[tmp_V_,~] = qr(randn(numel(c_mix_)));
D_n_ = tmp_Q_*B_n_; D_n_(:,c_mix_) = D_n_(:,c_mix_)*transpose(tmp_V_); 
svs_D_pre_(:,ncol_factor) = svds(D_n_,n_row);
[U_D_pre_(:,:,ncol_factor),S_D_pre_(:,:,ncol_factor),V_D_pre_(:,:,ncol_factor)]= svds(D_n_,n_k);
D_n_(ij_missed_) = 0;
svs_D_pos_(:,ncol_factor) = svds(D_n_,n_row);
[U_D_pos_(:,:,ncol_factor),S_D_pos_(:,:,ncol_factor),V_D_pos_(:,:,ncol_factor)]= svds(D_n_,n_k);
end;%for ncol_factor=1:n_col_factor;
% fully random position: ;
[tmp_Q_,~] = qr(randn(n_row)); [tmp_V_,~] = qr(randn(n_col)); E_n_ = tmp_Q_*B_n_*transpose(tmp_V_); 
svs_E_pre_ = svds(E_n_,n_row);
[U_E_pre_,S_E_pre_,V_E_pre_]= svds(E_n_,n_k);
E_n_(ij_missed_) = 0;
svs_E_pos_ = svds(E_n_,n_row);
[U_E_pos_,S_E_pos_,V_E_pos_]= svds(E_n_,n_k);
%%%%%%%%;
x_ = (1:n_row)/n_row;
subplot(1,1,1);hold on;
plot(sort(svs_B_),x_,'kx');
plot(sort(svs_C_pos_)/sqrt(p_filled),x_,'co-');
plot(sort(svs_E_pos_)/sqrt(p_filled),x_,'mo-');
c_ = colormap_beach(); n_c = size(c_,1);
for ncol_factor=1:n_col_factor;
nc = max(1,min(n_c,floor(n_c*ncol_factor/n_col_factor)));
plot(sort(svs_D_pos_(:,ncol_factor))/sqrt(p_filled),x_,'x-','Color',c_(nc,:));
end;%for ncol_factor=1:n_col_factor;
legend(col_factor_str_,'Location','SouthEast');
xlabel('eigenvalue'); ylabel('cdf'); title('alignment and perforation');
hold off;
figbig;
end;%if flag_plot;

flag_plot=0;
if flag_plot;
% Now try out imputation across various levels of alignment. ;
% seems reasonable, but there still is some mismatch in the bottom of the spectrum. ;
clear;
n_row = 128*4; n_col = 2*n_row+1; 
gamma = sqrt(n_row/n_col); gamma_p = (gamma+1)^2; gamma_n = (gamma-1)^2; beta_c = sqrt(1 + 1/gamma);
dg = gamma_p-gamma_n; gamma_lim_ = (gamma_p+gamma_n)/2 + 1.5*dg*[-1,+1];
mp = @(x) 1.0/(2*pi) .*sqrt( max(0,(gamma_p - x)) .* max(0,(x - gamma_n)) ) ./ (gamma^2*x) ;
bv = 5.25; n_k = 45;
B_n_ = randn(n_row,n_col)/sqrt(n_col); B_n_(:,1:n_k) = B_n_(:,1:n_k)*(bv*beta_c);
svs_B_ = svds(B_n_,n_row);
p_filled = 0.45; ij_filled_ = randperm(numel(B_n_)); ij_filled_ = ij_filled_(1:floor(p_filled*numel(B_n_)));
ij_missed_ = setdiff(1:numel(B_n_),ij_filled_);
% aligned position: ; 
C_n_ = B_n_; 
svs_C_pre_ = svds(C_n_,n_row);
[U_C_pre_,S_C_pre_,V_C_pre_]= svds(C_n_,n_k);
C_n_(ij_missed_) = 0;
svs_C_pos_ = svds(C_n_,n_row);
[U_C_pos_,S_C_pos_,V_C_pos_]= svds(C_n_,n_k);
[C_imp_,C_fit_] = svd_impute_fit(C_n_,ij_missed_,n_k);
svs_C_imp_ = svds(C_imp_,n_row);
svs_C_fit_ = svds(C_fit_,n_row);
% semi-aligned position: ;
col_factor_ = linspace(0,1,8).^2; n_col_factor = length(col_factor_);
svs_D_pre_ = zeros(n_row,n_col_factor);
U_D_pre_ = zeros(n_row,n_k,n_col_factor);
S_D_pre_ = zeros(n_k,n_k,n_col_factor);
V_D_pre_ = zeros(n_col,n_k,n_col_factor);
svs_D_pos_ = zeros(n_row,n_col_factor);
U_D_pos_ = zeros(n_row,n_k,n_col_factor);
S_D_pos_ = zeros(n_k,n_k,n_col_factor);
V_D_pos_ = zeros(n_col,n_k,n_col_factor);
svs_D_imp_ = zeros(n_row,n_col_factor);
svs_D_fit_ = zeros(n_row,n_col_factor);
col_factor_str_ = cell(3 + n_col_factor,1);
col_factor_str_{1} = 'original';
col_factor_str_{2} = 'aligned';
col_factor_str_{3} = 'unaligned';
for ncol_factor=1:n_col_factor;
col_factor = col_factor_(ncol_factor);
col_factor_str_{3+ncol_factor} = sprintf('%0.3f',col_factor);
[tmp_Q_,~] = qr(randn(n_row)); 
c_mix_ = 1:max(n_k,min(n_col,floor(n_col*col_factor)));
[tmp_V_,~] = qr(randn(numel(c_mix_)));
D_n_ = tmp_Q_*B_n_; D_n_(:,c_mix_) = D_n_(:,c_mix_)*transpose(tmp_V_); 
svs_D_pre_(:,ncol_factor) = svds(D_n_,n_row);
[U_D_pre_(:,:,ncol_factor),S_D_pre_(:,:,ncol_factor),V_D_pre_(:,:,ncol_factor)]= svds(D_n_,n_k);
D_n_(ij_missed_) = 0;
svs_D_pos_(:,ncol_factor) = svds(D_n_,n_row);
[U_D_pos_(:,:,ncol_factor),S_D_pos_(:,:,ncol_factor),V_D_pos_(:,:,ncol_factor)]= svds(D_n_,n_k);
[D_imp_,D_fit_] = svd_impute_fit(D_n_,ij_missed_,n_k);
svs_D_imp_(:,ncol_factor) = svds(D_imp_,n_row);
svs_D_fit_(:,ncol_factor) = svds(D_fit_,n_row);
end;%for ncol_factor=1:n_col_factor;
% fully random position: ;
[tmp_Q_,~] = qr(randn(n_row)); [tmp_V_,~] = qr(randn(n_col)); E_n_ = tmp_Q_*B_n_*transpose(tmp_V_); 
svs_E_pre_ = svds(E_n_,n_row);
[U_E_pre_,S_E_pre_,V_E_pre_]= svds(E_n_,n_k);
E_n_(ij_missed_) = 0;
svs_E_pos_ = svds(E_n_,n_row);
[U_E_pos_,S_E_pos_,V_E_pos_]= svds(E_n_,n_k);
[E_imp_,E_fit_] = svd_impute_fit(E_n_,ij_missed_,n_k);
svs_E_imp_ = svds(E_imp_,n_row);
svs_E_fit_ = svds(E_fit_,n_row);
%%%%%%%%;
x_ = (1:n_row)/n_row;
subplot(1,2,1);hold on;
plot(sort(svs_B_),x_,'kx');
plot(sort(svs_C_imp_),x_,'bo-');
plot(sort(svs_D_imp_),x_,'ro-');
plot(sort(svs_E_imp_),x_,'mo-');
hold off;
xlabel('eigenvalue'); ylabel('cdf'); title('spectrum after imputation');
legend({'original','aligned','semi-aligned','unaligned'},'Location','SouthEast')
subplot(1,2,2);hold on;
plot(sort(svs_B_),x_,'kx');
plot(sort(svs_C_fit_),x_,'bo-');
plot(sort(svs_D_fit_),x_,'ro-');
plot(sort(svs_E_fit_),x_,'mo-');
hold off;
xlabel('eigenvalue'); ylabel('cdf'); title('imputed and fitted');
legend({'original','aligned','semi-aligned','unaligned'},'Location','SouthEast')
figbig;
end;%if flag_plot;

flag_plot=0;
if flag_plot;
% Try out imputation again across various levels of alignment. ;
% Why the mismatch in spectrum? ;
clear;
n_row = 128*4; n_col = 2*n_row+1; 
gamma = sqrt(n_row/n_col); gamma_p = (gamma+1)^2; gamma_n = (gamma-1)^2; beta_c = sqrt(1 + 1/gamma);
dg = gamma_p-gamma_n; gamma_lim_ = (gamma_p+gamma_n)/2 + 1.5*dg*[-1,+1];
mp = @(x) 1.0/(2*pi) .*sqrt( max(0,(gamma_p - x)) .* max(0,(x - gamma_n)) ) ./ (gamma^2*x) ;
bv = 5.25; n_k = 45;
B_n_ = randn(n_row,n_col)/sqrt(n_col); B_n_(:,1:n_k) = B_n_(:,1:n_k)*(bv*beta_c);
svs_B_ = svds(B_n_,n_row);
p_filled = 0.45; ij_filled_ = randperm(numel(B_n_)); ij_filled_ = ij_filled_(1:floor(p_filled*numel(B_n_)));
ij_missed_ = setdiff(1:numel(B_n_),ij_filled_);
% aligned position: ; 
C_n_ = B_n_; 
svs_C_pre_ = svds(C_n_,n_row);
[U_C_pre_,S_C_pre_,V_C_pre_]= svds(C_n_,n_k);
C_n_(ij_missed_) = 0;
svs_C_pos_ = svds(C_n_,n_row);
[U_C_pos_,S_C_pos_,V_C_pos_]= svds(C_n_,n_k);
[C_imp_,C_fit_] = svd_impute_fit_2(C_n_,ij_missed_,n_k);
svs_C_imp_ = svds(C_imp_,n_row);
svs_C_fit_ = svds(C_fit_,n_row);
% fully random position: ;
[tmp_Q_,~] = qr(randn(n_row)); [tmp_V_,~] = qr(randn(n_col)); E_n_ = tmp_Q_*B_n_*transpose(tmp_V_); 
svs_E_pre_ = svds(E_n_,n_row);
[U_E_pre_,S_E_pre_,V_E_pre_]= svds(E_n_,n_k);
E_n_(ij_missed_) = 0;
svs_E_pos_ = svds(E_n_,n_row);
[U_E_pos_,S_E_pos_,V_E_pos_]= svds(E_n_,n_k);
[E_imp_,E_fit_] = svd_impute_fit_2(E_n_,ij_missed_,n_k);
svs_E_imp_ = svds(E_imp_,n_row);
svs_E_fit_ = svds(E_fit_,n_row);
%%%%%%%%;
figure;clf;
x_ = (1:n_row)/n_row;
subplot(1,2,1);hold on;
plot(sort(svs_B_),x_,'kx');
plot(sort(svs_C_imp_),x_,'bo-');
plot(sort(svs_E_imp_),x_,'mo-');
hold off;
xlabel('eigenvalue'); ylabel('cdf'); title('spectrum after imputation');
legend({'original','aligned','unaligned'},'Location','SouthEast')
subplot(1,2,2);hold on;
plot(sort(svs_B_),x_,'kx');
plot(sort(svs_C_fit_),x_,'bo-');
plot(sort(svs_E_fit_),x_,'mo-');
hold off;
xlabel('eigenvalue'); ylabel('cdf'); title('imputed and fitted');
legend({'original','aligned','unaligned'},'Location','SouthEast')
figbig;
end;%if flag_plot;

flag_plot=0;
if flag_plot;
% Try out imputation again across various levels of alignment. ;
% Now try and recover random matrix. ;
% Aha! Note that, when n_col>n_row, it seems that orth(V_E_pos_(:,n_k+1:end)*tmp_Q_) has memory of V_E_pos_. ;
% To fix this we should put tmp_VQ_ in generic position. ;
clear;
n_row = 128*4; n_col = 2*n_row+1; n_dim = min(n_row,n_col);
gamma = sqrt(n_row/n_col); gamma_p = (gamma+1)^2; gamma_n = (gamma-1)^2; beta_c = sqrt(1 + 1/gamma);
dg = gamma_p-gamma_n; gamma_lim_ = (gamma_p+gamma_n)/2 + 1.5*dg*[-1,+1];
mp = @(x) 1.0/(2*pi) .*sqrt( max(0,(gamma_p - x)) .* max(0,(x - gamma_n)) ) ./ (gamma^2*x) ;
bv = 5.25; n_k = 0;
B_n_ = randn(n_row,n_col)/sqrt(n_col); B_n_(:,1:n_k) = B_n_(:,1:n_k)*(bv*beta_c);
svs_B_ = svds(B_n_,n_row);
p_filled = 0.45; ij_filled_ = randperm(numel(B_n_)); ij_filled_ = ij_filled_(1:floor(p_filled*numel(B_n_)));
ij_missed_ = setdiff(1:numel(B_n_),ij_filled_);
% fully random position: ;
[tmp_Q_,~] = qr(randn(n_row)); [tmp_V_,~] = qr(randn(n_col)); E_n_ = tmp_Q_*B_n_*transpose(tmp_V_); 
svs_E_pre_ = svds(E_n_,n_row);
[U_E_pre_,S_E_pre_,V_E_pre_]= svds(E_n_,n_k);
E_n_(ij_missed_) = 0;
svs_E_pos_ = svds(E_n_,n_row);
[U_E_pos_,S_E_pos_,V_E_pos_]= svds(E_n_,n_dim);
[tmp_Q_,~] = qr(randn(n_dim-n_k)); tmp_UQ_ = orth(U_E_pos_(:,n_k+1:end)*tmp_Q_);
[tmp_Q_,~] = qr(randn(n_dim-n_k)); tmp_VQ_ = orth(V_E_pos_(:,n_k+1:end)*tmp_Q_);
tmp_E_bot0_ = U_E_pos_ * S_E_pos_(n_k+1:end,n_k+1:end)/sqrt(p_filled) * transpose(V_E_pos_(:,n_k+1:end));
E_fit0_ = E_n_; E_fit0_(ij_missed_) = tmp_E_bot0_(ij_missed_);
svs_E_fit0_ = svds(E_fit0_,n_row);
tmp_E_bot1_ = tmp_UQ_ * S_E_pos_(n_k+1:end,n_k+1:end)/sqrt(p_filled) * transpose(V_E_pos_(:,n_k+1:end));
E_fit1_ = E_n_; E_fit1_(ij_missed_) = tmp_E_bot1_(ij_missed_);
svs_E_fit1_ = svds(E_fit1_,n_row);
tmp_E_bot2_ = tmp_UQ_ * S_E_pos_(n_k+1:end,n_k+1:end)/sqrt(p_filled) * transpose(tmp_VQ_);
E_fit2_ = E_n_; E_fit2_(ij_missed_) = tmp_E_bot2_(ij_missed_);
svs_E_fit2_ = svds(E_fit2_,n_row);
tmp_E_bot3_ = tmp_UQ_ * S_E_pos_(n_k+1:end,n_k+1:end)/sqrt(p_filled) * transpose(orth(randn(n_col,n_dim-n_k)));
E_fit3_ = E_n_; E_fit3_(ij_missed_) = tmp_E_bot3_(ij_missed_);
svs_E_fit3_ = svds(E_fit3_,n_row);
%%%%%%%%;
figure;clf;
x_ = (1:n_row)/n_row; Msize = 15;
hold on;
plot(sort(svs_E_pre_),x_,'ko','MarkerSize',Msize);
plot(sort(svs_E_pos_),x_,'cx','MarkerSize',Msize);
plot(sort(svs_E_pos_)/sqrt(p_filled),x_,'c^','MarkerSize',Msize);
plot(sort(svs_E_fit0_),x_,'mo','MarkerSize',Msize);
plot(sort(svs_E_fit1_),x_,'rx','MarkerSize',Msize);
plot(sort(svs_E_fit2_),x_,'gs','MarkerSize',Msize);
plot(sort(svs_E_fit3_),x_,'yh','MarkerSize',Msize);
hold off;
legend({'E_pre','E_pos','E_pos/p','fit0','fit1','fit2','fit3'},'Location','SouthEast');
xlabel('eigenvalue'); ylabel('cdf'); title('spectrum after imputation');
figbig;
%%%%%%%%;
disp(sprintf(' %% tmp_E_bot0 : mean %+0.6f std %+0.6f',mean(tmp_E_bot0_(:)),std(tmp_E_bot0_(:))));
disp(sprintf(' %% tmp_E_bot1 : mean %+0.6f std %+0.6f',mean(tmp_E_bot1_(:)),std(tmp_E_bot1_(:))));
disp(sprintf(' %% tmp_E_bot2 : mean %+0.6f std %+0.6f',mean(tmp_E_bot2_(:)),std(tmp_E_bot2_(:))));
disp(sprintf(' %% tmp_E_bot3 : mean %+0.6f std %+0.6f',mean(tmp_E_bot3_(:)),std(tmp_E_bot3_(:))));
%%%%%%%%;
disp(sprintf(' %% tmp_E_bot0 ij_filled_ mean %+0.6f std %+0.6f',mean(tmp_E_bot0_(ij_filled_)),std(tmp_E_bot0_(ij_filled_))));
disp(sprintf(' %% tmp_E_bot1 ij_filled_ mean %+0.6f std %+0.6f',mean(tmp_E_bot1_(ij_filled_)),std(tmp_E_bot1_(ij_filled_))));
disp(sprintf(' %% tmp_E_bot2 ij_filled_ mean %+0.6f std %+0.6f',mean(tmp_E_bot2_(ij_filled_)),std(tmp_E_bot2_(ij_filled_))));
disp(sprintf(' %% tmp_E_bot3 ij_filled_ mean %+0.6f std %+0.6f',mean(tmp_E_bot3_(ij_filled_)),std(tmp_E_bot3_(ij_filled_))));
%%%%%%%%;
disp(sprintf(' %% tmp_E_bot0 ij_missed_ mean %+0.6f std %+0.6f',mean(tmp_E_bot0_(ij_missed_)),std(tmp_E_bot0_(ij_missed_))));
disp(sprintf(' %% tmp_E_bot1 ij_missed_ mean %+0.6f std %+0.6f',mean(tmp_E_bot1_(ij_missed_)),std(tmp_E_bot1_(ij_missed_))));
disp(sprintf(' %% tmp_E_bot2 ij_missed_ mean %+0.6f std %+0.6f',mean(tmp_E_bot2_(ij_missed_)),std(tmp_E_bot2_(ij_missed_))));
disp(sprintf(' %% tmp_E_bot3 ij_missed_ mean %+0.6f std %+0.6f',mean(tmp_E_bot3_(ij_missed_)),std(tmp_E_bot3_(ij_missed_))));
end;%if flag_plot;

flag_plot=1;
if flag_plot;
% Now try out imputation again across various levels of alignment. ;
% This time we ensure that tmp_VQ_ is in generic position. ;
% We also try aligning along biclusters, rather than clusters. ;
n_row = 128*4; n_col = 2*n_row+1; n_dim = min(n_row,n_col);
gamma = sqrt(n_row/n_col); gamma_p = (gamma+1)^2; gamma_n = (gamma-1)^2; beta_c = sqrt(1 + 1/gamma);
dg = gamma_p-gamma_n; gamma_lim_ = (gamma_p+gamma_n)/2 + 1.5*dg*[-1,+1];
mp = @(x) 1.0/(2*pi) .*sqrt( max(0,(gamma_p - x)) .* max(0,(x - gamma_n)) ) ./ (gamma^2*x) ;
bv = 5.0d0; %n_rank = 1;
B_n_ = randn(n_row,n_col)/sqrt(n_col); B_n_(:,1:n_rank) = B_n_(:,1:n_rank)*(bv*beta_c);
% Simple scaling does not preserve the spectrum ;
% sigma = sqrt( ((bv*beta_c)^2 - 1)*n_row/max(1,n_rank) + 1 );
% B_n_ = randn(n_row,n_col)/sqrt(n_col); B_n_(1:n_rank,1:n_rank) = B_n_(1:n_rank,1:n_rank)*sigma;
[U_B_pre_,S_B_pre_,V_B_pre_]= svds(B_n_,n_dim);
B_n_ = transpose(U_B_pre_)*B_n_;
svs_B_pre_ = svds(B_n_,n_row);
p_filled = 0.45; ij_filled_ = randperm(numel(B_n_)); ij_filled_ = ij_filled_(1:floor(p_filled*numel(B_n_)));
ij_missed_ = setdiff(1:numel(B_n_),ij_filled_);
% fully aligned position: ; 
C_n_ = B_n_; 
svs_C_pre_ = svds(C_n_,n_row);
[U_C_pre_,S_C_pre_,V_C_pre_]= svds(C_n_,n_rank);
C_n_(ij_missed_) = 0;
svs_C_pos_ = svds(C_n_,n_row);
[U_C_pos_,S_C_pos_,V_C_pos_]= svds(C_n_,n_rank);
[C_imp_,C_fit_] = svd_impute_fit_3(C_n_,ij_missed_,n_rank);
[C_1nn_] = impute_knn(0,C_n_,ij_missed_,1);
[C_8nn_] = impute_knn(0,C_n_,ij_missed_,8);
[C_Gnn_] = impute_knn(0,C_n_,ij_missed_,16);
svs_C_imp_ = svds(C_imp_,n_row);
svs_C_fit_ = svds(C_fit_,n_row);
svs_C_1nn_ = svds(C_1nn_,n_row);
svs_C_8nn_ = svds(C_8nn_,n_row);
svs_C_Gnn_ = svds(C_Gnn_,n_row);
[U_C_imp_,S_C_imp_,V_C_imp_] = svds(C_imp_,n_rank);
[U_C_fit_,S_C_fit_,V_C_fit_] = svds(C_fit_,n_rank);
[U_C_1nn_,S_C_1nn_,V_C_1nn_] = svds(C_1nn_,n_rank);
[U_C_8nn_,S_C_8nn_,V_C_8nn_] = svds(C_8nn_,n_rank);
[U_C_Gnn_,S_C_Gnn_,V_C_Gnn_] = svds(C_Gnn_,n_rank);
% semi-aligned position: ;
X_factor_ = linspace(0.4,1.0,13); n_X_factor = length(X_factor_);
svs_D_pre_ = zeros(n_row,n_X_factor);
U_D_pre_ = zeros(n_row,n_rank,n_X_factor);
S_D_pre_ = zeros(n_rank,n_rank,n_X_factor);
V_D_pre_ = zeros(n_col,n_rank,n_X_factor);
svs_D_pos_ = zeros(n_row,n_X_factor);
U_D_pos_ = zeros(n_row,n_rank,n_X_factor);
S_D_pos_ = zeros(n_rank,n_rank,n_X_factor);
V_D_pos_ = zeros(n_col,n_rank,n_X_factor);
svs_D_imp_ = zeros(n_row,n_X_factor);
svs_D_fit_ = zeros(n_row,n_X_factor);
svs_D_1nn_ = zeros(n_row,n_X_factor);
svs_D_8nn_ = zeros(n_row,n_X_factor);
svs_D_Gnn_ = zeros(n_row,n_X_factor);
U_D_imp_ = zeros(n_row,n_rank,n_X_factor);
S_D_imp_ = zeros(n_rank,n_rank,n_X_factor);
V_D_imp_ = zeros(n_col,n_rank,n_X_factor);
U_D_fit_ = zeros(n_row,n_rank,n_X_factor);
S_D_fit_ = zeros(n_rank,n_rank,n_X_factor);
V_D_fit_ = zeros(n_col,n_rank,n_X_factor);
U_D_1nn_ = zeros(n_row,n_rank,n_X_factor);
S_D_1nn_ = zeros(n_rank,n_rank,n_X_factor);
V_D_1nn_ = zeros(n_col,n_rank,n_X_factor);
U_D_8nn_ = zeros(n_row,n_rank,n_X_factor);
S_D_8nn_ = zeros(n_rank,n_rank,n_X_factor);
V_D_8nn_ = zeros(n_col,n_rank,n_X_factor);
U_D_Gnn_ = zeros(n_row,n_rank,n_X_factor);
S_D_Gnn_ = zeros(n_rank,n_rank,n_X_factor);
V_D_Gnn_ = zeros(n_col,n_rank,n_X_factor);
X_factor_str_ = cell(3 + n_X_factor,1);
X_factor_str_{1} = 'original';
X_factor_str_{2} = 'aligned';
X_factor_str_{3} = 'unaligned';
for nX_factor=1:n_X_factor;
X_factor = X_factor_(nX_factor);
X_factor_str_{3+nX_factor} = sprintf('%0.3f',X_factor);
n_row_mix = max(n_rank,min(n_row,floor(n_row^X_factor)));
row_mix_ = 1:n_row_mix;
[tmp_U_,~] = qr(randn(n_row_mix));
n_col_mix = max(n_rank,min(n_col,floor(n_col^X_factor)));
col_mix_ = 1:n_col_mix;
[tmp_V_,~] = qr(randn(n_col_mix));
D_n_ = B_n_; D_n_(row_mix_,:) = tmp_U_*D_n_(row_mix_,:); D_n_(:,col_mix_) = D_n_(:,col_mix_)*transpose(tmp_V_); 
svs_D_pre_(:,nX_factor) = svds(D_n_,n_row);
[U_D_pre_(:,:,nX_factor),S_D_pre_(:,:,nX_factor),V_D_pre_(:,:,nX_factor)]= svds(D_n_,n_rank);
D_n_(ij_missed_) = 0;
svs_D_pos_(:,nX_factor) = svds(D_n_,n_row);
[U_D_pos_(:,:,nX_factor),S_D_pos_(:,:,nX_factor),V_D_pos_(:,:,nX_factor)]= svds(D_n_,n_rank);
[D_imp_,D_fit_] = svd_impute_fit_3(D_n_,ij_missed_,n_rank);
[D_1nn_] = impute_knn(0,D_n_,ij_missed_,1);
[D_8nn_] = impute_knn(0,D_n_,ij_missed_,8);
[D_Gnn_] = impute_knn(0,D_n_,ij_missed_,16);
svs_D_imp_(:,nX_factor) = svds(D_imp_,n_row);
svs_D_fit_(:,nX_factor) = svds(D_fit_,n_row);
svs_D_1nn_(:,nX_factor) = svds(D_1nn_,n_row);
svs_D_8nn_(:,nX_factor) = svds(D_8nn_,n_row);
svs_D_Gnn_(:,nX_factor) = svds(D_Gnn_,n_row);
[U_D_imp_(:,:,nX_factor),S_D_imp_(:,:,nX_factor),V_D_imp_(:,:,nX_factor)] = svds(D_imp_,n_rank);
[U_D_fit_(:,:,nX_factor),S_D_fit_(:,:,nX_factor),V_D_fit_(:,:,nX_factor)] = svds(D_fit_,n_rank);
[U_D_1nn_(:,:,nX_factor),S_D_1nn_(:,:,nX_factor),V_D_1nn_(:,:,nX_factor)] = svds(D_1nn_,n_rank);
[U_D_8nn_(:,:,nX_factor),S_D_8nn_(:,:,nX_factor),V_D_8nn_(:,:,nX_factor)] = svds(D_8nn_,n_rank);
[U_D_Gnn_(:,:,nX_factor),S_D_Gnn_(:,:,nX_factor),V_D_Gnn_(:,:,nX_factor)] = svds(D_Gnn_,n_rank);
end;%for nX_factor=1:n_X_factor;
% fully random position: ;
[tmp_Q_,~] = qr(randn(n_row)); [tmp_V_,~] = qr(randn(n_col)); E_n_ = tmp_Q_*B_n_*transpose(tmp_V_); 
svs_E_pre_ = svds(E_n_,n_row);
[U_E_pre_,S_E_pre_,V_E_pre_]= svds(E_n_,n_rank);
E_n_(ij_missed_) = 0;
svs_E_pos_ = svds(E_n_,n_row);
[U_E_pos_,S_E_pos_,V_E_pos_]= svds(E_n_,n_rank);
[E_imp_,E_fit_] = svd_impute_fit_3(E_n_,ij_missed_,n_rank);
[E_1nn_] = impute_knn(0,E_n_,ij_missed_,1);
[E_8nn_] = impute_knn(0,E_n_,ij_missed_,8);
[E_Gnn_] = impute_knn(0,E_n_,ij_missed_,16);
svs_E_imp_ = svds(E_imp_,n_row);
svs_E_fit_ = svds(E_fit_,n_row);
svs_E_1nn_ = svds(E_1nn_,n_row);
svs_E_8nn_ = svds(E_8nn_,n_row);
svs_E_Gnn_ = svds(E_Gnn_,n_row);
[U_E_imp_,S_E_imp_,V_E_imp_] = svds(E_imp_,n_rank);
[U_E_fit_,S_E_fit_,V_E_fit_] = svds(E_fit_,n_rank);
[U_E_1nn_,S_E_1nn_,V_E_1nn_] = svds(E_1nn_,n_rank);
[U_E_8nn_,S_E_8nn_,V_E_8nn_] = svds(E_8nn_,n_rank);
[U_E_Gnn_,S_E_Gnn_,V_E_Gnn_] = svds(E_Gnn_,n_rank);
%%%%%%%%;
U_C_imp_align_ = sqrt(sum((transpose(U_C_pre_)*U_C_imp_).^2,1)); V_C_imp_align_ = sqrt(sum((transpose(V_C_pre_)*V_C_imp_).^2,1));
for nX_factor=1:n_X_factor;
U_D_imp_align_(:,nX_factor) = sqrt(sum((transpose(U_D_pre_(:,:,nX_factor))*U_D_imp_(:,:,nX_factor)).^2,1)); 
V_D_imp_align_(:,nX_factor) = sqrt(sum((transpose(V_D_pre_(:,:,nX_factor))*V_D_imp_(:,:,nX_factor)).^2,1));
end;%for nX_factor=1:n_X_factor;
U_E_imp_align_ = sqrt(sum((transpose(U_E_pre_)*U_E_imp_).^2,1)); V_E_imp_align_ = sqrt(sum((transpose(V_E_pre_)*V_E_imp_).^2,1));
U_C_fit_align_ = sqrt(sum((transpose(U_C_pre_)*U_C_fit_).^2,1)); V_C_fit_align_ = sqrt(sum((transpose(V_C_pre_)*V_C_fit_).^2,1));
for nX_factor=1:n_X_factor;
U_D_fit_align_(:,nX_factor) = sqrt(sum((transpose(U_D_pre_(:,:,nX_factor))*U_D_fit_(:,:,nX_factor)).^2,1)); 
V_D_fit_align_(:,nX_factor) = sqrt(sum((transpose(V_D_pre_(:,:,nX_factor))*V_D_fit_(:,:,nX_factor)).^2,1));
end;%for nX_factor=1:n_X_factor;
U_E_fit_align_ = sqrt(sum((transpose(U_E_pre_)*U_E_fit_).^2,1)); V_E_fit_align_ = sqrt(sum((transpose(V_E_pre_)*V_E_fit_).^2,1));
U_C_1nn_align_ = sqrt(sum((transpose(U_C_pre_)*U_C_1nn_).^2,1)); V_C_1nn_align_ = sqrt(sum((transpose(V_C_pre_)*V_C_1nn_).^2,1));
for nX_factor=1:n_X_factor;
U_D_1nn_align_(:,nX_factor) = sqrt(sum((transpose(U_D_pre_(:,:,nX_factor))*U_D_1nn_(:,:,nX_factor)).^2,1)); 
V_D_1nn_align_(:,nX_factor) = sqrt(sum((transpose(V_D_pre_(:,:,nX_factor))*V_D_1nn_(:,:,nX_factor)).^2,1));
end;%for nX_factor=1:n_X_factor;
U_E_1nn_align_ = sqrt(sum((transpose(U_E_pre_)*U_E_1nn_).^2,1)); V_E_1nn_align_ = sqrt(sum((transpose(V_E_pre_)*V_E_1nn_).^2,1));
U_C_8nn_align_ = sqrt(sum((transpose(U_C_pre_)*U_C_8nn_).^2,1)); V_C_8nn_align_ = sqrt(sum((transpose(V_C_pre_)*V_C_8nn_).^2,1));
for nX_factor=1:n_X_factor;
U_D_8nn_align_(:,nX_factor) = sqrt(sum((transpose(U_D_pre_(:,:,nX_factor))*U_D_8nn_(:,:,nX_factor)).^2,1)); 
V_D_8nn_align_(:,nX_factor) = sqrt(sum((transpose(V_D_pre_(:,:,nX_factor))*V_D_8nn_(:,:,nX_factor)).^2,1));
end;%for nX_factor=1:n_X_factor;
U_E_8nn_align_ = sqrt(sum((transpose(U_E_pre_)*U_E_8nn_).^2,1)); V_E_8nn_align_ = sqrt(sum((transpose(V_E_pre_)*V_E_8nn_).^2,1));
U_C_Gnn_align_ = sqrt(sum((transpose(U_C_pre_)*U_C_Gnn_).^2,1)); V_C_Gnn_align_ = sqrt(sum((transpose(V_C_pre_)*V_C_Gnn_).^2,1));
for nX_factor=1:n_X_factor;
U_D_Gnn_align_(:,nX_factor) = sqrt(sum((transpose(U_D_pre_(:,:,nX_factor))*U_D_Gnn_(:,:,nX_factor)).^2,1)); 
V_D_Gnn_align_(:,nX_factor) = sqrt(sum((transpose(V_D_pre_(:,:,nX_factor))*V_D_Gnn_(:,:,nX_factor)).^2,1));
end;%for nX_factor=1:n_X_factor;
U_E_Gnn_align_ = sqrt(sum((transpose(U_E_pre_)*U_E_Gnn_).^2,1)); V_E_Gnn_align_ = sqrt(sum((transpose(V_E_pre_)*V_E_Gnn_).^2,1));
%%%%%%%%;
figure(1);clf;
x_ = (1:n_row)/n_row;
subplot(2,3,1);hold on;
plot(sort(svs_B_pre_),x_,'kx');
plot(sort(svs_C_1nn_),x_,'co-');
plot(sort(svs_E_1nn_),x_,'mo-');
c_ = colormap_beach(); n_c = size(c_,1);
for nX_factor=1:n_X_factor;
nc = max(1,min(n_c,floor(n_c*nX_factor/n_X_factor)));
plot(sort(svs_D_1nn_(:,nX_factor)),x_,'x-','Color',c_(nc,:));
end;%for nX_factor=1:n_X_factor;
legend(X_factor_str_,'Location','SouthEast');
xlabel('eigenvalue'); ylabel('cdf'); title('spectrum after 1nn-imputation');
hold off;
subplot(2,3,2);hold on;
plot(sort(svs_B_pre_),x_,'kx');
plot(sort(svs_C_8nn_),x_,'co-');
plot(sort(svs_E_8nn_),x_,'mo-');
c_ = colormap_beach(); n_c = size(c_,1);
for nX_factor=1:n_X_factor;
nc = max(1,min(n_c,floor(n_c*nX_factor/n_X_factor)));
plot(sort(svs_D_8nn_(:,nX_factor)),x_,'x-','Color',c_(nc,:));
end;%for nX_factor=1:n_X_factor;
legend(X_factor_str_,'Location','SouthEast');
xlabel('eigenvalue'); ylabel('cdf'); title('spectrum after 8nn-imputation');
hold off;
subplot(2,3,3);hold on;
plot(sort(svs_B_pre_),x_,'kx');
plot(sort(svs_C_Gnn_),x_,'co-');
plot(sort(svs_E_Gnn_),x_,'mo-');
c_ = colormap_beach(); n_c = size(c_,1);
for nX_factor=1:n_X_factor;
nc = max(1,min(n_c,floor(n_c*nX_factor/n_X_factor)));
plot(sort(svs_D_Gnn_(:,nX_factor)),x_,'x-','Color',c_(nc,:));
end;%for nX_factor=1:n_X_factor;
legend(X_factor_str_,'Location','SouthEast');
xlabel('eigenvalue'); ylabel('cdf'); title('spectrum after Gnn-imputation');
hold off;
subplot(2,3,4);hold on;
plot([0,1],[0,1],'kx');
plot(U_C_1nn_align_,V_C_1nn_align_,'co');
plot(U_E_1nn_align_,V_E_1nn_align_,'mo');
c_ = colormap_beach(); n_c = size(c_,1);
for nX_factor=1:n_X_factor;
nc = max(1,min(n_c,floor(n_c*nX_factor/n_X_factor)));
plot(U_D_1nn_align_(:,nX_factor),V_D_1nn_align_(:,nX_factor),'x','Color',c_(nc,:));
end;%for nX_factor=1:n_X_factor;
legend(X_factor_str_,'Location','SouthEast');
xlabel('U alignment'); ylabel('V alignment'); title('alignment after 1nn-imputation');
hold off;
subplot(2,3,5);hold on;
plot([0,1],[0,1],'kx');
plot(U_C_8nn_align_,V_C_8nn_align_,'co');
plot(U_E_8nn_align_,V_E_8nn_align_,'mo');
c_ = colormap_beach(); n_c = size(c_,1);
for nX_factor=1:n_X_factor;
nc = max(1,min(n_c,floor(n_c*nX_factor/n_X_factor)));
plot(U_D_8nn_align_(:,nX_factor),V_D_8nn_align_(:,nX_factor),'x','Color',c_(nc,:));
end;%for nX_factor=1:n_X_factor;
legend(X_factor_str_,'Location','SouthEast');
xlabel('U alignment'); ylabel('V alignment'); title('alignment after 8nn-imputation');
hold off;
subplot(2,3,6);hold on;
plot([0,1],[0,1],'kx');
plot(U_C_Gnn_align_,V_C_Gnn_align_,'co');
plot(U_E_Gnn_align_,V_E_Gnn_align_,'mo');
c_ = colormap_beach(); n_c = size(c_,1);
for nX_factor=1:n_X_factor;
nc = max(1,min(n_c,floor(n_c*nX_factor/n_X_factor)));
plot(U_D_Gnn_align_(:,nX_factor),V_D_Gnn_align_(:,nX_factor),'x','Color',c_(nc,:));
end;%for nX_factor=1:n_X_factor;
legend(X_factor_str_,'Location','SouthEast');
xlabel('U alignment'); ylabel('V alignment'); title('alignment after Gnn-imputation');
hold off;
figbig;
dir_jpg = '/data/rangan/dir_bcc/dir_jamison/dir_svd_impute/dir_jpg';
fig_str = sprintf('%s/test_knn_impute_bv%d_nk%d_v3',dir_jpg,round(bv),n_rank);
disp(sprintf(' %% writing %s',fig_str));
print('-depsc',sprintf('%s.eps',fig_str));
print('-djpeg',sprintf('%s.jpg',fig_str));
%%%%%%%%;
figure(2);clf;
x_ = (1:n_row)/n_row;
subplot(2,2,1);hold on;
plot(sort(svs_B_pre_),x_,'kx');
plot(sort(svs_C_imp_),x_,'co-');
plot(sort(svs_E_imp_),x_,'mo-');
c_ = colormap_beach(); n_c = size(c_,1);
for nX_factor=1:n_X_factor;
nc = max(1,min(n_c,floor(n_c*nX_factor/n_X_factor)));
plot(sort(svs_D_imp_(:,nX_factor)),x_,'x-','Color',c_(nc,:));
end;%for nX_factor=1:n_X_factor;
legend(X_factor_str_,'Location','SouthEast');
xlabel('eigenvalue'); ylabel('cdf'); title('spectrum after imputation');
hold off;
subplot(2,2,2);hold on;
plot(sort(svs_B_pre_),x_,'kx');
plot(sort(svs_C_fit_),x_,'co-');
plot(sort(svs_E_fit_),x_,'mo-');
c_ = colormap_beach(); n_c = size(c_,1);
for nX_factor=1:n_X_factor;
nc = max(1,min(n_c,floor(n_c*nX_factor/n_X_factor)));
plot(sort(svs_D_fit_(:,nX_factor)),x_,'x-','Color',c_(nc,:));
end;%for nX_factor=1:n_X_factor;
legend(X_factor_str_,'Location','SouthEast');
xlabel('eigenvalue'); ylabel('cdf'); title('imputed and fitted');
hold off;
subplot(2,2,3);hold on;
plot([0,1],[0,1],'kx');
plot(U_C_imp_align_,V_C_imp_align_,'co');
plot(U_E_imp_align_,V_E_imp_align_,'mo');
c_ = colormap_beach(); n_c = size(c_,1);
for nX_factor=1:n_X_factor;
nc = max(1,min(n_c,floor(n_c*nX_factor/n_X_factor)));
plot(U_D_imp_align_(:,nX_factor),V_D_imp_align_(:,nX_factor),'x','Color',c_(nc,:));
end;%for nX_factor=1:n_X_factor;
legend(X_factor_str_,'Location','SouthEast');
xlabel('U alignment'); ylabel('V alignment'); title('alignment after imputation');
hold off;
subplot(2,2,4);hold on;
plot([0,1],[0,1],'kx');
plot(U_C_fit_align_,V_C_fit_align_,'co');
plot(U_E_fit_align_,V_E_fit_align_,'mo');
c_ = colormap_beach(); n_c = size(c_,1);
for nX_factor=1:n_X_factor;
nc = max(1,min(n_c,floor(n_c*nX_factor/n_X_factor)));
plot(U_D_fit_align_(:,nX_factor),V_D_fit_align_(:,nX_factor),'x','Color',c_(nc,:));
end;%for nX_factor=1:n_X_factor;
legend(X_factor_str_,'Location','SouthEast');
xlabel('U alignment'); ylabel('V alignment'); title('imputed and fitted');
hold off;
figbig;
dir_jpg = '/data/rangan/dir_bcc/dir_jamison/dir_svd_impute/dir_jpg';
fig_str = sprintf('%s/test_svd_impute_bv%d_nk%d_v3',dir_jpg,round(bv),n_rank);
disp(sprintf(' %% writing %s',fig_str));
print('-depsc',sprintf('%s.eps',fig_str));
print('-djpeg',sprintf('%s.jpg',fig_str));
end;%if flag_plot;



