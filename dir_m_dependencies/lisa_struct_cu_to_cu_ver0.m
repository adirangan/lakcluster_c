function lisa = lisa_struct_cu_to_cu_ver0(lisa,annot,ontology);

%%%%%%%%;
cu_ = lisa.cdrop_a_;
so_ = lisa.so_;
su_ = lisa.su_;
so_to_su_ = lisa.so_to_su_;
su_to_so_ = lisa.su_to_so_;
so_by_su_xref_ = lisa.so_by_su_xref_;
tu_ = lisa.tu_;
su_to_tu_ = lisa.su_to_tu_;
ru_to_tu_ = lisa.ru_to_tu_;
tu_by_ru_xref_ = lisa.tu_by_ru_xref_;
%%%%%%%%;
n_ru = annot.n_ru;
ln_ = annot.ln_;
ru_ = annot.ru_;
eo__ = annot.eo__;
eu_max = annot.eu_max;
eo_ = annot.eo_;
ru_to_eo_ = annot.ru_to_eo_;
eu_ = annot.eu_;
eo_to_eu_ = annot.eo_to_eu_;
eu_to_eo_ = annot.eu_to_eo_;
ru_by_eu_xref_ = annot.ru_by_eu_xref_;
%%%%%%%%;
n_pathway = ontology.n_pathway;
pathway_name_ = ontology.pathway_name_;
pathway_size_ = ontology.pathway_size_;
po__ = ontology.po__;
po_ = ontology.po_;
pu_ = ontology.pu_;
po_to_pu_ = ontology.po_to_pu_;
pu_to_po_ = ontology.pu_to_po_;
qu_ = ontology.qu_;
eu_to_qu_ = ontology.eu_to_qu_;
pu_to_qu_ = ontology.pu_to_qu_;
eu_to_qu_xref_ = ontology.eu_to_qu_xref_;
pu_to_qu_xref_ = ontology.pu_to_qu_xref_;

%%%%%%%%%%%%%%%%;
% link pathways with snps in cu_ by taking the union over all snp-sets for each gene.; 
%%%%%%%%%%%%%%%%;
cu_to_cu__ = cell(n_pathway,1); %<-- this will hold the snp-indices (as entries of cu_) associated with the snps in each pathway. ; i.e., lisa.bim__id_(cu_(cu_to_cu__{npathway})) will hold the (string) rsids associated with pathway_name_{npathway}. ;
for npathway=1:n_pathway;
tmp_pathway_name = pathway_name_{npathway};
tmp_po_ = po__{npathway};
tmp_pathway_size = pathway_size_(npathway);
disp(sprintf(' %% npathway %d/%d name %s size %d',npathway,n_pathway,tmp_pathway_name,tmp_pathway_size));
tmp0_ = find(pu_to_qu_xref_(tmp_po_)>0);
tmp0_ = pu_(pu_to_qu_xref_(tmp_po_(tmp0_))); %<-- now tmp0_ stores only the EZid within pu_. ;
tmp1_ = find(eu_to_qu_xref_(tmp0_)>0); %<-- now tmp1_ indicates which of the the EZid within pu_ are also within eu_. ;
tmp2_ = eu_to_qu_xref_(tmp0_(tmp1_)); %<-- now tmp2_ allows us to reference the EZid within pu_ that are also within eo_uni. ; That is, eu_(tmp2_) will list the actual EZids in this intersection. ;
tmp3_ = eu_(tmp2_); %<-- now tmp3_ stores only the EZid within eu_ and pu_. ;
tmp4_ = find(sum(ru_by_eu_xref_(:,tmp2_),2)); %<-- now tmp4_ indexes the snp ids from ru_ associated with the genes in the pathway. ;
flag_check=0;
if flag_check;
disp(sprintf(' %% checking tmp4_ length %d',length(tmp4_)));
for nl=1:length(tmp4_);
assert(length(intersect(eo__{tmp4_(nl)},tmp3_))>0);
end;%for nl=1:length(tmp4_);
end;%if flag_check;
%{
[~,tmp5_,tmp6_] = intersect(ru_to_tu_,tmp4_,'stable'); %<-- tmp4_(tmp6_) contains the ru_ indices associated with snps in cap_snp_sort_uni_. ;
tmp7b_ = su_to_tu_(tmp5_); %<-- now su_(tmp7b_) should equal ru_(tmp4_(tmp6_));
flag_check=0;
if flag_check;
disp(sprintf(' %% checking tmp6_ length %d',length(tmp6_)));
for nl=1:length(tmp6_);
assert(strcmp(su_(tmp7b_(nl)),ru_(tmp4_(tmp6_(nl)))));
end;%for nl=1:length(tmp6_);
end;%if flag_check;
 %}
tmp7_ = su_to_tu_(find(sum(tu_by_ru_xref_(:,tmp4_),2)));%<-- now su_(tmp7_) should equal ru_(tmp4_(tmp6_)), where [~,~,tmp6_] = intersect(ru_to_tu_,tmp4_,'stable');
flag_check=0;
if flag_check;
[~,~,tmp6_] = intersect(ru_to_tu_,tmp4_,'stable');
assert(sum(strcmp(su_(tmp7_),ru_(tmp4_(tmp6_))))==length(tmp7_));
end;%if flag_check;
%plot (tmp7_-tmp7b_,'.'); %<-- this should be all zeros. ;
flag_check=0;
if flag_check;
disp(sprintf(' %% found tmp7_ of length %d',length(tmp7_)));
end;%if flag_check;
tmp8_ = find(sum(so_by_su_xref_(:,tmp7_),2)>0); %<-- now so_(tmp8_) should contain only names from su_(tmp7_);
flag_check=0;
if flag_check;
disp(sprintf(' %% checking tmp8_ length %d',length(tmp8_)));
assert(length(intersect(so_(tmp8_),su_(tmp7_)))==length(tmp7_));
assert(length(union(so_(tmp8_),su_(tmp7_)))==length(tmp7_));
end;%if flag_check;
tmp9_ = cu_(tmp8_); %<-- these are the snp column-indices listed in cdrop_a which correspond to the pathway. ;
cu_to_cu__{npathway} = tmp8_; %<-- we store only the actual rank-order within cdrop_a for each of the snps in the pathway. ;
end;%for npathway=1:n_pathway;
%%%%%%%%;
% a-posteriori check. ;
%%%%%%%%;
flag_check=0;
if flag_check;
npathway = 1+floor(n_pathway*rand());
disp(sprintf(' %% npathway %d name %s size %d',npathway,pathway_name_{npathway},pathway_size_(npathway)));
tmp_rs_ = unique(lisa.bim__id_(cu_(cu_to_cu__{npathway})));
disp(sprintf(' %% snps %d (%d unique): ',length(cu_to_cu__{npathway}),length(tmp_rs_)));
for nl=1:length(tmp_rs_);
tmp_ij = find(strcmp(ru_,tmp_rs_{nl}));
%disp(sprintf(' %% nl %d/%d snp %s, EZid intersection %d',nl,length(tmp_rs_),tmp_rs_{nl},length(intersect(eo__{tmp_ij},po__{npathway}))));
assert(length(intersect(eo__{tmp_ij},po__{npathway}))>0);
end;%for nl=1:length(tmp_rs_);
end;%if flag_check;
%%%%%%%%;
% Create mask (of indices along cdrop_a) ;
%%%%%%%%;
cu_to_cu_mc_ = zeros(size(cu_));
cu_mc_ = zeros(lisa.n_snp,1);
for npathway=1:n_pathway;
pathway_snp_size_(npathway) = length(cu_to_cu__{npathway});
cu_to_cu_mc_(cu_to_cu__{npathway}) = cu_to_cu_mc_(cu_to_cu__{npathway}) + 1;
cu_mc_(cu_(cu_to_cu__{npathway})) = 1;
end;%for npathway=1:n_pathway;

lisa.cu_to_cu__ = cu_to_cu__;
lisa.cu_to_cu_mc_ = cu_to_cu_mc_;
lisa.cu_mc_ = cu_mc_;
