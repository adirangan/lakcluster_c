clear;
setup_OptiPlex;
dir_trunk = '/home/rangan/dir_bcc/dir_dolphin';
dir_jpg = sprintf('%s/dir_jpg',dir_trunk);

flag_replot=1;

%%%%%%%%;
% Generate data. ;
%%%%%%%%;
rng(0);
n_var = 2;
a_tru_ = zeros(n_var,1);
a_tru_ = [0.5;-0.2];
A_tru__ = zeros(n_var,n_var);
A_tru__ = ...
    [ -0.1 -1.8 ; ...
      +1.3 -0.2 ];
CC_tru__ = 1*[1, 0.5 ; 0.5 , 1]; C_tru__ = sqrtm(CC_tru__);
BB_tru__ = 1*[2, 0.3 ; 0.3 , 2]; B_tru__ = sqrtm(BB_tru__);
n_T = 1024*8; dt_max = 0.1;
Y__ = zeros(n_var,n_T);
Y__(:,1+0) = [1;0];
age_ = zeros(n_T,1);
for nT=1:n_T-1;
dt=dt_max*rand();
age_(1+nT) = age_(1+nT-1) + dt;
Y_pre_ = Y__(:,1+nT-1);
Y_pos_ = Y_pre_ + dt*(a_tru_ + A_tru__*Y_pre_) + sqrt(dt)*B_tru__*randn(n_var,1);
Y__(:,1+nT+0) = Y_pos_ + C_tru__*randn(n_var,1);
end;%for nT=1:n_T-1;
aid_ = ones(n_T,1);
dat__ = transpose(Y__);
plot(Y__(1,:),Y__(2,:),'.-');
[n_smp,n_var] = size(dat__);
string_dat_name_ = {'x';'y'};
dt_all_ = diff(age_);
n_step = 1;
dt_lim_ = [0;max(age_(1+n_step:end)-age_(1:end-n_step))];

a_ = zeros(n_var,1); A__ = zeros(n_var,n_var);
%%%%%%%%;
% Now estimate initial B,C. ;
%%%%%%%%;
[BB__,CC__,l2_R__,sum_1,sum_dt,sum_dtdt,sum_DDj__,sum_DDjdt__] = dolphin_estimate_BC_from_aA_0(aid_,age_,dat__,a_,A__,n_step);
[BB_crude__,CC_crude__] = dolphin_estimate_BC_from_aA_crude_0(aid_,age_,dat__,a_,A__,n_step);
disp(sprintf(' %% BB__ vs BB_crude__: %0.16f',fnorm(BB__ - BB_crude__)/fnorm(BB__)));
disp(sprintf(' %% CC__ vs CC_crude__: %0.16f',fnorm(CC__ - CC_crude__)/fnorm(CC__)));
BB__ = BB_crude__; CC__ = CC_crude__; %<-- use crude method. ;
%%%%%%%%;
% Now estimate A. ;
%%%%%%%%;
[a_,A__,L] = dolphin_estimate_aA_from_BC_0(aid_,age_,dat__,BB__,CC__,dt_lim_,n_step);
disp(sprintf(' %% initial: negative-log-likelihood %0.16f',L));
%%%%%%%%;
% Now iterate a few times. ;
%%%%%%%%;
n_iteration = 4;
L_ = zeros(n_iteration+1,1);
a__ = cell(1+n_iteration,1);
A___ = cell(1+n_iteration,1);
BB___ = cell(1+n_iteration,1);
CC___ = cell(1+n_iteration,1);
niteration=0;
L_old = L;
L_(1+niteration) = L_old;
a__{1+niteration} = a_;
A___{1+niteration} = A__;
BB___{1+niteration} = BB__;
CC___{1+niteration} = CC__;
flag_continue=1;
while (flag_continue);
% Re-estimate B,C. ;
[BB__,CC__,l2_R__,sum_1,sum_dt,sum_dtdt,sum_DDj__,sum_DDjdt__] = dolphin_estimate_BC_from_aA_0(aid_,age_,dat__,a_,A__,n_step);
[BB_crude__,CC_crude__] = dolphin_estimate_BC_from_aA_crude_0(aid_,age_,dat__,a_,A__,n_step);
disp(sprintf(' %% BB__ vs BB_crude__: %0.16f',fnorm(BB__ - BB_crude__)/fnorm(BB__)));
disp(sprintf(' %% CC__ vs CC_crude__: %0.16f',fnorm(CC__ - CC_crude__)/fnorm(CC__)));
BB__ = BB_crude__; CC__ = CC_crude__; %<-- use crude method. ;
% Re-estimate a_ and A__ from BB__ and CC__. ;
[a_,A__,L] = dolphin_estimate_aA_from_BC_0(aid_,age_,dat__,BB__,CC__,dt_lim_,n_step);
L_new = L; L_(1+niteration+1)=L;
a__{1+niteration+1} = a_;
A___{1+niteration+1} = A__;
BB___{1+niteration+1} = BB__;
CC___{1+niteration+1} = CC__;
disp(sprintf(' %% iteration %d: negative-log-likelihood %0.16f',niteration,L));
flag_continue=0;
niteration=niteration+1;
if (niteration<n_iteration & fnorm(L_old-L_new)/fnorm(L_old)>1e-3); flag_continue=1; end;
L_old = L_new;
end;%while (flag_continue);
%%%%%%%%;

