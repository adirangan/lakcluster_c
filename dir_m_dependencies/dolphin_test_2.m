function [] = dolphin_test_2(rseed,n_var,dt_avg,relative_variation,snr);
% Assumes exponential distribution of dt with mean dt_avg. ;
setup_OptiPlex;
dir_trunk = '/home/rangan/dir_bcc/dir_dolphin';
dir_jpg = sprintf('%s/dir_jpg',dir_trunk);

flag_replot=1;
flag_crude=1;

%%%%%%%%;
% Generate data. ;
%%%%%%%%;
rng(rseed);

amplitude = 1.0;

a_tru_ = 1.0*randn(n_var,1);
A_tru__ = randn(n_var,n_var);
[Psi__,Lambda__] = eig(A_tru__); Psi_inv__ = inv(Psi__);
Lambda_ = diag(Lambda__);
for nvar=0:n_var-1; Lambda_(1+nvar) = min(-0.1,real(Lambda_(1+nvar))) + i*imag(Lambda_(1+nvar)); end; %<-- rectify spectrum of A. ;
Lambda__ = diag(Lambda_);
A_tru__ = Psi__*Lambda__*Psi_inv__;
C_tru__  = 1.0*randn(n_var,n_var); CC_tru__ = C_tru__*transpose(C_tru__);
B_tru__  = 1.0*randn(n_var,n_var); BB_tru__ = B_tru__*transpose(B_tru__);
n_T = 1024*1;
A_inv_a_ = inv(A_tru__)*a_tru_;

[R_avg] = evolve_SDE(rseed,n_T,n_var,A_inv_a_,Psi__,Lambda_,Psi_inv__,B_tru__,C_tru__,snr,amplitude);

disp('return'); return;

[R_avg,dt_,age_,Y__] = evolve_SDE(rseed,n_T,n_var,A_inv_a_,Psi__,Lambda_,Psi_inv__,B__,C__,snr,amplitude);

n_T = 1024*8;
Y__ = zeros(n_var,n_T);
Y__(:,1+0) = randn(n_var,1);
age_ = zeros(n_T,1);
dt_ = zeros(n_T-1,1);
A_inv_tru__ = inv(A_tru__);
A_inv_a_tru_ = A_inv_tru__*a_tru_;
for nT=1:n_T-1;
dt=-dt_avg * log(1-rand());
dt_(1+nT-1) = dt;
age_(1+nT) = age_(1+nT-1) + dt;
Y_pre_ = Y__(:,1+nT-1);
tmp_exp_Adt__ = Psi_tru__ * diag(exp(+Lambda_tru_*dt)) * Psi_inv_tru__;
%Y_pos_ = Y_pre_ + dt*(a_tru_ + A_tru__*Y_pre_) + sqrt(dt)*B_tru__*randn(n_var,1);
Y_pos_ = -A_inv_a_tru_ + tmp_exp_Adt__ * (Y_pre_ + A_inv_a_tru_ + SDE_sample_int_expAsBdW(dt,Psi_tru__,Lambda_tru_,Psi_inv_tru__*B_tru__,1e-2));
Y__(:,1+nT+0) = Y_pos_ + C_tru__*randn(n_var,1);
end;%for nT=1:n_T-1;
aid_ = ones(n_T,1);
dat__ = transpose(Y__);
plot(Y__(1,:),Y__(2,:),'.-');
[n_smp,n_var] = size(dat__);
string_dat_name_ = {'x';'y'};
dt_all_ = diff(age_);
n_step = 1;
dt_lim_ = [0;max(age_(1+n_step:end)-age_(1:end-n_step))];

a_ = zeros(n_var,1); A__ = zeros(n_var,n_var);
%%%%%%%%;
% Now estimate initial B,C. ;
%%%%%%%%;
[BB__,CC__,l2_R__,sum_1,sum_dt,sum_dtdt,sum_DDj__,sum_DDjdt__] = dolphin_estimate_BC_from_aA_0(aid_,age_,dat__,a_,A__,n_step);
[BB_crude__,CC_crude__] = dolphin_estimate_BC_from_aA_crude_0(aid_,age_,dat__,a_,A__,n_step);
disp(sprintf(' %% BB__ vs BB_crude__: %0.16f',fnorm(BB__ - BB_crude__)/fnorm(BB__)));
disp(sprintf(' %% CC__ vs CC_crude__: %0.16f',fnorm(CC__ - CC_crude__)/fnorm(CC__)));
if (flag_crude); BB__ = BB_crude__; CC__ = CC_crude__; end; %<-- use crude method. ;
%%%%%%%%;
% Now estimate A. ;
%%%%%%%%;
[a_,A__,L] = dolphin_estimate_aA_from_BC_0(aid_,age_,dat__,BB__,CC__,dt_lim_,n_step);
disp(sprintf(' %% initial: negative-log-likelihood %0.16f',L));
%%%%%%%%;
% Now iterate a few times. ;
%%%%%%%%;
n_iteration = 4;
L_ = zeros(n_iteration+1,1);
a__ = cell(1+n_iteration,1);
A___ = cell(1+n_iteration,1);
BB___ = cell(1+n_iteration,1);
CC___ = cell(1+n_iteration,1);
niteration=0;
L_old = L;
L_(1+niteration) = L_old;
a__{1+niteration} = a_;
A___{1+niteration} = A__;
BB___{1+niteration} = BB__;
CC___{1+niteration} = CC__;
flag_continue=1;
while (flag_continue);
% Re-estimate B,C. ;
[BB__,CC__,l2_R__,sum_1,sum_dt,sum_dtdt,sum_DDj__,sum_DDjdt__] = dolphin_estimate_BC_from_aA_0(aid_,age_,dat__,a_,A__,n_step);
[BB_crude__,CC_crude__] = dolphin_estimate_BC_from_aA_crude_0(aid_,age_,dat__,a_,A__,n_step);
disp(sprintf(' %% BB__ vs BB_crude__: %0.16f',fnorm(BB__ - BB_crude__)/fnorm(BB__)));
disp(sprintf(' %% CC__ vs CC_crude__: %0.16f',fnorm(CC__ - CC_crude__)/fnorm(CC__)));
if (flag_crude); BB__ = BB_crude__; CC__ = CC_crude__; end; %<-- use crude method. ;
% Re-estimate a_ and A__ from BB__ and CC__. ;
[a_,A__,L] = dolphin_estimate_aA_from_BC_0(aid_,age_,dat__,BB__,CC__,dt_lim_,n_step);
L_new = L; L_(1+niteration+1)=L;
a__{1+niteration+1} = a_;
A___{1+niteration+1} = A__;
BB___{1+niteration+1} = BB__;
CC___{1+niteration+1} = CC__;
disp(sprintf(' %% iteration %d: negative-log-likelihood %0.16f',niteration,L));
f_a_ = fnorm(a_ - a_tru_)/fnorm(a_tru_);
f_A__ = fnorm(A__ - A_tru__)/fnorm(A_tru__);
f_BB__ = fnorm(BB__ - BB_tru__)/fnorm(BB_tru__);
f_CC__ = fnorm(CC__ - CC_tru__)/fnorm(CC_tru__);
disp(sprintf(' %% iteration %d: f_a_ %0.2f f_A__ %0.2f f_BB__ %0.2f f_CC__ %0.2f',niteration,f_a_,f_A__,f_BB__,f_CC__));
flag_continue=0;
niteration=niteration+1;
if (niteration<n_iteration & fnorm(L_old-L_new)/fnorm(L_old)>1e-3); flag_continue=1; end;
L_old = L_new;
end;%while (flag_continue);
%%%%%%%%;

function [R_avg,dt_,age_,Y__] = evolve_SDE(rseed,n_T,n_var,A_inv_a_,Psi__,Lambda_,Psi_inv__,B__,C__,snr,amplitude);
rng(rseed);
Y__ = zeros(n_var,n_T);
Y__(:,1+0) = randn(n_var,1);
age_ = zeros(n_T,1);
dt_ = zeros(n_T-1,1);
R_ = zeros(n_T-1,1);
for nT=1:n_T-1;
dt=-dt_avg * log(1-rand());
dt_(1+nT-1) = dt;
age_(1+nT) = age_(1+nT-1) + dt;
Y_pre_ = Y__(:,1+nT-1);
tmp_exp_Adt__ = Psi__ * diag(exp(+amplitude*Lambda_*dt)) * Psi_inv__;
Y_pos_ = -A_inv_a_ + tmp_exp_Adt__ * (Y_pre_ + A_inv_a_ + SDE_sample_int_expAsBdW(dt,Psi__,amplitude*Lambda_,amplitude/snr*Psi_inv__*B__,1e-2));
Y__(:,1+nT+0) = Y_pos_ + amplitude/snr*C__*randn(n_var,1);
R_(1+nT-1) = fnorm(Y__(:,1+nT+0) - Y__(:,1+nT-1))/fnorm(Y__(:,1+nT-1));
end;%for nT=1:n_T-1;
R_avg = mean(R_);
